// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sample2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sample2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sample2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sample2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sample2_2eproto;
namespace sample2 {
class Msg;
class MsgDefaultTypeInternal;
extern MsgDefaultTypeInternal _Msg_default_instance_;
class Msg_MapEntry_DoNotUse;
class Msg_MapEntry_DoNotUseDefaultTypeInternal;
extern Msg_MapEntry_DoNotUseDefaultTypeInternal _Msg_MapEntry_DoNotUse_default_instance_;
class Msg_SubMsg;
class Msg_SubMsgDefaultTypeInternal;
extern Msg_SubMsgDefaultTypeInternal _Msg_SubMsg_default_instance_;
class Test1;
class Test1DefaultTypeInternal;
extern Test1DefaultTypeInternal _Test1_default_instance_;
class Test2;
class Test2DefaultTypeInternal;
extern Test2DefaultTypeInternal _Test2_default_instance_;
class Test3;
class Test3DefaultTypeInternal;
extern Test3DefaultTypeInternal _Test3_default_instance_;
class Test4;
class Test4DefaultTypeInternal;
extern Test4DefaultTypeInternal _Test4_default_instance_;
}  // namespace sample2
PROTOBUF_NAMESPACE_OPEN
template<> ::sample2::Msg* Arena::CreateMaybeMessage<::sample2::Msg>(Arena*);
template<> ::sample2::Msg_MapEntry_DoNotUse* Arena::CreateMaybeMessage<::sample2::Msg_MapEntry_DoNotUse>(Arena*);
template<> ::sample2::Msg_SubMsg* Arena::CreateMaybeMessage<::sample2::Msg_SubMsg>(Arena*);
template<> ::sample2::Test1* Arena::CreateMaybeMessage<::sample2::Test1>(Arena*);
template<> ::sample2::Test2* Arena::CreateMaybeMessage<::sample2::Test2>(Arena*);
template<> ::sample2::Test3* Arena::CreateMaybeMessage<::sample2::Test3>(Arena*);
template<> ::sample2::Test4* Arena::CreateMaybeMessage<::sample2::Test4>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sample2 {

enum Msg_SubEnum : int {
  Msg_SubEnum_APPLE = 0,
  Msg_SubEnum_BANANA = 1,
  Msg_SubEnum_CHOCOLATE = 2
};
bool Msg_SubEnum_IsValid(int value);
constexpr Msg_SubEnum Msg_SubEnum_SubEnum_MIN = Msg_SubEnum_APPLE;
constexpr Msg_SubEnum Msg_SubEnum_SubEnum_MAX = Msg_SubEnum_CHOCOLATE;
constexpr int Msg_SubEnum_SubEnum_ARRAYSIZE = Msg_SubEnum_SubEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Msg_SubEnum_descriptor();
template<typename T>
inline const std::string& Msg_SubEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Msg_SubEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Msg_SubEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Msg_SubEnum_descriptor(), enum_t_value);
}
inline bool Msg_SubEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Msg_SubEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Msg_SubEnum>(
    Msg_SubEnum_descriptor(), name, value);
}
// ===================================================================

class Msg_SubMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample2.Msg.SubMsg) */ {
 public:
  inline Msg_SubMsg() : Msg_SubMsg(nullptr) {}
  virtual ~Msg_SubMsg();

  Msg_SubMsg(const Msg_SubMsg& from);
  Msg_SubMsg(Msg_SubMsg&& from) noexcept
    : Msg_SubMsg() {
    *this = ::std::move(from);
  }

  inline Msg_SubMsg& operator=(const Msg_SubMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg_SubMsg& operator=(Msg_SubMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg_SubMsg& default_instance();

  static inline const Msg_SubMsg* internal_default_instance() {
    return reinterpret_cast<const Msg_SubMsg*>(
               &_Msg_SubMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Msg_SubMsg& a, Msg_SubMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg_SubMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg_SubMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg_SubMsg* New() const final {
    return CreateMaybeMessage<Msg_SubMsg>(nullptr);
  }

  Msg_SubMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg_SubMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg_SubMsg& from);
  void MergeFrom(const Msg_SubMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg_SubMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample2.Msg.SubMsg";
  }
  protected:
  explicit Msg_SubMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sample2_2eproto);
    return ::descriptor_table_sample2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:sample2.Msg.SubMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample2_2eproto;
};
// -------------------------------------------------------------------

class Msg_MapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Msg_MapEntry_DoNotUse, 
    std::string, ::sample2::Msg_SubMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Msg_MapEntry_DoNotUse, 
    std::string, ::sample2::Msg_SubMsg,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Msg_MapEntry_DoNotUse();
  explicit Msg_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Msg_MapEntry_DoNotUse& other);
  static const Msg_MapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Msg_MapEntry_DoNotUse*>(&_Msg_MapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
#ifndef NDEBUG
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
       s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "sample2.Msg.MapEntry.key");
#else
    (void) s;
#endif
    return true;
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sample2_2eproto);
    return ::descriptor_table_sample2_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class Msg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample2.Msg) */ {
 public:
  inline Msg() : Msg(nullptr) {}
  virtual ~Msg();

  Msg(const Msg& from);
  Msg(Msg&& from) noexcept
    : Msg() {
    *this = ::std::move(from);
  }

  inline Msg& operator=(const Msg& from) {
    CopyFrom(from);
    return *this;
  }
  inline Msg& operator=(Msg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Msg& default_instance();

  static inline const Msg* internal_default_instance() {
    return reinterpret_cast<const Msg*>(
               &_Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Msg& a, Msg& b) {
    a.Swap(&b);
  }
  inline void Swap(Msg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Msg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Msg* New() const final {
    return CreateMaybeMessage<Msg>(nullptr);
  }

  Msg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Msg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Msg& from);
  void MergeFrom(const Msg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Msg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample2.Msg";
  }
  protected:
  explicit Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sample2_2eproto);
    return ::descriptor_table_sample2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Msg_SubMsg SubMsg;

  typedef Msg_SubEnum SubEnum;
  static constexpr SubEnum APPLE =
    Msg_SubEnum_APPLE;
  static constexpr SubEnum BANANA =
    Msg_SubEnum_BANANA;
  static constexpr SubEnum CHOCOLATE =
    Msg_SubEnum_CHOCOLATE;
  static inline bool SubEnum_IsValid(int value) {
    return Msg_SubEnum_IsValid(value);
  }
  static constexpr SubEnum SubEnum_MIN =
    Msg_SubEnum_SubEnum_MIN;
  static constexpr SubEnum SubEnum_MAX =
    Msg_SubEnum_SubEnum_MAX;
  static constexpr int SubEnum_ARRAYSIZE =
    Msg_SubEnum_SubEnum_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubEnum_descriptor() {
    return Msg_SubEnum_descriptor();
  }
  template<typename T>
  static inline const std::string& SubEnum_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubEnum>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubEnum_Name.");
    return Msg_SubEnum_Name(enum_t_value);
  }
  static inline bool SubEnum_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubEnum* value) {
    return Msg_SubEnum_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kI32RepFieldNumber = 3,
    kBytesRepFieldNumber = 6,
    kStringRepFieldNumber = 9,
    kSubmsgRepFieldNumber = 12,
    kF32RepFieldNumber = 15,
    kSubenumRepFieldNumber = 18,
    kMsgRepFieldNumber = 21,
    kMapFieldNumber = 22,
    kBytesReqFieldNumber = 4,
    kBytesOptFieldNumber = 5,
    kStringReqFieldNumber = 7,
    kStringOptFieldNumber = 8,
    kSubmsgReqFieldNumber = 10,
    kSubmsgOptFieldNumber = 11,
    kMsgOptFieldNumber = 20,
    kI32ReqFieldNumber = 1,
    kI32OptFieldNumber = 2,
    kF32ReqFieldNumber = 13,
    kF32OptFieldNumber = 14,
    kSubenumReqFieldNumber = 16,
    kSubenumOptFieldNumber = 17,
  };
  // repeated int32 i32_rep = 3;
  int i32_rep_size() const;
  private:
  int _internal_i32_rep_size() const;
  public:
  void clear_i32_rep();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32_rep(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_i32_rep() const;
  void _internal_add_i32_rep(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_i32_rep();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 i32_rep(int index) const;
  void set_i32_rep(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_i32_rep(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      i32_rep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_i32_rep();

  // repeated bytes bytes_rep = 6;
  int bytes_rep_size() const;
  private:
  int _internal_bytes_rep_size() const;
  public:
  void clear_bytes_rep();
  const std::string& bytes_rep(int index) const;
  std::string* mutable_bytes_rep(int index);
  void set_bytes_rep(int index, const std::string& value);
  void set_bytes_rep(int index, std::string&& value);
  void set_bytes_rep(int index, const char* value);
  void set_bytes_rep(int index, const void* value, size_t size);
  std::string* add_bytes_rep();
  void add_bytes_rep(const std::string& value);
  void add_bytes_rep(std::string&& value);
  void add_bytes_rep(const char* value);
  void add_bytes_rep(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& bytes_rep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_bytes_rep();
  private:
  const std::string& _internal_bytes_rep(int index) const;
  std::string* _internal_add_bytes_rep();
  public:

  // repeated string string_rep = 9;
  int string_rep_size() const;
  private:
  int _internal_string_rep_size() const;
  public:
  void clear_string_rep();
  const std::string& string_rep(int index) const;
  std::string* mutable_string_rep(int index);
  void set_string_rep(int index, const std::string& value);
  void set_string_rep(int index, std::string&& value);
  void set_string_rep(int index, const char* value);
  void set_string_rep(int index, const char* value, size_t size);
  std::string* add_string_rep();
  void add_string_rep(const std::string& value);
  void add_string_rep(std::string&& value);
  void add_string_rep(const char* value);
  void add_string_rep(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& string_rep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_string_rep();
  private:
  const std::string& _internal_string_rep(int index) const;
  std::string* _internal_add_string_rep();
  public:

  // repeated .sample2.Msg.SubMsg submsg_rep = 12;
  int submsg_rep_size() const;
  private:
  int _internal_submsg_rep_size() const;
  public:
  void clear_submsg_rep();
  ::sample2::Msg_SubMsg* mutable_submsg_rep(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg_SubMsg >*
      mutable_submsg_rep();
  private:
  const ::sample2::Msg_SubMsg& _internal_submsg_rep(int index) const;
  ::sample2::Msg_SubMsg* _internal_add_submsg_rep();
  public:
  const ::sample2::Msg_SubMsg& submsg_rep(int index) const;
  ::sample2::Msg_SubMsg* add_submsg_rep();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg_SubMsg >&
      submsg_rep() const;

  // repeated float f32_rep = 15;
  int f32_rep_size() const;
  private:
  int _internal_f32_rep_size() const;
  public:
  void clear_f32_rep();
  private:
  float _internal_f32_rep(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_f32_rep() const;
  void _internal_add_f32_rep(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_f32_rep();
  public:
  float f32_rep(int index) const;
  void set_f32_rep(int index, float value);
  void add_f32_rep(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      f32_rep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_f32_rep();

  // repeated .sample2.Msg.SubEnum subenum_rep = 18;
  int subenum_rep_size() const;
  private:
  int _internal_subenum_rep_size() const;
  public:
  void clear_subenum_rep();
  private:
  ::sample2::Msg_SubEnum _internal_subenum_rep(int index) const;
  void _internal_add_subenum_rep(::sample2::Msg_SubEnum value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_subenum_rep();
  public:
  ::sample2::Msg_SubEnum subenum_rep(int index) const;
  void set_subenum_rep(int index, ::sample2::Msg_SubEnum value);
  void add_subenum_rep(::sample2::Msg_SubEnum value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& subenum_rep() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_subenum_rep();

  // repeated .sample2.Msg msg_rep = 21;
  int msg_rep_size() const;
  private:
  int _internal_msg_rep_size() const;
  public:
  void clear_msg_rep();
  ::sample2::Msg* mutable_msg_rep(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg >*
      mutable_msg_rep();
  private:
  const ::sample2::Msg& _internal_msg_rep(int index) const;
  ::sample2::Msg* _internal_add_msg_rep();
  public:
  const ::sample2::Msg& msg_rep(int index) const;
  ::sample2::Msg* add_msg_rep();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg >&
      msg_rep() const;

  // map<string, .sample2.Msg.SubMsg> map = 22;
  int map_size() const;
  private:
  int _internal_map_size() const;
  public:
  void clear_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >&
      _internal_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >*
      _internal_mutable_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >&
      map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >*
      mutable_map();

  // required bytes bytes_req = 4;
  bool has_bytes_req() const;
  private:
  bool _internal_has_bytes_req() const;
  public:
  void clear_bytes_req();
  const std::string& bytes_req() const;
  void set_bytes_req(const std::string& value);
  void set_bytes_req(std::string&& value);
  void set_bytes_req(const char* value);
  void set_bytes_req(const void* value, size_t size);
  std::string* mutable_bytes_req();
  std::string* release_bytes_req();
  void set_allocated_bytes_req(std::string* bytes_req);
  private:
  const std::string& _internal_bytes_req() const;
  void _internal_set_bytes_req(const std::string& value);
  std::string* _internal_mutable_bytes_req();
  public:

  // optional bytes bytes_opt = 5;
  bool has_bytes_opt() const;
  private:
  bool _internal_has_bytes_opt() const;
  public:
  void clear_bytes_opt();
  const std::string& bytes_opt() const;
  void set_bytes_opt(const std::string& value);
  void set_bytes_opt(std::string&& value);
  void set_bytes_opt(const char* value);
  void set_bytes_opt(const void* value, size_t size);
  std::string* mutable_bytes_opt();
  std::string* release_bytes_opt();
  void set_allocated_bytes_opt(std::string* bytes_opt);
  private:
  const std::string& _internal_bytes_opt() const;
  void _internal_set_bytes_opt(const std::string& value);
  std::string* _internal_mutable_bytes_opt();
  public:

  // required string string_req = 7;
  bool has_string_req() const;
  private:
  bool _internal_has_string_req() const;
  public:
  void clear_string_req();
  const std::string& string_req() const;
  void set_string_req(const std::string& value);
  void set_string_req(std::string&& value);
  void set_string_req(const char* value);
  void set_string_req(const char* value, size_t size);
  std::string* mutable_string_req();
  std::string* release_string_req();
  void set_allocated_string_req(std::string* string_req);
  private:
  const std::string& _internal_string_req() const;
  void _internal_set_string_req(const std::string& value);
  std::string* _internal_mutable_string_req();
  public:

  // optional string string_opt = 8;
  bool has_string_opt() const;
  private:
  bool _internal_has_string_opt() const;
  public:
  void clear_string_opt();
  const std::string& string_opt() const;
  void set_string_opt(const std::string& value);
  void set_string_opt(std::string&& value);
  void set_string_opt(const char* value);
  void set_string_opt(const char* value, size_t size);
  std::string* mutable_string_opt();
  std::string* release_string_opt();
  void set_allocated_string_opt(std::string* string_opt);
  private:
  const std::string& _internal_string_opt() const;
  void _internal_set_string_opt(const std::string& value);
  std::string* _internal_mutable_string_opt();
  public:

  // required .sample2.Msg.SubMsg submsg_req = 10;
  bool has_submsg_req() const;
  private:
  bool _internal_has_submsg_req() const;
  public:
  void clear_submsg_req();
  const ::sample2::Msg_SubMsg& submsg_req() const;
  ::sample2::Msg_SubMsg* release_submsg_req();
  ::sample2::Msg_SubMsg* mutable_submsg_req();
  void set_allocated_submsg_req(::sample2::Msg_SubMsg* submsg_req);
  private:
  const ::sample2::Msg_SubMsg& _internal_submsg_req() const;
  ::sample2::Msg_SubMsg* _internal_mutable_submsg_req();
  public:
  void unsafe_arena_set_allocated_submsg_req(
      ::sample2::Msg_SubMsg* submsg_req);
  ::sample2::Msg_SubMsg* unsafe_arena_release_submsg_req();

  // optional .sample2.Msg.SubMsg submsg_opt = 11;
  bool has_submsg_opt() const;
  private:
  bool _internal_has_submsg_opt() const;
  public:
  void clear_submsg_opt();
  const ::sample2::Msg_SubMsg& submsg_opt() const;
  ::sample2::Msg_SubMsg* release_submsg_opt();
  ::sample2::Msg_SubMsg* mutable_submsg_opt();
  void set_allocated_submsg_opt(::sample2::Msg_SubMsg* submsg_opt);
  private:
  const ::sample2::Msg_SubMsg& _internal_submsg_opt() const;
  ::sample2::Msg_SubMsg* _internal_mutable_submsg_opt();
  public:
  void unsafe_arena_set_allocated_submsg_opt(
      ::sample2::Msg_SubMsg* submsg_opt);
  ::sample2::Msg_SubMsg* unsafe_arena_release_submsg_opt();

  // optional .sample2.Msg msg_opt = 20;
  bool has_msg_opt() const;
  private:
  bool _internal_has_msg_opt() const;
  public:
  void clear_msg_opt();
  const ::sample2::Msg& msg_opt() const;
  ::sample2::Msg* release_msg_opt();
  ::sample2::Msg* mutable_msg_opt();
  void set_allocated_msg_opt(::sample2::Msg* msg_opt);
  private:
  const ::sample2::Msg& _internal_msg_opt() const;
  ::sample2::Msg* _internal_mutable_msg_opt();
  public:
  void unsafe_arena_set_allocated_msg_opt(
      ::sample2::Msg* msg_opt);
  ::sample2::Msg* unsafe_arena_release_msg_opt();

  // required int32 i32_req = 1;
  bool has_i32_req() const;
  private:
  bool _internal_has_i32_req() const;
  public:
  void clear_i32_req();
  ::PROTOBUF_NAMESPACE_ID::int32 i32_req() const;
  void set_i32_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32_req() const;
  void _internal_set_i32_req(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 i32_opt = 2;
  bool has_i32_opt() const;
  private:
  bool _internal_has_i32_opt() const;
  public:
  void clear_i32_opt();
  ::PROTOBUF_NAMESPACE_ID::int32 i32_opt() const;
  void set_i32_opt(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_i32_opt() const;
  void _internal_set_i32_opt(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float f32_req = 13;
  bool has_f32_req() const;
  private:
  bool _internal_has_f32_req() const;
  public:
  void clear_f32_req();
  float f32_req() const;
  void set_f32_req(float value);
  private:
  float _internal_f32_req() const;
  void _internal_set_f32_req(float value);
  public:

  // optional float f32_opt = 14;
  bool has_f32_opt() const;
  private:
  bool _internal_has_f32_opt() const;
  public:
  void clear_f32_opt();
  float f32_opt() const;
  void set_f32_opt(float value);
  private:
  float _internal_f32_opt() const;
  void _internal_set_f32_opt(float value);
  public:

  // required .sample2.Msg.SubEnum subenum_req = 16;
  bool has_subenum_req() const;
  private:
  bool _internal_has_subenum_req() const;
  public:
  void clear_subenum_req();
  ::sample2::Msg_SubEnum subenum_req() const;
  void set_subenum_req(::sample2::Msg_SubEnum value);
  private:
  ::sample2::Msg_SubEnum _internal_subenum_req() const;
  void _internal_set_subenum_req(::sample2::Msg_SubEnum value);
  public:

  // optional .sample2.Msg.SubEnum subenum_opt = 17;
  bool has_subenum_opt() const;
  private:
  bool _internal_has_subenum_opt() const;
  public:
  void clear_subenum_opt();
  ::sample2::Msg_SubEnum subenum_opt() const;
  void set_subenum_opt(::sample2::Msg_SubEnum value);
  private:
  ::sample2::Msg_SubEnum _internal_subenum_opt() const;
  void _internal_set_subenum_opt(::sample2::Msg_SubEnum value);
  public:

  // @@protoc_insertion_point(class_scope:sample2.Msg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > i32_rep_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> bytes_rep_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> string_rep_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg_SubMsg > submsg_rep_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > f32_rep_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> subenum_rep_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg > msg_rep_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Msg_MapEntry_DoNotUse,
      std::string, ::sample2::Msg_SubMsg,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_req_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bytes_opt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_req_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_opt_;
  ::sample2::Msg_SubMsg* submsg_req_;
  ::sample2::Msg_SubMsg* submsg_opt_;
  ::sample2::Msg* msg_opt_;
  ::PROTOBUF_NAMESPACE_ID::int32 i32_req_;
  ::PROTOBUF_NAMESPACE_ID::int32 i32_opt_;
  float f32_req_;
  float f32_opt_;
  int subenum_req_;
  int subenum_opt_;
  friend struct ::TableStruct_sample2_2eproto;
};
// -------------------------------------------------------------------

class Test1 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample2.Test1) */ {
 public:
  inline Test1() : Test1(nullptr) {}
  virtual ~Test1();

  Test1(const Test1& from);
  Test1(Test1&& from) noexcept
    : Test1() {
    *this = ::std::move(from);
  }

  inline Test1& operator=(const Test1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test1& operator=(Test1&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test1& default_instance();

  static inline const Test1* internal_default_instance() {
    return reinterpret_cast<const Test1*>(
               &_Test1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Test1& a, Test1& b) {
    a.Swap(&b);
  }
  inline void Swap(Test1* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test1* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test1* New() const final {
    return CreateMaybeMessage<Test1>(nullptr);
  }

  Test1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test1& from);
  void MergeFrom(const Test1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample2.Test1";
  }
  protected:
  explicit Test1(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sample2_2eproto);
    return ::descriptor_table_sample2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
  };
  // optional int32 a = 1;
  bool has_a() const;
  private:
  bool _internal_has_a() const;
  public:
  void clear_a();
  ::PROTOBUF_NAMESPACE_ID::int32 a() const;
  void set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_a() const;
  void _internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sample2.Test1)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 a_;
  friend struct ::TableStruct_sample2_2eproto;
};
// -------------------------------------------------------------------

class Test2 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample2.Test2) */ {
 public:
  inline Test2() : Test2(nullptr) {}
  virtual ~Test2();

  Test2(const Test2& from);
  Test2(Test2&& from) noexcept
    : Test2() {
    *this = ::std::move(from);
  }

  inline Test2& operator=(const Test2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test2& operator=(Test2&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test2& default_instance();

  static inline const Test2* internal_default_instance() {
    return reinterpret_cast<const Test2*>(
               &_Test2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Test2& a, Test2& b) {
    a.Swap(&b);
  }
  inline void Swap(Test2* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test2* New() const final {
    return CreateMaybeMessage<Test2>(nullptr);
  }

  Test2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test2& from);
  void MergeFrom(const Test2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample2.Test2";
  }
  protected:
  explicit Test2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sample2_2eproto);
    return ::descriptor_table_sample2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBFieldNumber = 2,
  };
  // optional string b = 2;
  bool has_b() const;
  private:
  bool _internal_has_b() const;
  public:
  void clear_b();
  const std::string& b() const;
  void set_b(const std::string& value);
  void set_b(std::string&& value);
  void set_b(const char* value);
  void set_b(const char* value, size_t size);
  std::string* mutable_b();
  std::string* release_b();
  void set_allocated_b(std::string* b);
  private:
  const std::string& _internal_b() const;
  void _internal_set_b(const std::string& value);
  std::string* _internal_mutable_b();
  public:

  // @@protoc_insertion_point(class_scope:sample2.Test2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr b_;
  friend struct ::TableStruct_sample2_2eproto;
};
// -------------------------------------------------------------------

class Test3 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample2.Test3) */ {
 public:
  inline Test3() : Test3(nullptr) {}
  virtual ~Test3();

  Test3(const Test3& from);
  Test3(Test3&& from) noexcept
    : Test3() {
    *this = ::std::move(from);
  }

  inline Test3& operator=(const Test3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test3& operator=(Test3&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test3& default_instance();

  static inline const Test3* internal_default_instance() {
    return reinterpret_cast<const Test3*>(
               &_Test3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Test3& a, Test3& b) {
    a.Swap(&b);
  }
  inline void Swap(Test3* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test3* New() const final {
    return CreateMaybeMessage<Test3>(nullptr);
  }

  Test3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test3& from);
  void MergeFrom(const Test3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample2.Test3";
  }
  protected:
  explicit Test3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sample2_2eproto);
    return ::descriptor_table_sample2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCFieldNumber = 3,
  };
  // optional .sample2.Test1 c = 3;
  bool has_c() const;
  private:
  bool _internal_has_c() const;
  public:
  void clear_c();
  const ::sample2::Test1& c() const;
  ::sample2::Test1* release_c();
  ::sample2::Test1* mutable_c();
  void set_allocated_c(::sample2::Test1* c);
  private:
  const ::sample2::Test1& _internal_c() const;
  ::sample2::Test1* _internal_mutable_c();
  public:
  void unsafe_arena_set_allocated_c(
      ::sample2::Test1* c);
  ::sample2::Test1* unsafe_arena_release_c();

  // @@protoc_insertion_point(class_scope:sample2.Test3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::sample2::Test1* c_;
  friend struct ::TableStruct_sample2_2eproto;
};
// -------------------------------------------------------------------

class Test4 PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sample2.Test4) */ {
 public:
  inline Test4() : Test4(nullptr) {}
  virtual ~Test4();

  Test4(const Test4& from);
  Test4(Test4&& from) noexcept
    : Test4() {
    *this = ::std::move(from);
  }

  inline Test4& operator=(const Test4& from) {
    CopyFrom(from);
    return *this;
  }
  inline Test4& operator=(Test4&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Test4& default_instance();

  static inline const Test4* internal_default_instance() {
    return reinterpret_cast<const Test4*>(
               &_Test4_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Test4& a, Test4& b) {
    a.Swap(&b);
  }
  inline void Swap(Test4* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Test4* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Test4* New() const final {
    return CreateMaybeMessage<Test4>(nullptr);
  }

  Test4* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Test4>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Test4& from);
  void MergeFrom(const Test4& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Test4* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sample2.Test4";
  }
  protected:
  explicit Test4(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sample2_2eproto);
    return ::descriptor_table_sample2_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDFieldNumber = 4,
  };
  // repeated int32 d = 4 [packed = true];
  int d_size() const;
  private:
  int _internal_d_size() const;
  public:
  void clear_d();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_d(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_d() const;
  void _internal_add_d(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_d();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 d(int index) const;
  void set_d(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_d(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      d() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_d();

  // @@protoc_insertion_point(class_scope:sample2.Test4)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > d_;
  mutable std::atomic<int> _d_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sample2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Msg_SubMsg

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Msg

// required int32 i32_req = 1;
inline bool Msg::_internal_has_i32_req() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool Msg::has_i32_req() const {
  return _internal_has_i32_req();
}
inline void Msg::clear_i32_req() {
  i32_req_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_i32_req() const {
  return i32_req_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::i32_req() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.i32_req)
  return _internal_i32_req();
}
inline void Msg::_internal_set_i32_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  i32_req_ = value;
}
inline void Msg::set_i32_req(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i32_req(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.i32_req)
}

// optional int32 i32_opt = 2;
inline bool Msg::_internal_has_i32_opt() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool Msg::has_i32_opt() const {
  return _internal_has_i32_opt();
}
inline void Msg::clear_i32_opt() {
  i32_opt_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_i32_opt() const {
  return i32_opt_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::i32_opt() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.i32_opt)
  return _internal_i32_opt();
}
inline void Msg::_internal_set_i32_opt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  i32_opt_ = value;
}
inline void Msg::set_i32_opt(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_i32_opt(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.i32_opt)
}

// repeated int32 i32_rep = 3;
inline int Msg::_internal_i32_rep_size() const {
  return i32_rep_.size();
}
inline int Msg::i32_rep_size() const {
  return _internal_i32_rep_size();
}
inline void Msg::clear_i32_rep() {
  i32_rep_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::_internal_i32_rep(int index) const {
  return i32_rep_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Msg::i32_rep(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Msg.i32_rep)
  return _internal_i32_rep(index);
}
inline void Msg::set_i32_rep(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  i32_rep_.Set(index, value);
  // @@protoc_insertion_point(field_set:sample2.Msg.i32_rep)
}
inline void Msg::_internal_add_i32_rep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  i32_rep_.Add(value);
}
inline void Msg::add_i32_rep(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_i32_rep(value);
  // @@protoc_insertion_point(field_add:sample2.Msg.i32_rep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Msg::_internal_i32_rep() const {
  return i32_rep_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Msg::i32_rep() const {
  // @@protoc_insertion_point(field_list:sample2.Msg.i32_rep)
  return _internal_i32_rep();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Msg::_internal_mutable_i32_rep() {
  return &i32_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Msg::mutable_i32_rep() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Msg.i32_rep)
  return _internal_mutable_i32_rep();
}

// required bytes bytes_req = 4;
inline bool Msg::_internal_has_bytes_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Msg::has_bytes_req() const {
  return _internal_has_bytes_req();
}
inline void Msg::clear_bytes_req() {
  bytes_req_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Msg::bytes_req() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.bytes_req)
  return _internal_bytes_req();
}
inline void Msg::set_bytes_req(const std::string& value) {
  _internal_set_bytes_req(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.bytes_req)
}
inline std::string* Msg::mutable_bytes_req() {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.bytes_req)
  return _internal_mutable_bytes_req();
}
inline const std::string& Msg::_internal_bytes_req() const {
  return bytes_req_.Get();
}
inline void Msg::_internal_set_bytes_req(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Msg::set_bytes_req(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  bytes_req_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sample2.Msg.bytes_req)
}
inline void Msg::set_bytes_req(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  bytes_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sample2.Msg.bytes_req)
}
inline void Msg::set_bytes_req(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  bytes_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sample2.Msg.bytes_req)
}
inline std::string* Msg::_internal_mutable_bytes_req() {
  _has_bits_[0] |= 0x00000001u;
  return bytes_req_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Msg::release_bytes_req() {
  // @@protoc_insertion_point(field_release:sample2.Msg.bytes_req)
  if (!_internal_has_bytes_req()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return bytes_req_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Msg::set_allocated_bytes_req(std::string* bytes_req) {
  if (bytes_req != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  bytes_req_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_req,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sample2.Msg.bytes_req)
}

// optional bytes bytes_opt = 5;
inline bool Msg::_internal_has_bytes_opt() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Msg::has_bytes_opt() const {
  return _internal_has_bytes_opt();
}
inline void Msg::clear_bytes_opt() {
  bytes_opt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Msg::bytes_opt() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.bytes_opt)
  return _internal_bytes_opt();
}
inline void Msg::set_bytes_opt(const std::string& value) {
  _internal_set_bytes_opt(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.bytes_opt)
}
inline std::string* Msg::mutable_bytes_opt() {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.bytes_opt)
  return _internal_mutable_bytes_opt();
}
inline const std::string& Msg::_internal_bytes_opt() const {
  return bytes_opt_.Get();
}
inline void Msg::_internal_set_bytes_opt(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Msg::set_bytes_opt(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  bytes_opt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sample2.Msg.bytes_opt)
}
inline void Msg::set_bytes_opt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  bytes_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sample2.Msg.bytes_opt)
}
inline void Msg::set_bytes_opt(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  bytes_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sample2.Msg.bytes_opt)
}
inline std::string* Msg::_internal_mutable_bytes_opt() {
  _has_bits_[0] |= 0x00000002u;
  return bytes_opt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Msg::release_bytes_opt() {
  // @@protoc_insertion_point(field_release:sample2.Msg.bytes_opt)
  if (!_internal_has_bytes_opt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return bytes_opt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Msg::set_allocated_bytes_opt(std::string* bytes_opt) {
  if (bytes_opt != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  bytes_opt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bytes_opt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sample2.Msg.bytes_opt)
}

// repeated bytes bytes_rep = 6;
inline int Msg::_internal_bytes_rep_size() const {
  return bytes_rep_.size();
}
inline int Msg::bytes_rep_size() const {
  return _internal_bytes_rep_size();
}
inline void Msg::clear_bytes_rep() {
  bytes_rep_.Clear();
}
inline std::string* Msg::add_bytes_rep() {
  // @@protoc_insertion_point(field_add_mutable:sample2.Msg.bytes_rep)
  return _internal_add_bytes_rep();
}
inline const std::string& Msg::_internal_bytes_rep(int index) const {
  return bytes_rep_.Get(index);
}
inline const std::string& Msg::bytes_rep(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Msg.bytes_rep)
  return _internal_bytes_rep(index);
}
inline std::string* Msg::mutable_bytes_rep(int index) {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.bytes_rep)
  return bytes_rep_.Mutable(index);
}
inline void Msg::set_bytes_rep(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sample2.Msg.bytes_rep)
  bytes_rep_.Mutable(index)->assign(value);
}
inline void Msg::set_bytes_rep(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sample2.Msg.bytes_rep)
  bytes_rep_.Mutable(index)->assign(std::move(value));
}
inline void Msg::set_bytes_rep(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_rep_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sample2.Msg.bytes_rep)
}
inline void Msg::set_bytes_rep(int index, const void* value, size_t size) {
  bytes_rep_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sample2.Msg.bytes_rep)
}
inline std::string* Msg::_internal_add_bytes_rep() {
  return bytes_rep_.Add();
}
inline void Msg::add_bytes_rep(const std::string& value) {
  bytes_rep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sample2.Msg.bytes_rep)
}
inline void Msg::add_bytes_rep(std::string&& value) {
  bytes_rep_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sample2.Msg.bytes_rep)
}
inline void Msg::add_bytes_rep(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  bytes_rep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sample2.Msg.bytes_rep)
}
inline void Msg::add_bytes_rep(const void* value, size_t size) {
  bytes_rep_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sample2.Msg.bytes_rep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Msg::bytes_rep() const {
  // @@protoc_insertion_point(field_list:sample2.Msg.bytes_rep)
  return bytes_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Msg::mutable_bytes_rep() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Msg.bytes_rep)
  return &bytes_rep_;
}

// required string string_req = 7;
inline bool Msg::_internal_has_string_req() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool Msg::has_string_req() const {
  return _internal_has_string_req();
}
inline void Msg::clear_string_req() {
  string_req_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Msg::string_req() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.string_req)
  return _internal_string_req();
}
inline void Msg::set_string_req(const std::string& value) {
  _internal_set_string_req(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.string_req)
}
inline std::string* Msg::mutable_string_req() {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.string_req)
  return _internal_mutable_string_req();
}
inline const std::string& Msg::_internal_string_req() const {
  return string_req_.Get();
}
inline void Msg::_internal_set_string_req(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  string_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Msg::set_string_req(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  string_req_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sample2.Msg.string_req)
}
inline void Msg::set_string_req(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  string_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sample2.Msg.string_req)
}
inline void Msg::set_string_req(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  string_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sample2.Msg.string_req)
}
inline std::string* Msg::_internal_mutable_string_req() {
  _has_bits_[0] |= 0x00000004u;
  return string_req_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Msg::release_string_req() {
  // @@protoc_insertion_point(field_release:sample2.Msg.string_req)
  if (!_internal_has_string_req()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return string_req_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Msg::set_allocated_string_req(std::string* string_req) {
  if (string_req != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  string_req_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_req,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sample2.Msg.string_req)
}

// optional string string_opt = 8;
inline bool Msg::_internal_has_string_opt() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool Msg::has_string_opt() const {
  return _internal_has_string_opt();
}
inline void Msg::clear_string_opt() {
  string_opt_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Msg::string_opt() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.string_opt)
  return _internal_string_opt();
}
inline void Msg::set_string_opt(const std::string& value) {
  _internal_set_string_opt(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.string_opt)
}
inline std::string* Msg::mutable_string_opt() {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.string_opt)
  return _internal_mutable_string_opt();
}
inline const std::string& Msg::_internal_string_opt() const {
  return string_opt_.Get();
}
inline void Msg::_internal_set_string_opt(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  string_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Msg::set_string_opt(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  string_opt_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sample2.Msg.string_opt)
}
inline void Msg::set_string_opt(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  string_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sample2.Msg.string_opt)
}
inline void Msg::set_string_opt(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  string_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sample2.Msg.string_opt)
}
inline std::string* Msg::_internal_mutable_string_opt() {
  _has_bits_[0] |= 0x00000008u;
  return string_opt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Msg::release_string_opt() {
  // @@protoc_insertion_point(field_release:sample2.Msg.string_opt)
  if (!_internal_has_string_opt()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return string_opt_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Msg::set_allocated_string_opt(std::string* string_opt) {
  if (string_opt != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  string_opt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), string_opt,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sample2.Msg.string_opt)
}

// repeated string string_rep = 9;
inline int Msg::_internal_string_rep_size() const {
  return string_rep_.size();
}
inline int Msg::string_rep_size() const {
  return _internal_string_rep_size();
}
inline void Msg::clear_string_rep() {
  string_rep_.Clear();
}
inline std::string* Msg::add_string_rep() {
  // @@protoc_insertion_point(field_add_mutable:sample2.Msg.string_rep)
  return _internal_add_string_rep();
}
inline const std::string& Msg::_internal_string_rep(int index) const {
  return string_rep_.Get(index);
}
inline const std::string& Msg::string_rep(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Msg.string_rep)
  return _internal_string_rep(index);
}
inline std::string* Msg::mutable_string_rep(int index) {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.string_rep)
  return string_rep_.Mutable(index);
}
inline void Msg::set_string_rep(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:sample2.Msg.string_rep)
  string_rep_.Mutable(index)->assign(value);
}
inline void Msg::set_string_rep(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:sample2.Msg.string_rep)
  string_rep_.Mutable(index)->assign(std::move(value));
}
inline void Msg::set_string_rep(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_rep_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:sample2.Msg.string_rep)
}
inline void Msg::set_string_rep(int index, const char* value, size_t size) {
  string_rep_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:sample2.Msg.string_rep)
}
inline std::string* Msg::_internal_add_string_rep() {
  return string_rep_.Add();
}
inline void Msg::add_string_rep(const std::string& value) {
  string_rep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:sample2.Msg.string_rep)
}
inline void Msg::add_string_rep(std::string&& value) {
  string_rep_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:sample2.Msg.string_rep)
}
inline void Msg::add_string_rep(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  string_rep_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:sample2.Msg.string_rep)
}
inline void Msg::add_string_rep(const char* value, size_t size) {
  string_rep_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:sample2.Msg.string_rep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Msg::string_rep() const {
  // @@protoc_insertion_point(field_list:sample2.Msg.string_rep)
  return string_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Msg::mutable_string_rep() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Msg.string_rep)
  return &string_rep_;
}

// required .sample2.Msg.SubMsg submsg_req = 10;
inline bool Msg::_internal_has_submsg_req() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || submsg_req_ != nullptr);
  return value;
}
inline bool Msg::has_submsg_req() const {
  return _internal_has_submsg_req();
}
inline void Msg::clear_submsg_req() {
  if (submsg_req_ != nullptr) submsg_req_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::sample2::Msg_SubMsg& Msg::_internal_submsg_req() const {
  const ::sample2::Msg_SubMsg* p = submsg_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::sample2::Msg_SubMsg&>(
      ::sample2::_Msg_SubMsg_default_instance_);
}
inline const ::sample2::Msg_SubMsg& Msg::submsg_req() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.submsg_req)
  return _internal_submsg_req();
}
inline void Msg::unsafe_arena_set_allocated_submsg_req(
    ::sample2::Msg_SubMsg* submsg_req) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submsg_req_);
  }
  submsg_req_ = submsg_req;
  if (submsg_req) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sample2.Msg.submsg_req)
}
inline ::sample2::Msg_SubMsg* Msg::release_submsg_req() {
  _has_bits_[0] &= ~0x00000010u;
  ::sample2::Msg_SubMsg* temp = submsg_req_;
  submsg_req_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sample2::Msg_SubMsg* Msg::unsafe_arena_release_submsg_req() {
  // @@protoc_insertion_point(field_release:sample2.Msg.submsg_req)
  _has_bits_[0] &= ~0x00000010u;
  ::sample2::Msg_SubMsg* temp = submsg_req_;
  submsg_req_ = nullptr;
  return temp;
}
inline ::sample2::Msg_SubMsg* Msg::_internal_mutable_submsg_req() {
  _has_bits_[0] |= 0x00000010u;
  if (submsg_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::sample2::Msg_SubMsg>(GetArena());
    submsg_req_ = p;
  }
  return submsg_req_;
}
inline ::sample2::Msg_SubMsg* Msg::mutable_submsg_req() {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.submsg_req)
  return _internal_mutable_submsg_req();
}
inline void Msg::set_allocated_submsg_req(::sample2::Msg_SubMsg* submsg_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete submsg_req_;
  }
  if (submsg_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submsg_req);
    if (message_arena != submessage_arena) {
      submsg_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submsg_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  submsg_req_ = submsg_req;
  // @@protoc_insertion_point(field_set_allocated:sample2.Msg.submsg_req)
}

// optional .sample2.Msg.SubMsg submsg_opt = 11;
inline bool Msg::_internal_has_submsg_opt() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || submsg_opt_ != nullptr);
  return value;
}
inline bool Msg::has_submsg_opt() const {
  return _internal_has_submsg_opt();
}
inline void Msg::clear_submsg_opt() {
  if (submsg_opt_ != nullptr) submsg_opt_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::sample2::Msg_SubMsg& Msg::_internal_submsg_opt() const {
  const ::sample2::Msg_SubMsg* p = submsg_opt_;
  return p != nullptr ? *p : reinterpret_cast<const ::sample2::Msg_SubMsg&>(
      ::sample2::_Msg_SubMsg_default_instance_);
}
inline const ::sample2::Msg_SubMsg& Msg::submsg_opt() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.submsg_opt)
  return _internal_submsg_opt();
}
inline void Msg::unsafe_arena_set_allocated_submsg_opt(
    ::sample2::Msg_SubMsg* submsg_opt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(submsg_opt_);
  }
  submsg_opt_ = submsg_opt;
  if (submsg_opt) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sample2.Msg.submsg_opt)
}
inline ::sample2::Msg_SubMsg* Msg::release_submsg_opt() {
  _has_bits_[0] &= ~0x00000020u;
  ::sample2::Msg_SubMsg* temp = submsg_opt_;
  submsg_opt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sample2::Msg_SubMsg* Msg::unsafe_arena_release_submsg_opt() {
  // @@protoc_insertion_point(field_release:sample2.Msg.submsg_opt)
  _has_bits_[0] &= ~0x00000020u;
  ::sample2::Msg_SubMsg* temp = submsg_opt_;
  submsg_opt_ = nullptr;
  return temp;
}
inline ::sample2::Msg_SubMsg* Msg::_internal_mutable_submsg_opt() {
  _has_bits_[0] |= 0x00000020u;
  if (submsg_opt_ == nullptr) {
    auto* p = CreateMaybeMessage<::sample2::Msg_SubMsg>(GetArena());
    submsg_opt_ = p;
  }
  return submsg_opt_;
}
inline ::sample2::Msg_SubMsg* Msg::mutable_submsg_opt() {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.submsg_opt)
  return _internal_mutable_submsg_opt();
}
inline void Msg::set_allocated_submsg_opt(::sample2::Msg_SubMsg* submsg_opt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete submsg_opt_;
  }
  if (submsg_opt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(submsg_opt);
    if (message_arena != submessage_arena) {
      submsg_opt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, submsg_opt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  submsg_opt_ = submsg_opt;
  // @@protoc_insertion_point(field_set_allocated:sample2.Msg.submsg_opt)
}

// repeated .sample2.Msg.SubMsg submsg_rep = 12;
inline int Msg::_internal_submsg_rep_size() const {
  return submsg_rep_.size();
}
inline int Msg::submsg_rep_size() const {
  return _internal_submsg_rep_size();
}
inline void Msg::clear_submsg_rep() {
  submsg_rep_.Clear();
}
inline ::sample2::Msg_SubMsg* Msg::mutable_submsg_rep(int index) {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.submsg_rep)
  return submsg_rep_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg_SubMsg >*
Msg::mutable_submsg_rep() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Msg.submsg_rep)
  return &submsg_rep_;
}
inline const ::sample2::Msg_SubMsg& Msg::_internal_submsg_rep(int index) const {
  return submsg_rep_.Get(index);
}
inline const ::sample2::Msg_SubMsg& Msg::submsg_rep(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Msg.submsg_rep)
  return _internal_submsg_rep(index);
}
inline ::sample2::Msg_SubMsg* Msg::_internal_add_submsg_rep() {
  return submsg_rep_.Add();
}
inline ::sample2::Msg_SubMsg* Msg::add_submsg_rep() {
  // @@protoc_insertion_point(field_add:sample2.Msg.submsg_rep)
  return _internal_add_submsg_rep();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg_SubMsg >&
Msg::submsg_rep() const {
  // @@protoc_insertion_point(field_list:sample2.Msg.submsg_rep)
  return submsg_rep_;
}

// required float f32_req = 13;
inline bool Msg::_internal_has_f32_req() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool Msg::has_f32_req() const {
  return _internal_has_f32_req();
}
inline void Msg::clear_f32_req() {
  f32_req_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float Msg::_internal_f32_req() const {
  return f32_req_;
}
inline float Msg::f32_req() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.f32_req)
  return _internal_f32_req();
}
inline void Msg::_internal_set_f32_req(float value) {
  _has_bits_[0] |= 0x00000200u;
  f32_req_ = value;
}
inline void Msg::set_f32_req(float value) {
  _internal_set_f32_req(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.f32_req)
}

// optional float f32_opt = 14;
inline bool Msg::_internal_has_f32_opt() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool Msg::has_f32_opt() const {
  return _internal_has_f32_opt();
}
inline void Msg::clear_f32_opt() {
  f32_opt_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float Msg::_internal_f32_opt() const {
  return f32_opt_;
}
inline float Msg::f32_opt() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.f32_opt)
  return _internal_f32_opt();
}
inline void Msg::_internal_set_f32_opt(float value) {
  _has_bits_[0] |= 0x00000400u;
  f32_opt_ = value;
}
inline void Msg::set_f32_opt(float value) {
  _internal_set_f32_opt(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.f32_opt)
}

// repeated float f32_rep = 15;
inline int Msg::_internal_f32_rep_size() const {
  return f32_rep_.size();
}
inline int Msg::f32_rep_size() const {
  return _internal_f32_rep_size();
}
inline void Msg::clear_f32_rep() {
  f32_rep_.Clear();
}
inline float Msg::_internal_f32_rep(int index) const {
  return f32_rep_.Get(index);
}
inline float Msg::f32_rep(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Msg.f32_rep)
  return _internal_f32_rep(index);
}
inline void Msg::set_f32_rep(int index, float value) {
  f32_rep_.Set(index, value);
  // @@protoc_insertion_point(field_set:sample2.Msg.f32_rep)
}
inline void Msg::_internal_add_f32_rep(float value) {
  f32_rep_.Add(value);
}
inline void Msg::add_f32_rep(float value) {
  _internal_add_f32_rep(value);
  // @@protoc_insertion_point(field_add:sample2.Msg.f32_rep)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Msg::_internal_f32_rep() const {
  return f32_rep_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Msg::f32_rep() const {
  // @@protoc_insertion_point(field_list:sample2.Msg.f32_rep)
  return _internal_f32_rep();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Msg::_internal_mutable_f32_rep() {
  return &f32_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Msg::mutable_f32_rep() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Msg.f32_rep)
  return _internal_mutable_f32_rep();
}

// required .sample2.Msg.SubEnum subenum_req = 16;
inline bool Msg::_internal_has_subenum_req() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool Msg::has_subenum_req() const {
  return _internal_has_subenum_req();
}
inline void Msg::clear_subenum_req() {
  subenum_req_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::sample2::Msg_SubEnum Msg::_internal_subenum_req() const {
  return static_cast< ::sample2::Msg_SubEnum >(subenum_req_);
}
inline ::sample2::Msg_SubEnum Msg::subenum_req() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.subenum_req)
  return _internal_subenum_req();
}
inline void Msg::_internal_set_subenum_req(::sample2::Msg_SubEnum value) {
  assert(::sample2::Msg_SubEnum_IsValid(value));
  _has_bits_[0] |= 0x00000800u;
  subenum_req_ = value;
}
inline void Msg::set_subenum_req(::sample2::Msg_SubEnum value) {
  _internal_set_subenum_req(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.subenum_req)
}

// optional .sample2.Msg.SubEnum subenum_opt = 17;
inline bool Msg::_internal_has_subenum_opt() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool Msg::has_subenum_opt() const {
  return _internal_has_subenum_opt();
}
inline void Msg::clear_subenum_opt() {
  subenum_opt_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::sample2::Msg_SubEnum Msg::_internal_subenum_opt() const {
  return static_cast< ::sample2::Msg_SubEnum >(subenum_opt_);
}
inline ::sample2::Msg_SubEnum Msg::subenum_opt() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.subenum_opt)
  return _internal_subenum_opt();
}
inline void Msg::_internal_set_subenum_opt(::sample2::Msg_SubEnum value) {
  assert(::sample2::Msg_SubEnum_IsValid(value));
  _has_bits_[0] |= 0x00001000u;
  subenum_opt_ = value;
}
inline void Msg::set_subenum_opt(::sample2::Msg_SubEnum value) {
  _internal_set_subenum_opt(value);
  // @@protoc_insertion_point(field_set:sample2.Msg.subenum_opt)
}

// repeated .sample2.Msg.SubEnum subenum_rep = 18;
inline int Msg::_internal_subenum_rep_size() const {
  return subenum_rep_.size();
}
inline int Msg::subenum_rep_size() const {
  return _internal_subenum_rep_size();
}
inline void Msg::clear_subenum_rep() {
  subenum_rep_.Clear();
}
inline ::sample2::Msg_SubEnum Msg::_internal_subenum_rep(int index) const {
  return static_cast< ::sample2::Msg_SubEnum >(subenum_rep_.Get(index));
}
inline ::sample2::Msg_SubEnum Msg::subenum_rep(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Msg.subenum_rep)
  return _internal_subenum_rep(index);
}
inline void Msg::set_subenum_rep(int index, ::sample2::Msg_SubEnum value) {
  assert(::sample2::Msg_SubEnum_IsValid(value));
  subenum_rep_.Set(index, value);
  // @@protoc_insertion_point(field_set:sample2.Msg.subenum_rep)
}
inline void Msg::_internal_add_subenum_rep(::sample2::Msg_SubEnum value) {
  assert(::sample2::Msg_SubEnum_IsValid(value));
  subenum_rep_.Add(value);
}
inline void Msg::add_subenum_rep(::sample2::Msg_SubEnum value) {
  // @@protoc_insertion_point(field_add:sample2.Msg.subenum_rep)
  _internal_add_subenum_rep(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
Msg::subenum_rep() const {
  // @@protoc_insertion_point(field_list:sample2.Msg.subenum_rep)
  return subenum_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Msg::_internal_mutable_subenum_rep() {
  return &subenum_rep_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
Msg::mutable_subenum_rep() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Msg.subenum_rep)
  return _internal_mutable_subenum_rep();
}

// optional .sample2.Msg msg_opt = 20;
inline bool Msg::_internal_has_msg_opt() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || msg_opt_ != nullptr);
  return value;
}
inline bool Msg::has_msg_opt() const {
  return _internal_has_msg_opt();
}
inline void Msg::clear_msg_opt() {
  if (msg_opt_ != nullptr) msg_opt_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::sample2::Msg& Msg::_internal_msg_opt() const {
  const ::sample2::Msg* p = msg_opt_;
  return p != nullptr ? *p : reinterpret_cast<const ::sample2::Msg&>(
      ::sample2::_Msg_default_instance_);
}
inline const ::sample2::Msg& Msg::msg_opt() const {
  // @@protoc_insertion_point(field_get:sample2.Msg.msg_opt)
  return _internal_msg_opt();
}
inline void Msg::unsafe_arena_set_allocated_msg_opt(
    ::sample2::Msg* msg_opt) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(msg_opt_);
  }
  msg_opt_ = msg_opt;
  if (msg_opt) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sample2.Msg.msg_opt)
}
inline ::sample2::Msg* Msg::release_msg_opt() {
  _has_bits_[0] &= ~0x00000040u;
  ::sample2::Msg* temp = msg_opt_;
  msg_opt_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sample2::Msg* Msg::unsafe_arena_release_msg_opt() {
  // @@protoc_insertion_point(field_release:sample2.Msg.msg_opt)
  _has_bits_[0] &= ~0x00000040u;
  ::sample2::Msg* temp = msg_opt_;
  msg_opt_ = nullptr;
  return temp;
}
inline ::sample2::Msg* Msg::_internal_mutable_msg_opt() {
  _has_bits_[0] |= 0x00000040u;
  if (msg_opt_ == nullptr) {
    auto* p = CreateMaybeMessage<::sample2::Msg>(GetArena());
    msg_opt_ = p;
  }
  return msg_opt_;
}
inline ::sample2::Msg* Msg::mutable_msg_opt() {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.msg_opt)
  return _internal_mutable_msg_opt();
}
inline void Msg::set_allocated_msg_opt(::sample2::Msg* msg_opt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete msg_opt_;
  }
  if (msg_opt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(msg_opt);
    if (message_arena != submessage_arena) {
      msg_opt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, msg_opt, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  msg_opt_ = msg_opt;
  // @@protoc_insertion_point(field_set_allocated:sample2.Msg.msg_opt)
}

// repeated .sample2.Msg msg_rep = 21;
inline int Msg::_internal_msg_rep_size() const {
  return msg_rep_.size();
}
inline int Msg::msg_rep_size() const {
  return _internal_msg_rep_size();
}
inline void Msg::clear_msg_rep() {
  msg_rep_.Clear();
}
inline ::sample2::Msg* Msg::mutable_msg_rep(int index) {
  // @@protoc_insertion_point(field_mutable:sample2.Msg.msg_rep)
  return msg_rep_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg >*
Msg::mutable_msg_rep() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Msg.msg_rep)
  return &msg_rep_;
}
inline const ::sample2::Msg& Msg::_internal_msg_rep(int index) const {
  return msg_rep_.Get(index);
}
inline const ::sample2::Msg& Msg::msg_rep(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Msg.msg_rep)
  return _internal_msg_rep(index);
}
inline ::sample2::Msg* Msg::_internal_add_msg_rep() {
  return msg_rep_.Add();
}
inline ::sample2::Msg* Msg::add_msg_rep() {
  // @@protoc_insertion_point(field_add:sample2.Msg.msg_rep)
  return _internal_add_msg_rep();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sample2::Msg >&
Msg::msg_rep() const {
  // @@protoc_insertion_point(field_list:sample2.Msg.msg_rep)
  return msg_rep_;
}

// map<string, .sample2.Msg.SubMsg> map = 22;
inline int Msg::_internal_map_size() const {
  return map_.size();
}
inline int Msg::map_size() const {
  return _internal_map_size();
}
inline void Msg::clear_map() {
  map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >&
Msg::_internal_map() const {
  return map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >&
Msg::map() const {
  // @@protoc_insertion_point(field_map:sample2.Msg.map)
  return _internal_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >*
Msg::_internal_mutable_map() {
  return map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >*
Msg::mutable_map() {
  // @@protoc_insertion_point(field_mutable_map:sample2.Msg.map)
  return _internal_mutable_map();
}

// -------------------------------------------------------------------

// Test1

// optional int32 a = 1;
inline bool Test1::_internal_has_a() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Test1::has_a() const {
  return _internal_has_a();
}
inline void Test1::clear_a() {
  a_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::_internal_a() const {
  return a_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test1::a() const {
  // @@protoc_insertion_point(field_get:sample2.Test1.a)
  return _internal_a();
}
inline void Test1::_internal_set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  a_ = value;
}
inline void Test1::set_a(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:sample2.Test1.a)
}

// -------------------------------------------------------------------

// Test2

// optional string b = 2;
inline bool Test2::_internal_has_b() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Test2::has_b() const {
  return _internal_has_b();
}
inline void Test2::clear_b() {
  b_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Test2::b() const {
  // @@protoc_insertion_point(field_get:sample2.Test2.b)
  return _internal_b();
}
inline void Test2::set_b(const std::string& value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:sample2.Test2.b)
}
inline std::string* Test2::mutable_b() {
  // @@protoc_insertion_point(field_mutable:sample2.Test2.b)
  return _internal_mutable_b();
}
inline const std::string& Test2::_internal_b() const {
  return b_.Get();
}
inline void Test2::_internal_set_b(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Test2::set_b(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  b_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:sample2.Test2.b)
}
inline void Test2::set_b(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:sample2.Test2.b)
}
inline void Test2::set_b(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:sample2.Test2.b)
}
inline std::string* Test2::_internal_mutable_b() {
  _has_bits_[0] |= 0x00000001u;
  return b_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Test2::release_b() {
  // @@protoc_insertion_point(field_release:sample2.Test2.b)
  if (!_internal_has_b()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return b_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Test2::set_allocated_b(std::string* b) {
  if (b != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  b_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), b,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:sample2.Test2.b)
}

// -------------------------------------------------------------------

// Test3

// optional .sample2.Test1 c = 3;
inline bool Test3::_internal_has_c() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || c_ != nullptr);
  return value;
}
inline bool Test3::has_c() const {
  return _internal_has_c();
}
inline void Test3::clear_c() {
  if (c_ != nullptr) c_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::sample2::Test1& Test3::_internal_c() const {
  const ::sample2::Test1* p = c_;
  return p != nullptr ? *p : reinterpret_cast<const ::sample2::Test1&>(
      ::sample2::_Test1_default_instance_);
}
inline const ::sample2::Test1& Test3::c() const {
  // @@protoc_insertion_point(field_get:sample2.Test3.c)
  return _internal_c();
}
inline void Test3::unsafe_arena_set_allocated_c(
    ::sample2::Test1* c) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(c_);
  }
  c_ = c;
  if (c) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sample2.Test3.c)
}
inline ::sample2::Test1* Test3::release_c() {
  _has_bits_[0] &= ~0x00000001u;
  ::sample2::Test1* temp = c_;
  c_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::sample2::Test1* Test3::unsafe_arena_release_c() {
  // @@protoc_insertion_point(field_release:sample2.Test3.c)
  _has_bits_[0] &= ~0x00000001u;
  ::sample2::Test1* temp = c_;
  c_ = nullptr;
  return temp;
}
inline ::sample2::Test1* Test3::_internal_mutable_c() {
  _has_bits_[0] |= 0x00000001u;
  if (c_ == nullptr) {
    auto* p = CreateMaybeMessage<::sample2::Test1>(GetArena());
    c_ = p;
  }
  return c_;
}
inline ::sample2::Test1* Test3::mutable_c() {
  // @@protoc_insertion_point(field_mutable:sample2.Test3.c)
  return _internal_mutable_c();
}
inline void Test3::set_allocated_c(::sample2::Test1* c) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete c_;
  }
  if (c) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(c);
    if (message_arena != submessage_arena) {
      c = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, c, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  c_ = c;
  // @@protoc_insertion_point(field_set_allocated:sample2.Test3.c)
}

// -------------------------------------------------------------------

// Test4

// repeated int32 d = 4 [packed = true];
inline int Test4::_internal_d_size() const {
  return d_.size();
}
inline int Test4::d_size() const {
  return _internal_d_size();
}
inline void Test4::clear_d() {
  d_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test4::_internal_d(int index) const {
  return d_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Test4::d(int index) const {
  // @@protoc_insertion_point(field_get:sample2.Test4.d)
  return _internal_d(index);
}
inline void Test4::set_d(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  d_.Set(index, value);
  // @@protoc_insertion_point(field_set:sample2.Test4.d)
}
inline void Test4::_internal_add_d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  d_.Add(value);
}
inline void Test4::add_d(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_d(value);
  // @@protoc_insertion_point(field_add:sample2.Test4.d)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test4::_internal_d() const {
  return d_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Test4::d() const {
  // @@protoc_insertion_point(field_list:sample2.Test4.d)
  return _internal_d();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test4::_internal_mutable_d() {
  return &d_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Test4::mutable_d() {
  // @@protoc_insertion_point(field_mutable_list:sample2.Test4.d)
  return _internal_mutable_d();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sample2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sample2::Msg_SubEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sample2::Msg_SubEnum>() {
  return ::sample2::Msg_SubEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sample2_2eproto
