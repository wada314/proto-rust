// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample2.proto

#include "sample2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_sample2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Msg_sample2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sample2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Msg_MapEntry_DoNotUse_sample2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sample2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_SubMsg_sample2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sample2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test1_sample2_2eproto;
namespace sample2 {
class Msg_SubMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_SubMsg> _instance;
} _Msg_SubMsg_default_instance_;
class Msg_MapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg_MapEntry_DoNotUse> _instance;
} _Msg_MapEntry_DoNotUse_default_instance_;
class MsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Msg> _instance;
} _Msg_default_instance_;
class Test1DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test1> _instance;
} _Test1_default_instance_;
class Test2DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test2> _instance;
} _Test2_default_instance_;
class Test3DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test3> _instance;
} _Test3_default_instance_;
class Test4DefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Test4> _instance;
} _Test4_default_instance_;
}  // namespace sample2
static void InitDefaultsscc_info_Msg_sample2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sample2::_Msg_default_instance_;
    new (ptr) ::sample2::Msg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Msg_sample2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Msg_sample2_2eproto}, {
      &scc_info_Msg_SubMsg_sample2_2eproto.base,
      &scc_info_Msg_MapEntry_DoNotUse_sample2_2eproto.base,}};

static void InitDefaultsscc_info_Msg_MapEntry_DoNotUse_sample2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sample2::_Msg_MapEntry_DoNotUse_default_instance_;
    new (ptr) ::sample2::Msg_MapEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Msg_MapEntry_DoNotUse_sample2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Msg_MapEntry_DoNotUse_sample2_2eproto}, {
      &scc_info_Msg_SubMsg_sample2_2eproto.base,}};

static void InitDefaultsscc_info_Msg_SubMsg_sample2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sample2::_Msg_SubMsg_default_instance_;
    new (ptr) ::sample2::Msg_SubMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Msg_SubMsg_sample2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Msg_SubMsg_sample2_2eproto}, {}};

static void InitDefaultsscc_info_Test1_sample2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sample2::_Test1_default_instance_;
    new (ptr) ::sample2::Test1();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test1_sample2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Test1_sample2_2eproto}, {}};

static void InitDefaultsscc_info_Test2_sample2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sample2::_Test2_default_instance_;
    new (ptr) ::sample2::Test2();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test2_sample2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Test2_sample2_2eproto}, {}};

static void InitDefaultsscc_info_Test3_sample2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sample2::_Test3_default_instance_;
    new (ptr) ::sample2::Test3();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Test3_sample2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Test3_sample2_2eproto}, {
      &scc_info_Test1_sample2_2eproto.base,}};

static void InitDefaultsscc_info_Test4_sample2_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::sample2::_Test4_default_instance_;
    new (ptr) ::sample2::Test4();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Test4_sample2_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Test4_sample2_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sample2_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sample2_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sample2_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sample2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sample2::Msg_SubMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sample2::Msg_MapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg_MapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sample2::Msg_MapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg_MapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, i32_req_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, i32_opt_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, i32_rep_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, bytes_req_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, bytes_opt_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, bytes_rep_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, string_req_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, string_opt_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, string_rep_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, submsg_req_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, submsg_opt_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, submsg_rep_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, f32_req_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, f32_opt_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, f32_rep_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, subenum_req_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, subenum_opt_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, subenum_rep_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, msg_opt_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, msg_rep_),
  PROTOBUF_FIELD_OFFSET(::sample2::Msg, map_),
  7,
  8,
  ~0u,
  0,
  1,
  ~0u,
  2,
  3,
  ~0u,
  4,
  5,
  ~0u,
  9,
  10,
  ~0u,
  11,
  12,
  ~0u,
  6,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::sample2::Test1, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sample2::Test1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sample2::Test1, a_),
  0,
  PROTOBUF_FIELD_OFFSET(::sample2::Test2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sample2::Test2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sample2::Test2, b_),
  0,
  PROTOBUF_FIELD_OFFSET(::sample2::Test3, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::sample2::Test3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sample2::Test3, c_),
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sample2::Test4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sample2::Test4, d_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sample2::Msg_SubMsg)},
  { 5, 12, sizeof(::sample2::Msg_MapEntry_DoNotUse)},
  { 14, 40, sizeof(::sample2::Msg)},
  { 61, 67, sizeof(::sample2::Test1)},
  { 68, 74, sizeof(::sample2::Test2)},
  { 75, 81, sizeof(::sample2::Test3)},
  { 82, -1, sizeof(::sample2::Test4)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sample2::_Msg_SubMsg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sample2::_Msg_MapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sample2::_Msg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sample2::_Test1_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sample2::_Test2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sample2::_Test3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sample2::_Test4_default_instance_),
};

const char descriptor_table_protodef_sample2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsample2.proto\022\007sample2\"\272\005\n\003Msg\022\017\n\007i32_"
  "req\030\001 \002(\005\022\017\n\007i32_opt\030\002 \001(\005\022\017\n\007i32_rep\030\003 "
  "\003(\005\022\021\n\tbytes_req\030\004 \002(\014\022\021\n\tbytes_opt\030\005 \001("
  "\014\022\021\n\tbytes_rep\030\006 \003(\014\022\022\n\nstring_req\030\007 \002(\t"
  "\022\022\n\nstring_opt\030\010 \001(\t\022\022\n\nstring_rep\030\t \003(\t"
  "\022\'\n\nsubmsg_req\030\n \002(\0132\023.sample2.Msg.SubMs"
  "g\022\'\n\nsubmsg_opt\030\013 \001(\0132\023.sample2.Msg.SubM"
  "sg\022\'\n\nsubmsg_rep\030\014 \003(\0132\023.sample2.Msg.Sub"
  "Msg\022\017\n\007f32_req\030\r \002(\002\022\017\n\007f32_opt\030\016 \001(\002\022\017\n"
  "\007f32_rep\030\017 \003(\002\022)\n\013subenum_req\030\020 \002(\0162\024.sa"
  "mple2.Msg.SubEnum\022)\n\013subenum_opt\030\021 \001(\0162\024"
  ".sample2.Msg.SubEnum\022)\n\013subenum_rep\030\022 \003("
  "\0162\024.sample2.Msg.SubEnum\022\035\n\007msg_opt\030\024 \001(\013"
  "2\014.sample2.Msg\022\035\n\007msg_rep\030\025 \003(\0132\014.sample"
  "2.Msg\022\"\n\003map\030\026 \003(\0132\025.sample2.Msg.MapEntr"
  "y\032\010\n\006SubMsg\032\?\n\010MapEntry\022\013\n\003key\030\001 \001(\t\022\"\n\005"
  "value\030\002 \001(\0132\023.sample2.Msg.SubMsg:\0028\001\"/\n\007"
  "SubEnum\022\t\n\005APPLE\020\000\022\n\n\006BANANA\020\001\022\r\n\tCHOCOL"
  "ATE\020\002\"\022\n\005Test1\022\t\n\001a\030\001 \001(\005\"\022\n\005Test2\022\t\n\001b\030"
  "\002 \001(\t\"\"\n\005Test3\022\031\n\001c\030\003 \001(\0132\016.sample2.Test"
  "1\"\026\n\005Test4\022\r\n\001d\030\004 \003(\005B\002\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sample2_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sample2_2eproto_sccs[7] = {
  &scc_info_Msg_sample2_2eproto.base,
  &scc_info_Msg_MapEntry_DoNotUse_sample2_2eproto.base,
  &scc_info_Msg_SubMsg_sample2_2eproto.base,
  &scc_info_Test1_sample2_2eproto.base,
  &scc_info_Test2_sample2_2eproto.base,
  &scc_info_Test3_sample2_2eproto.base,
  &scc_info_Test4_sample2_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sample2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sample2_2eproto = {
  false, false, descriptor_table_protodef_sample2_2eproto, "sample2.proto", 825,
  &descriptor_table_sample2_2eproto_once, descriptor_table_sample2_2eproto_sccs, descriptor_table_sample2_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_sample2_2eproto::offsets,
  file_level_metadata_sample2_2eproto, 7, file_level_enum_descriptors_sample2_2eproto, file_level_service_descriptors_sample2_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sample2_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sample2_2eproto)), true);
namespace sample2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Msg_SubEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sample2_2eproto);
  return file_level_enum_descriptors_sample2_2eproto[0];
}
bool Msg_SubEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Msg_SubEnum Msg::APPLE;
constexpr Msg_SubEnum Msg::BANANA;
constexpr Msg_SubEnum Msg::CHOCOLATE;
constexpr Msg_SubEnum Msg::SubEnum_MIN;
constexpr Msg_SubEnum Msg::SubEnum_MAX;
constexpr int Msg::SubEnum_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Msg_SubMsg::_Internal {
 public:
};

Msg_SubMsg::Msg_SubMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sample2.Msg.SubMsg)
}
Msg_SubMsg::Msg_SubMsg(const Msg_SubMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sample2.Msg.SubMsg)
}

void Msg_SubMsg::SharedCtor() {
}

Msg_SubMsg::~Msg_SubMsg() {
  // @@protoc_insertion_point(destructor:sample2.Msg.SubMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg_SubMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Msg_SubMsg::ArenaDtor(void* object) {
  Msg_SubMsg* _this = reinterpret_cast< Msg_SubMsg* >(object);
  (void)_this;
}
void Msg_SubMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg_SubMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg_SubMsg& Msg_SubMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_SubMsg_sample2_2eproto.base);
  return *internal_default_instance();
}


void Msg_SubMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:sample2.Msg.SubMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg_SubMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg_SubMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sample2.Msg.SubMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sample2.Msg.SubMsg)
  return target;
}

size_t Msg_SubMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample2.Msg.SubMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg_SubMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sample2.Msg.SubMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg_SubMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg_SubMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sample2.Msg.SubMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sample2.Msg.SubMsg)
    MergeFrom(*source);
  }
}

void Msg_SubMsg::MergeFrom(const Msg_SubMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample2.Msg.SubMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Msg_SubMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sample2.Msg.SubMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg_SubMsg::CopyFrom(const Msg_SubMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample2.Msg.SubMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg_SubMsg::IsInitialized() const {
  return true;
}

void Msg_SubMsg::InternalSwap(Msg_SubMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg_SubMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Msg_MapEntry_DoNotUse::Msg_MapEntry_DoNotUse() {}
Msg_MapEntry_DoNotUse::Msg_MapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Msg_MapEntry_DoNotUse::MergeFrom(const Msg_MapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Msg_MapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Msg_MapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Msg::_Internal {
 public:
  using HasBits = decltype(std::declval<Msg>()._has_bits_);
  static void set_has_i32_req(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_i32_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_bytes_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_bytes_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_string_req(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_string_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::sample2::Msg_SubMsg& submsg_req(const Msg* msg);
  static void set_has_submsg_req(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::sample2::Msg_SubMsg& submsg_opt(const Msg* msg);
  static void set_has_submsg_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_f32_req(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_f32_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_subenum_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_subenum_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::sample2::Msg& msg_opt(const Msg* msg);
  static void set_has_msg_opt(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000a95) ^ 0x00000a95) != 0;
  }
};

const ::sample2::Msg_SubMsg&
Msg::_Internal::submsg_req(const Msg* msg) {
  return *msg->submsg_req_;
}
const ::sample2::Msg_SubMsg&
Msg::_Internal::submsg_opt(const Msg* msg) {
  return *msg->submsg_opt_;
}
const ::sample2::Msg&
Msg::_Internal::msg_opt(const Msg* msg) {
  return *msg->msg_opt_;
}
Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  i32_rep_(arena),
  bytes_rep_(arena),
  string_rep_(arena),
  submsg_rep_(arena),
  f32_rep_(arena),
  subenum_rep_(arena),
  msg_rep_(arena),
  map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sample2.Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      i32_rep_(from.i32_rep_),
      bytes_rep_(from.bytes_rep_),
      string_rep_(from.string_rep_),
      submsg_rep_(from.submsg_rep_),
      f32_rep_(from.f32_rep_),
      subenum_rep_(from.subenum_rep_),
      msg_rep_(from.msg_rep_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_.MergeFrom(from.map_);
  bytes_req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes_req()) {
    bytes_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes_req(), 
      GetArena());
  }
  bytes_opt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_bytes_opt()) {
    bytes_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_bytes_opt(), 
      GetArena());
  }
  string_req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_req()) {
    string_req_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_req(), 
      GetArena());
  }
  string_opt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_string_opt()) {
    string_opt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_string_opt(), 
      GetArena());
  }
  if (from._internal_has_submsg_req()) {
    submsg_req_ = new ::sample2::Msg_SubMsg(*from.submsg_req_);
  } else {
    submsg_req_ = nullptr;
  }
  if (from._internal_has_submsg_opt()) {
    submsg_opt_ = new ::sample2::Msg_SubMsg(*from.submsg_opt_);
  } else {
    submsg_opt_ = nullptr;
  }
  if (from._internal_has_msg_opt()) {
    msg_opt_ = new ::sample2::Msg(*from.msg_opt_);
  } else {
    msg_opt_ = nullptr;
  }
  ::memcpy(&i32_req_, &from.i32_req_,
    static_cast<size_t>(reinterpret_cast<char*>(&subenum_opt_) -
    reinterpret_cast<char*>(&i32_req_)) + sizeof(subenum_opt_));
  // @@protoc_insertion_point(copy_constructor:sample2.Msg)
}

void Msg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Msg_sample2_2eproto.base);
  bytes_req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_opt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_req_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_opt_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&submsg_req_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&subenum_opt_) -
      reinterpret_cast<char*>(&submsg_req_)) + sizeof(subenum_opt_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:sample2.Msg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  bytes_req_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  bytes_opt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_req_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  string_opt_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete submsg_req_;
  if (this != internal_default_instance()) delete submsg_opt_;
  if (this != internal_default_instance()) delete msg_opt_;
}

void Msg::ArenaDtor(void* object) {
  Msg* _this = reinterpret_cast< Msg* >(object);
  (void)_this;
}
void Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Msg& Msg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Msg_sample2_2eproto.base);
  return *internal_default_instance();
}


void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:sample2.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  i32_rep_.Clear();
  bytes_rep_.Clear();
  string_rep_.Clear();
  submsg_rep_.Clear();
  f32_rep_.Clear();
  subenum_rep_.Clear();
  msg_rep_.Clear();
  map_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      bytes_req_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      bytes_opt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      string_req_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      string_opt_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(submsg_req_ != nullptr);
      submsg_req_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(submsg_opt_ != nullptr);
      submsg_opt_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(msg_opt_ != nullptr);
      msg_opt_->Clear();
    }
  }
  i32_req_ = 0;
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&i32_opt_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subenum_opt_) -
        reinterpret_cast<char*>(&i32_opt_)) + sizeof(subenum_opt_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 i32_req = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_i32_req(&has_bits);
          i32_req_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 i32_opt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_i32_opt(&has_bits);
          i32_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 i32_rep = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_i32_rep(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<24>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_i32_rep(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes bytes_req = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_bytes_req();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bytes bytes_opt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_bytes_opt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated bytes bytes_rep = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_bytes_rep();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // required string string_req = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_string_req();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sample2.Msg.string_req");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string string_opt = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_string_opt();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sample2.Msg.string_opt");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string string_rep = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_string_rep();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sample2.Msg.string_rep");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // required .sample2.Msg.SubMsg submsg_req = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_submsg_req(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sample2.Msg.SubMsg submsg_opt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_submsg_opt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sample2.Msg.SubMsg submsg_rep = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_submsg_rep(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // required float f32_req = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_f32_req(&has_bits);
          f32_req_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float f32_opt = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_f32_opt(&has_bits);
          f32_opt_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // repeated float f32_rep = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_f32_rep(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<125>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_f32_rep(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .sample2.Msg.SubEnum subenum_req = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sample2::Msg_SubEnum_IsValid(val))) {
            _internal_set_subenum_req(static_cast<::sample2::Msg_SubEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .sample2.Msg.SubEnum subenum_opt = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::sample2::Msg_SubEnum_IsValid(val))) {
            _internal_set_subenum_opt(static_cast<::sample2::Msg_SubEnum>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(17, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated .sample2.Msg.SubEnum subenum_rep = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ptr -= 2;
          do {
            ptr += 2;
            ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::sample2::Msg_SubEnum_IsValid(val))) {
              _internal_add_subenum_rep(static_cast<::sample2::Msg_SubEnum>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(18, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<144>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_subenum_rep(), ptr, ctx, ::sample2::Msg_SubEnum_IsValid, &_internal_metadata_, 18);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .sample2.Msg msg_opt = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_msg_opt(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sample2.Msg msg_rep = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_msg_rep(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, .sample2.Msg.SubMsg> map = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sample2.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 i32_req = 1;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_i32_req(), target);
  }

  // optional int32 i32_opt = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_i32_opt(), target);
  }

  // repeated int32 i32_rep = 3;
  for (int i = 0, n = this->_internal_i32_rep_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_i32_rep(i), target);
  }

  // required bytes bytes_req = 4;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_bytes_req(), target);
  }

  // optional bytes bytes_opt = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_bytes_opt(), target);
  }

  // repeated bytes bytes_rep = 6;
  for (int i = 0, n = this->_internal_bytes_rep_size(); i < n; i++) {
    const auto& s = this->_internal_bytes_rep(i);
    target = stream->WriteBytes(6, s, target);
  }

  // required string string_req = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_req().data(), static_cast<int>(this->_internal_string_req().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sample2.Msg.string_req");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_string_req(), target);
  }

  // optional string string_opt = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_string_opt().data(), static_cast<int>(this->_internal_string_opt().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sample2.Msg.string_opt");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_string_opt(), target);
  }

  // repeated string string_rep = 9;
  for (int i = 0, n = this->_internal_string_rep_size(); i < n; i++) {
    const auto& s = this->_internal_string_rep(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sample2.Msg.string_rep");
    target = stream->WriteString(9, s, target);
  }

  // required .sample2.Msg.SubMsg submsg_req = 10;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::submsg_req(this), target, stream);
  }

  // optional .sample2.Msg.SubMsg submsg_opt = 11;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::submsg_opt(this), target, stream);
  }

  // repeated .sample2.Msg.SubMsg submsg_rep = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_submsg_rep_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_submsg_rep(i), target, stream);
  }

  // required float f32_req = 13;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_f32_req(), target);
  }

  // optional float f32_opt = 14;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_f32_opt(), target);
  }

  // repeated float f32_rep = 15;
  for (int i = 0, n = this->_internal_f32_rep_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_f32_rep(i), target);
  }

  // required .sample2.Msg.SubEnum subenum_req = 16;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_subenum_req(), target);
  }

  // optional .sample2.Msg.SubEnum subenum_opt = 17;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      17, this->_internal_subenum_opt(), target);
  }

  // repeated .sample2.Msg.SubEnum subenum_rep = 18;
  for (int i = 0, n = this->_internal_subenum_rep_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
        18, this->_internal_subenum_rep(i), target);
  }

  // optional .sample2.Msg msg_opt = 20;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::msg_opt(this), target, stream);
  }

  // repeated .sample2.Msg msg_rep = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msg_rep_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_msg_rep(i), target, stream);
  }

  // map<string, .sample2.Msg.SubMsg> map = 22;
  if (!this->_internal_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
          "sample2.Msg.MapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Msg_MapEntry_DoNotUse::Funcs::InternalSerialize(22, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >::const_iterator
          it = this->_internal_map().begin();
          it != this->_internal_map().end(); ++it) {
        target = Msg_MapEntry_DoNotUse::Funcs::InternalSerialize(22, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sample2.Msg)
  return target;
}

size_t Msg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:sample2.Msg)
  size_t total_size = 0;

  if (_internal_has_bytes_req()) {
    // required bytes bytes_req = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes_req());
  }

  if (_internal_has_string_req()) {
    // required string string_req = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_req());
  }

  if (_internal_has_submsg_req()) {
    // required .sample2.Msg.SubMsg submsg_req = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submsg_req_);
  }

  if (_internal_has_i32_req()) {
    // required int32 i32_req = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i32_req());
  }

  if (_internal_has_f32_req()) {
    // required float f32_req = 13;
    total_size += 1 + 4;
  }

  if (_internal_has_subenum_req()) {
    // required .sample2.Msg.SubEnum subenum_req = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subenum_req());
  }

  return total_size;
}
size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample2.Msg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000a95) ^ 0x00000a95) == 0) {  // All required fields are present.
    // required bytes bytes_req = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes_req());

    // required string string_req = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_req());

    // required .sample2.Msg.SubMsg submsg_req = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *submsg_req_);

    // required int32 i32_req = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i32_req());

    // required float f32_req = 13;
    total_size += 1 + 4;

    // required .sample2.Msg.SubEnum subenum_req = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subenum_req());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 i32_rep = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->i32_rep_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_i32_rep_size());
    total_size += data_size;
  }

  // repeated bytes bytes_rep = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(bytes_rep_.size());
  for (int i = 0, n = bytes_rep_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      bytes_rep_.Get(i));
  }

  // repeated string string_rep = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(string_rep_.size());
  for (int i = 0, n = string_rep_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      string_rep_.Get(i));
  }

  // repeated .sample2.Msg.SubMsg submsg_rep = 12;
  total_size += 1UL * this->_internal_submsg_rep_size();
  for (const auto& msg : this->submsg_rep_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated float f32_rep = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_f32_rep_size());
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_f32_rep_size());
    total_size += data_size;
  }

  // repeated .sample2.Msg.SubEnum subenum_rep = 18;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_subenum_rep_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_subenum_rep(static_cast<int>(i)));
    }
    total_size += (2UL * count) + data_size;
  }

  // repeated .sample2.Msg msg_rep = 21;
  total_size += 2UL * this->_internal_msg_rep_size();
  for (const auto& msg : this->msg_rep_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, .sample2.Msg.SubMsg> map = 22;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::sample2::Msg_SubMsg >::const_iterator
      it = this->_internal_map().begin();
      it != this->_internal_map().end(); ++it) {
    total_size += Msg_MapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // optional bytes bytes_opt = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_bytes_opt());
  }

  // optional string string_opt = 8;
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_string_opt());
  }

  if (cached_has_bits & 0x00000060u) {
    // optional .sample2.Msg.SubMsg submsg_opt = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *submsg_opt_);
    }

    // optional .sample2.Msg msg_opt = 20;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msg_opt_);
    }

  }
  // optional int32 i32_opt = 2;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_i32_opt());
  }

  // optional float f32_opt = 14;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 + 4;
  }

  // optional .sample2.Msg.SubEnum subenum_opt = 17;
  if (cached_has_bits & 0x00001000u) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_subenum_opt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Msg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sample2.Msg)
  GOOGLE_DCHECK_NE(&from, this);
  const Msg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Msg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sample2.Msg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sample2.Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample2.Msg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  i32_rep_.MergeFrom(from.i32_rep_);
  bytes_rep_.MergeFrom(from.bytes_rep_);
  string_rep_.MergeFrom(from.string_rep_);
  submsg_rep_.MergeFrom(from.submsg_rep_);
  f32_rep_.MergeFrom(from.f32_rep_);
  subenum_rep_.MergeFrom(from.subenum_rep_);
  msg_rep_.MergeFrom(from.msg_rep_);
  map_.MergeFrom(from.map_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_bytes_req(from._internal_bytes_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_bytes_opt(from._internal_bytes_opt());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_string_req(from._internal_string_req());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_string_opt(from._internal_string_opt());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_submsg_req()->::sample2::Msg_SubMsg::MergeFrom(from._internal_submsg_req());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_submsg_opt()->::sample2::Msg_SubMsg::MergeFrom(from._internal_submsg_opt());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_msg_opt()->::sample2::Msg::MergeFrom(from._internal_msg_opt());
    }
    if (cached_has_bits & 0x00000080u) {
      i32_req_ = from.i32_req_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      i32_opt_ = from.i32_opt_;
    }
    if (cached_has_bits & 0x00000200u) {
      f32_req_ = from.f32_req_;
    }
    if (cached_has_bits & 0x00000400u) {
      f32_opt_ = from.f32_opt_;
    }
    if (cached_has_bits & 0x00000800u) {
      subenum_req_ = from.subenum_req_;
    }
    if (cached_has_bits & 0x00001000u) {
      subenum_opt_ = from.subenum_opt_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Msg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sample2.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample2.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(msg_rep_)) return false;
  if (_internal_has_msg_opt()) {
    if (!msg_opt_->IsInitialized()) return false;
  }
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  i32_rep_.InternalSwap(&other->i32_rep_);
  bytes_rep_.InternalSwap(&other->bytes_rep_);
  string_rep_.InternalSwap(&other->string_rep_);
  submsg_rep_.InternalSwap(&other->submsg_rep_);
  f32_rep_.InternalSwap(&other->f32_rep_);
  subenum_rep_.InternalSwap(&other->subenum_rep_);
  msg_rep_.InternalSwap(&other->msg_rep_);
  map_.Swap(&other->map_);
  bytes_req_.Swap(&other->bytes_req_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  bytes_opt_.Swap(&other->bytes_opt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_req_.Swap(&other->string_req_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  string_opt_.Swap(&other->string_opt_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, subenum_opt_)
      + sizeof(Msg::subenum_opt_)
      - PROTOBUF_FIELD_OFFSET(Msg, submsg_req_)>(
          reinterpret_cast<char*>(&submsg_req_),
          reinterpret_cast<char*>(&other->submsg_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Test1::_Internal {
 public:
  using HasBits = decltype(std::declval<Test1>()._has_bits_);
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Test1::Test1(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sample2.Test1)
}
Test1::Test1(const Test1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  a_ = from.a_;
  // @@protoc_insertion_point(copy_constructor:sample2.Test1)
}

void Test1::SharedCtor() {
  a_ = 0;
}

Test1::~Test1() {
  // @@protoc_insertion_point(destructor:sample2.Test1)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test1::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Test1::ArenaDtor(void* object) {
  Test1* _this = reinterpret_cast< Test1* >(object);
  (void)_this;
}
void Test1::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test1::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test1& Test1::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test1_sample2_2eproto.base);
  return *internal_default_instance();
}


void Test1::Clear() {
// @@protoc_insertion_point(message_clear_start:sample2.Test1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  a_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test1::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test1::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sample2.Test1)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 a = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sample2.Test1)
  return target;
}

size_t Test1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample2.Test1)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 a = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_a());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test1::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sample2.Test1)
  GOOGLE_DCHECK_NE(&from, this);
  const Test1* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test1>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sample2.Test1)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sample2.Test1)
    MergeFrom(*source);
  }
}

void Test1::MergeFrom(const Test1& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample2.Test1)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_a()) {
    _internal_set_a(from._internal_a());
  }
}

void Test1::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sample2.Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test1::CopyFrom(const Test1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample2.Test1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test1::IsInitialized() const {
  return true;
}

void Test1::InternalSwap(Test1* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(a_, other->a_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Test1::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Test2::_Internal {
 public:
  using HasBits = decltype(std::declval<Test2>()._has_bits_);
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Test2::Test2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sample2.Test2)
}
Test2::Test2(const Test2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_b()) {
    b_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_b(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:sample2.Test2)
}

void Test2::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Test2_sample2_2eproto.base);
  b_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Test2::~Test2() {
  // @@protoc_insertion_point(destructor:sample2.Test2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test2::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  b_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Test2::ArenaDtor(void* object) {
  Test2* _this = reinterpret_cast< Test2* >(object);
  (void)_this;
}
void Test2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test2& Test2::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test2_sample2_2eproto.base);
  return *internal_default_instance();
}


void Test2::Clear() {
// @@protoc_insertion_point(message_clear_start:sample2.Test2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    b_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_b();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "sample2.Test2.b");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sample2.Test2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string b = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_b().data(), static_cast<int>(this->_internal_b().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "sample2.Test2.b");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sample2.Test2)
  return target;
}

size_t Test2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample2.Test2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string b = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_b());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sample2.Test2)
  GOOGLE_DCHECK_NE(&from, this);
  const Test2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sample2.Test2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sample2.Test2)
    MergeFrom(*source);
  }
}

void Test2::MergeFrom(const Test2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample2.Test2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_b()) {
    _internal_set_b(from._internal_b());
  }
}

void Test2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sample2.Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test2::CopyFrom(const Test2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample2.Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test2::IsInitialized() const {
  return true;
}

void Test2::InternalSwap(Test2* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  b_.Swap(&other->b_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Test2::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Test3::_Internal {
 public:
  using HasBits = decltype(std::declval<Test3>()._has_bits_);
  static const ::sample2::Test1& c(const Test3* msg);
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::sample2::Test1&
Test3::_Internal::c(const Test3* msg) {
  return *msg->c_;
}
Test3::Test3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sample2.Test3)
}
Test3::Test3(const Test3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_c()) {
    c_ = new ::sample2::Test1(*from.c_);
  } else {
    c_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:sample2.Test3)
}

void Test3::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Test3_sample2_2eproto.base);
  c_ = nullptr;
}

Test3::~Test3() {
  // @@protoc_insertion_point(destructor:sample2.Test3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test3::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete c_;
}

void Test3::ArenaDtor(void* object) {
  Test3* _this = reinterpret_cast< Test3* >(object);
  (void)_this;
}
void Test3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test3& Test3::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test3_sample2_2eproto.base);
  return *internal_default_instance();
}


void Test3::Clear() {
// @@protoc_insertion_point(message_clear_start:sample2.Test3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(c_ != nullptr);
    c_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .sample2.Test1 c = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_c(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sample2.Test3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .sample2.Test1 c = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::c(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sample2.Test3)
  return target;
}

size_t Test3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample2.Test3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .sample2.Test1 c = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *c_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sample2.Test3)
  GOOGLE_DCHECK_NE(&from, this);
  const Test3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sample2.Test3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sample2.Test3)
    MergeFrom(*source);
  }
}

void Test3::MergeFrom(const Test3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample2.Test3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_c()) {
    _internal_mutable_c()->::sample2::Test1::MergeFrom(from._internal_c());
  }
}

void Test3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sample2.Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test3::CopyFrom(const Test3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample2.Test3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test3::IsInitialized() const {
  return true;
}

void Test3::InternalSwap(Test3* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(c_, other->c_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Test3::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Test4::_Internal {
 public:
};

Test4::Test4(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  d_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:sample2.Test4)
}
Test4::Test4(const Test4& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      d_(from.d_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sample2.Test4)
}

void Test4::SharedCtor() {
}

Test4::~Test4() {
  // @@protoc_insertion_point(destructor:sample2.Test4)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Test4::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Test4::ArenaDtor(void* object) {
  Test4* _this = reinterpret_cast< Test4* >(object);
  (void)_this;
}
void Test4::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Test4::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Test4& Test4::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Test4_sample2_2eproto.base);
  return *internal_default_instance();
}


void Test4::Clear() {
// @@protoc_insertion_point(message_clear_start:sample2.Test4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  d_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Test4::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 d = 4 [packed = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_d(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32) {
          _internal_add_d(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Test4::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sample2.Test4)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 d = 4 [packed = true];
  {
    int byte_size = _d_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_d(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sample2.Test4)
  return target;
}

size_t Test4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sample2.Test4)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 d = 4 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->d_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _d_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Test4::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sample2.Test4)
  GOOGLE_DCHECK_NE(&from, this);
  const Test4* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Test4>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sample2.Test4)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sample2.Test4)
    MergeFrom(*source);
  }
}

void Test4::MergeFrom(const Test4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sample2.Test4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  d_.MergeFrom(from.d_);
}

void Test4::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sample2.Test4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Test4::CopyFrom(const Test4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sample2.Test4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Test4::IsInitialized() const {
  return true;
}

void Test4::InternalSwap(Test4* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  d_.InternalSwap(&other->d_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Test4::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sample2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sample2::Msg_SubMsg* Arena::CreateMaybeMessage< ::sample2::Msg_SubMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sample2::Msg_SubMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::sample2::Msg_MapEntry_DoNotUse* Arena::CreateMaybeMessage< ::sample2::Msg_MapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sample2::Msg_MapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::sample2::Msg* Arena::CreateMaybeMessage< ::sample2::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sample2::Msg >(arena);
}
template<> PROTOBUF_NOINLINE ::sample2::Test1* Arena::CreateMaybeMessage< ::sample2::Test1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sample2::Test1 >(arena);
}
template<> PROTOBUF_NOINLINE ::sample2::Test2* Arena::CreateMaybeMessage< ::sample2::Test2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sample2::Test2 >(arena);
}
template<> PROTOBUF_NOINLINE ::sample2::Test3* Arena::CreateMaybeMessage< ::sample2::Test3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sample2::Test3 >(arena);
}
template<> PROTOBUF_NOINLINE ::sample2::Test4* Arena::CreateMaybeMessage< ::sample2::Test4 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sample2::Test4 >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
