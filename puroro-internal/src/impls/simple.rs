mod type_gen;

use ::puroro::{tags, DeserFieldFromBytesIter, Result, StructInternalTypeGen};
use puroro::variant;

pub struct SimpleImpl;
impl tags::ImplTypeTag for SimpleImpl {}

// Struct's internal type generator

impl StructInternalTypeGen for SimpleImpl {
    // TODO
    type Type = ();
}

// deser from iterator
impl<L, V, S> DeserFieldFromBytesIter<(L, (S, tags::wire::Variant<V>))> for SimpleImpl
where
    // The type tag has corresponding Rust numerical type,
    (S, tags::wire::Variant<V>): tags::NumericalFieldTypeTag + variant::VariantTypeTag,
    // ..and the type above can be wrapped by Option<> or Vec<> according to
    // the label (this is always true),
    <(S, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType: LabelWrappedType<L>,
    // ..and the Rust type generated by FieldTypeGen is equal to the type above.
    Self: puroro::FieldTypeGen<(L, (S, tags::wire::Variant<V>)), Type =
        <<(S, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<L>>::Type>
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as puroro::FieldTypeGen<(L, (S, tags::wire::Variant<V>))>>::Type,
        data: puroro::FieldData<&mut puroro::de::from_iter::ScopedIter<I>>,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        match data {
            puroro::FieldData::Variant(variant) => {
                // todo: proto3 default value check
                let native = variant.to_native::<(S, tags::wire::Variant<V>)>()?;
                *LabelWrappedType::<L>::get_or_insert_with(field, <(S, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::default) = native;
            },
            puroro::FieldData::LengthDelimited(_) => todo!(),
            puroro::FieldData::Bits32(_) => todo!(),
            puroro::FieldData::Bits64(_) => todo!(),
        };
        Ok(())
    }
}

// Utilities
pub trait LabelWrappedType<L> {
    type Type;
    fn get_or_insert_with<F>(wrapped: &mut Self::Type, f: F) -> &mut Self
    where
        F: FnOnce() -> Self;
}
impl<T> LabelWrappedType<tags::Required> for T {
    // TODO: Revisit... T or Option<T>
    type Type = Option<T>;
    fn get_or_insert_with<F>(wrapped: &mut Self::Type, f: F) -> &mut Self
    where
        F: FnOnce() -> Self,
    {
        wrapped.get_or_insert_with(f)
    }
}
impl<T> LabelWrappedType<tags::Optional> for T {
    type Type = Option<T>;
    fn get_or_insert_with<F>(wrapped: &mut Self::Type, f: F) -> &mut Self
    where
        F: FnOnce() -> Self,
    {
        wrapped.get_or_insert_with(f)
    }
}
impl<T> LabelWrappedType<tags::Unlabeled> for T {
    type Type = T;
    fn get_or_insert_with<F>(wrapped: &mut Self::Type, f: F) -> &mut Self
    where
        F: FnOnce() -> Self,
    {
        wrapped
    }
}
impl<T> LabelWrappedType<tags::Repeated> for T {
    type Type = Vec<T>;

    fn get_or_insert_with<F>(wrapped: &mut Self::Type, f: F) -> &mut Self
    where
        F: FnOnce() -> Self,
    {
        wrapped.push((f)());
        wrapped.last_mut().unwrap()
    }
}
