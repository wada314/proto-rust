use std::convert::TryInto;

use crate::de::DoDefaultCheck;
use crate::se::to_io_write::write_field_number_and_wire_type;
use crate::se::{SerFieldToIoWrite, SerInternalDataToIoWrite};
use crate::{ErrorKind, FieldTypeGen, Result, SimpleImpl, StructInternalTypeGen};
use ::puroro::tags;
use ::puroro::types::WireType;
use ::puroro::variant::{Variant, VariantTypeTag};

use super::LabelWrappedType;

type NonRepeatedVariant<X, V, _1, _2> = (tags::NonRepeated<_1, _2>, (X, tags::wire::Variant<V>));

impl<X, V, _1, _2> SerFieldToIoWrite<NonRepeatedVariant<X, V, _1, _2>> for SimpleImpl
where
    NonRepeatedVariant<X, V, _1, _2>: DoDefaultCheck,
    // The type tag has corresponding Rust numerical type,
    (X, tags::wire::Variant<V>): tags::NumericalFieldTypeTag + VariantTypeTag,
    // ..and the type above can be wrapped by Option<> or Vec<> according to
    // the label (this is always true),
    <(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType:
        LabelWrappedType<tags::NonRepeated<_1, _2>> + Clone,
    // ..and the Rust type generated by FieldTypeGen is equal to the type above.
    Self: FieldTypeGen<
        NonRepeatedVariant<X, V, _1, _2>,
        Type = <<(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<
            tags::NonRepeated<_1, _2>,
        >>::Type,
    >,
{
    fn ser_to_io_write<W>(
        field: &<Self as FieldTypeGen<NonRepeatedVariant<X, V, _1, _2>>>::Type,
        field_number: i32,
        out: &mut W,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        W: std::io::Write,
    {
        let do_default_check = <NonRepeatedVariant<X, V, _1, _2> as DoDefaultCheck>::VALUE;
        if let Some(value) = <<(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<
            tags::NonRepeated<_1, _2>,
        >>::iter(field).next() {
            let variant = Variant::from_native::<(X, tags::wire::Variant<V>)>(value.clone())?;
            if !do_default_check && !variant.is_zero() {
                write_field_number_and_wire_type(out, field_number, WireType::Variant)?;
                variant.encode_bytes(out)?;
            }
        }
        Ok(())
    }
}

type RepeatedVariant<X, V> = (tags::Repeated, (X, tags::wire::Variant<V>));

impl<X, V> SerFieldToIoWrite<RepeatedVariant<X, V>> for SimpleImpl
where
    X: DoDefaultCheck,
    (X, tags::wire::Variant<V>): tags::NumericalFieldTypeTag + VariantTypeTag,
    <(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType:
        LabelWrappedType<tags::Repeated> + Clone,
    Self: FieldTypeGen<
        RepeatedVariant<X, V>,
        Type = <<(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<
            tags::Repeated,
        >>::Type,
    >,
{
    fn ser_to_io_write<W>(
        field: &<Self as FieldTypeGen<RepeatedVariant<X, V>>>::Type,
        field_number: i32,
        out: &mut W,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        W: std::io::Write,
    {
        let mut iter = <<(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<tags::Repeated>>::iter(field).peekable();
        if iter.peek().is_some() {
            let mut buffer: Vec<u8> = Vec::new();
            for val in iter {
                let variant = Variant::from_native::<(X, tags::wire::Variant<V>)>(val.clone())?;
                variant.encode_bytes(&mut buffer)?;
            }
            let total_len: i32 = buffer.len().try_into().map_err(|_| ErrorKind::TooLongToSerialize)?;

            write_field_number_and_wire_type(out, field_number, WireType::LengthDelimited)?;
            Variant::from_i32(total_len)?.encode_bytes(out)?;
            out.write_all(&buffer)?;
        }
        Ok(())
    }
}

impl SerInternalDataToIoWrite for SimpleImpl {
    fn ser_to_io_write<W>(
        _out: &mut W,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        W: std::io::Write,
    {
        Ok(())
    }
}
