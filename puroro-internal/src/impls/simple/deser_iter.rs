use super::{LabelWrappedLdType, LabelWrappedType, SimpleImpl};
use crate::{FieldTypeGen, StructInternalTypeGen, ChooseStructVisibility};
use crate::de::from_iter::{deser_from_scoped_iter, Variants, ScopedIter};
use crate::de::{DeserFieldFromBytesIter, MessageFromBytesIter, DoDefaultCheck};
use ::puroro::fixed_bits::{Bits32TypeTag, Bits64TypeTag};
use ::puroro::variant::VariantTypeTag;
use ::puroro::{
    tags, ErrorKind, Message,
    Result, GetImpl
};
use ::puroro::types::FieldData;

// deser from iterator

// deser from iterator, into variant type fields
impl<L, V, X> DeserFieldFromBytesIter<(L, (X, tags::wire::Variant<V>))> for SimpleImpl
where
    (L, (X, tags::wire::Variant<V>)): DoDefaultCheck,
    // The type tag has corresponding Rust numerical type,
    (X, tags::wire::Variant<V>): tags::NumericalFieldTypeTag + VariantTypeTag,
    // ..and the type above can be wrapped by Option<> or Vec<> according to
    // the label (this is always true),
    <(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType: LabelWrappedType<L>,
    // ..and the Rust type generated by FieldTypeGen is equal to the type above.
    Self: FieldTypeGen<(L, (X, tags::wire::Variant<V>)), Type =
        <<(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<L>>::Type>
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as FieldTypeGen<(L, (X, tags::wire::Variant<V>))>>::Type,
        data: FieldData<&mut ScopedIter<I>>,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        let do_default_check = <(L, (X, tags::wire::Variant<V>)) as DoDefaultCheck>::VALUE;
        match data {
            FieldData::Variant(variant) => {
                let native = variant.to_native::<(X, tags::wire::Variant<V>)>()?;
                if !do_default_check || native != <(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::default() {
                    *LabelWrappedType::<L>::get_or_insert_with(
                        field,
                        <(X, tags::wire::Variant<V>) as tags::NumericalFieldTypeTag>::default
                    ) = native;   
                }
            },
            FieldData::LengthDelimited(iter) => {
                // todo: proto3 default value check
                let variants_iter = Variants::new(iter);
                let values_iter = variants_iter.map(|rv| rv.and_then(|v| {
                    v.to_native::<(X, tags::wire::Variant<V>)>()
                }));
                LabelWrappedType::<L>::extend(field, values_iter)?;
            },
            FieldData::Bits32(_) |
            FieldData::Bits64(_) => Err(ErrorKind::UnexpectedWireType)?,
        };
        Ok(())
    }
}

// Bits32
impl<L, V, X> DeserFieldFromBytesIter<(L, (X, tags::wire::Bits32<V>))> for SimpleImpl
where
    (L, (X, tags::wire::Bits32<V>)): DoDefaultCheck,
    // The type tag has corresponding Rust numerical type,
    (X, tags::wire::Bits32<V>): tags::NumericalFieldTypeTag + Bits32TypeTag,
    // ..and the type above can be wrapped by Option<> or Vec<> according to
    // the label (this is always true),
    <(X, tags::wire::Bits32<V>) as tags::NumericalFieldTypeTag>::NativeType: LabelWrappedType<L>,
    // ..and the Rust type generated by FieldTypeGen is equal to the type above.
    Self: FieldTypeGen<(L, (X, tags::wire::Bits32<V>)), Type =
        <<(X, tags::wire::Bits32<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<L>>::Type>
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as FieldTypeGen<(L, (X, tags::wire::Bits32<V>))>>::Type,
        data: FieldData<&mut ScopedIter<I>>,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        let do_default_check = <(L, (X, tags::wire::Bits32<V>)) as DoDefaultCheck>::VALUE;
        match data {
            FieldData::Bits32(bytes) => {
                let native = <(X, tags::wire::Bits32<V>) as Bits32TypeTag>::from_array(bytes);
                if !do_default_check || native != <(X, tags::wire::Bits32<V>) as tags::NumericalFieldTypeTag>::default() {
                    *LabelWrappedType::<L>::get_or_insert_with(
                        field,
                        <(X, tags::wire::Bits32<V>) as tags::NumericalFieldTypeTag>::default
                    ) = native;
                }
            }  
            _ => Err(ErrorKind::UnexpectedWireType)?,
        };
        Ok(())
    }
}

// Bits64
impl<L, V, X> DeserFieldFromBytesIter<(L, (X, tags::wire::Bits64<V>))> for SimpleImpl
where
    (L, (X, tags::wire::Bits64<V>)): DoDefaultCheck,
    // The type tag has corresponding Rust numerical type,
    (X, tags::wire::Bits64<V>): tags::NumericalFieldTypeTag + Bits64TypeTag,
    // ..and the type above can be wrapped by Option<> or Vec<> according to
    // the label (this is always true),
    <(X, tags::wire::Bits64<V>) as tags::NumericalFieldTypeTag>::NativeType: LabelWrappedType<L>,
    // ..and the Rust type generated by FieldTypeGen is equal to the type above.
    Self: FieldTypeGen<(L, (X, tags::wire::Bits64<V>)), Type =
        <<(X, tags::wire::Bits64<V>) as tags::NumericalFieldTypeTag>::NativeType as LabelWrappedType<L>>::Type>
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as FieldTypeGen<(L, (X, tags::wire::Bits64<V>))>>::Type,
        data: FieldData<&mut ScopedIter<I>>,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        let do_default_check = <(L, (X, tags::wire::Bits64<V>)) as DoDefaultCheck>::VALUE;
        match data {
            FieldData::Bits64(bytes) => {
                let native = <(X, tags::wire::Bits64<V>) as Bits64TypeTag>::from_array(bytes);
                if !do_default_check || native != <(X, tags::wire::Bits64<V>) as tags::NumericalFieldTypeTag>::default() {
                    *LabelWrappedType::<L>::get_or_insert_with(
                        field,
                        <(X, tags::wire::Bits64<V>) as tags::NumericalFieldTypeTag>::default
                    ) = native;
                }
            }  
            _ => Err(ErrorKind::UnexpectedWireType)?,
        };
        Ok(())
    }
}

// String
impl<L, X> DeserFieldFromBytesIter<(L, (X, tags::String))> for SimpleImpl
where
    (L, (X, tags::String)): DoDefaultCheck,
    str: LabelWrappedLdType<L, X>,
    Self: FieldTypeGen<(L, (X, tags::String)), Type = <str as LabelWrappedLdType<L, X>>::Type>,
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as FieldTypeGen<(L, (X, tags::String))>>::Type,
        data: FieldData<&mut ScopedIter<I>>,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        let do_default_check = <(L, (X, tags::String)) as DoDefaultCheck>::VALUE;
        match data {
            FieldData::LengthDelimited(iter) => {
                let string = String::from_utf8(iter.collect::<::std::io::Result<Vec<_>>>()?)
                    .map_err(|e| ErrorKind::InvalidUtf8(e))?;
                if !do_default_check || !string.is_empty() {
                    *<str as LabelWrappedLdType<L, X>>::get_or_insert_default(field) = string;
                }
            }
            _ => Err(ErrorKind::UnexpectedWireType)?,
        }
        Ok(())
    }
}

// Bytes
impl<L, X> DeserFieldFromBytesIter<(L, (X, tags::Bytes))> for SimpleImpl
where
    (L, (X, tags::Bytes)): DoDefaultCheck,
    [u8]: LabelWrappedLdType<L, X>,
    Self: FieldTypeGen<(L, (X, tags::Bytes)), Type = <[u8] as LabelWrappedLdType<L, X>>::Type>,
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as FieldTypeGen<(L, (X, tags::Bytes))>>::Type,
        data: FieldData<&mut ScopedIter<I>>,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        let do_default_check = <(L, (X, tags::Bytes)) as DoDefaultCheck>::VALUE;
        match data {
            FieldData::LengthDelimited(iter) => {
                let bytes = iter.collect::<::std::io::Result<Vec<_>>>()?;
                if !do_default_check || !bytes.is_empty() {
                    *<[u8] as LabelWrappedLdType<L, X>>::get_or_insert_default(field) = bytes;
                }
            }
            _ => Err(ErrorKind::UnexpectedWireType)?,
        }
        Ok(())
    }
}

// Message
// TODO: tags::Message<M>'s M is not the actual message type
impl<X, M, _1, _2> DeserFieldFromBytesIter<(tags::NonRepeated<_1, _2>, (X, tags::Message<M>))>
    for SimpleImpl
where
    M: GetImpl<SimpleImpl>,
    <M as GetImpl<SimpleImpl>>::Type: Message + MessageFromBytesIter + Default,
    Self: FieldTypeGen<(tags::NonRepeated<_1, _2>, (X, tags::Message<M>)), Type = Option<Box<<M as GetImpl<SimpleImpl>>::Type>>>,
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as FieldTypeGen<(tags::NonRepeated<_1, _2>, (X, tags::Message<M>))>>::Type,
        data: FieldData<&mut ScopedIter<I>>,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        use ::std::ops::DerefMut;
        match data {
            FieldData::LengthDelimited(iter) => deser_from_scoped_iter(
                field
                    .get_or_insert_with(|| Box::new(Default::default()))
                    .deref_mut(),
                iter,
            ),
            _ => Err(ErrorKind::UnexpectedWireType)?,
        }
    }
}

impl<X, M> DeserFieldFromBytesIter<(tags::Repeated, (X, tags::Message<M>))> for SimpleImpl
where
    M: GetImpl<SimpleImpl>,
    <M as GetImpl<SimpleImpl>>::Type: Message + MessageFromBytesIter + Default,
    Self: FieldTypeGen<(tags::Repeated, (X, tags::Message<M>)), Type = Vec<<M as GetImpl<SimpleImpl>>::Type>>,
{
    fn deser_from_scoped_bytes_iter<I>(
        field: &mut <Self as FieldTypeGen<(tags::Repeated, (X, tags::Message<M>))>>::Type,
        data: FieldData<&mut ScopedIter<I>>,
        _internal_data: &<Self as StructInternalTypeGen>::Type,
    ) -> Result<()>
    where
        I: Iterator<Item = std::io::Result<u8>>,
    {
        match data {
            FieldData::LengthDelimited(iter) => {
                field.push(Default::default());
                deser_from_scoped_iter(field.last_mut().unwrap(), iter)
            }
            _ => Err(ErrorKind::UnexpectedWireType)?,
        }
    }
}
