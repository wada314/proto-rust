
{% for enume in self.enums %}
#[derive(Debug, Clone, PartialEq)]
pub enum {{ enume.rust_ident() }} {
    {%- for value in enume.values() %}
    {{ value.rust_ident() }},
    {%- endfor %}

    {%- match enume.syntax().unwrap() %}
    {%- when wrappers::ProtoSyntax::Proto3 %}
    _Unknown(i32),
    {%- else %}
    {%- endmatch %}
}

{%- match enume.syntax().unwrap() %}
{%- when wrappers::ProtoSyntax::Proto2 %}
impl ::puroro::Enum2 for {{ enume.rust_ident() }} {
}
{%- when wrappers::ProtoSyntax::Proto3 %}
impl ::puroro::Enum3 for {{ enume.rust_ident() }} {
}
{%- endmatch %}

{%- match enume.syntax().unwrap() %}
{%- when wrappers::ProtoSyntax::Proto2 %}
impl ::std::convert::TryFrom<i32> for {{ enume.rust_ident() }} {
    type Error = i32;
    fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
        ::std::result::Result::Ok(match value {
            {%- for value in enume.values() %}
            {{ value.number() }} => {{ enume.rust_ident() }}::{{ value.rust_ident() }},
            {%- endfor %}
            _ => Err(value)?,
        })
    }
}
{%- when wrappers::ProtoSyntax::Proto3 %}
impl ::std::convert::From<i32> for {{ enume.rust_ident() }} {
    fn from(value: i32) -> Self {
        match value {
            {%- for value in enume.values() %}
            {{ value.number() }} => {{ enume.rust_ident() }}::{{ value.rust_ident() }},
            {%- endfor %}
            _ => {{ enume.rust_ident() }}::_Unknown(value),
        }
    }
}
{%- endmatch %}

impl ::std::convert::From<{{ enume.rust_ident() }}> for i32 {
    fn from(value: {{ enume.rust_ident() }}) -> i32 {
        match value {
            {%- for value in enume.values() %}
            {{ enume.rust_ident() }}::{{ value.rust_ident() }} => {{ value.number() }},
            {%- endfor %}
            
            {%- match enume.syntax().unwrap() %}
            {%- when wrappers::ProtoSyntax::Proto3 %}
            {{ enume.rust_ident() }}::_Unknown(ivalue) => ivalue,
            {%- else %}
            {%- endmatch %}
        }
    }
}

impl ::std::default::Default for {{ enume.rust_ident() }} {
    fn default() -> Self {
        {{ enume.rust_ident() }}::{{ enume.first_value().unwrap().rust_ident() }}
    }
}

{% endfor %}