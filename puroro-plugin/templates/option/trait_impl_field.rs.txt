{%- if field.is_message %}
type Field{{ field.number }}MessageType<'this> where Self: 'this = T::Field{{ field.number }}MessageType<'this>;
{%- endif %}

{%- if field.trait_has_scalar_getter %}
fn {{ field.ident }}<'this>(&'this self) -> {{ field.trait_scalar_getter_type }} {
    self.as_ref().map_or_else(::std::default::Default::default, |msg| msg.{{ field.ident }}())
}
{%- endif %}
{%- if field.trait_has_optional_getter && !f.is_explicit_oneof_field %}
fn {{ field.ident }}<'this>(&'this self) -> ::std::option::Option<{{ field.trait_scalar_getter_type }}> {
    self.as_ref().and_then(|msg| msg.{{ field.ident }}())
}
{%- endif %}

{%- if field.trait_has_repeated_getter %}
type Field{{ field.number }}RepeatedType<'this> where Self: 'this =
    ::std::iter::Flatten<
        ::std::option::IntoIter<
            <T::Field{{ field.number }}RepeatedType<'this> as ::std::iter::IntoIterator>::IntoIter
        >
    >;
fn {{ field.ident }}<'this>(&'this self) -> Self::Field{{ field.number }}RepeatedType<'this> {
    self.as_ref().map(|msg| msg.{{ field.ident }}().into_iter()).into_iter().flatten()
}
{%- endif %}