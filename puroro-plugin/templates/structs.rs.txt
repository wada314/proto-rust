{%- for m in messages %}

#[allow(unused)]
pub struct {{ m.ident }}<ImplTag = ::puroro::tags::SimpleImpl>(<Self as ::puroro_internal::GetImplStruct>::Type)
where Self: ::puroro_internal::GetImplStruct;

{#- ################# Trait impls (std traits) ################# #}

impl<ImplTag> ::std::clone::Clone for {{ m.ident }}<ImplTag>
where 
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl<ImplTag> ::std::default::Default for {{ m.ident }}<ImplTag>
where 
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::std::default::Default,
{
    fn default() -> Self {
        Self(::std::default::Default::default())
    }
}
impl<ImplTag> ::std::fmt::Debug for {{ m.ident }}<ImplTag>
where 
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::std::fmt::Debug,
{
    fn fmt(&self, formatter: &mut ::std::fmt::Formatter<'_>) -> ::std::result::Result<(), ::std::fmt::Error> {
        ::std::fmt::Debug::fmt(&self.0, formatter)
    }
}
impl<ImplTag> ::std::cmp::PartialEq for {{ m.ident }}<ImplTag>
where 
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::std::cmp::PartialEq,
{
    fn eq(&self, rhs: &Self) -> bool {
        ::std::cmp::PartialEq::eq(&self.0, &rhs.0)
    }
}

{#- ################# Trait impls (puroro traits) ################# #}

impl<ImplTag> ::puroro::Message for {{ m.ident }}<ImplTag>
where
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::puroro::Message
{
}

impl<ImplTag> {{ m.trait_absolute_path }} for {{ m.ident }}<ImplTag>
where
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: {{ m.trait_absolute_path }}
{
    {%- for field in m.fields %}

    {%- if field.is_message %}
    type Field{{ field.number }}MessageType<'this> = <
        <Self as ::puroro_internal::GetImplStruct>::Type
        as {{ m.trait_absolute_path }}
    >::Field{{ field.number }}MessageType::<'this>;
    {%- endif %}

    {%- if field.trait_has_scalar_getter %}
    fn {{ field.ident }}<'this>(&'this self) -> {{ field.trait_scalar_getter_type }} {
        <
            <Self as ::puroro_internal::GetImplStruct>::Type
            as {{ m.trait_absolute_path }}
        >::{{ field.ident }}(&self.0)
    }
    {%- endif %}

    {%- if field.trait_has_optional_getter %}
    fn {{ field.ident }}<'this>(&'this self) -> ::std::option::Option<{{ field.trait_scalar_getter_type }}> {
        <
            <Self as ::puroro_internal::GetImplStruct>::Type
            as {{ m.trait_absolute_path }}
        >::{{ field.ident }}(&self.0)
    }
    {%- endif %}

    {%- if field.trait_has_repeated_getter %}
    type Field{{ field.number }}RepeatedType<'this> = <
        <Self as ::puroro_internal::GetImplStruct>::Type
        as {{ m.trait_absolute_path }}
    >::Field{{ field.number }}RepeatedType::<'this>;

    fn {{ field.ident }}<'this>(&'this self) -> Self::Field{{ field.number }}RepeatedType<'this> {
        <
            <Self as ::puroro_internal::GetImplStruct>::Type
            as {{ m.trait_absolute_path }}
        >::{{ field.ident }}(&self.0)
    }
    {%- endif %}
    {%- endfor %}
}

impl<ImplTag> ::puroro::DeserFromBytesIter for {{ m.ident }}<ImplTag>
where
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::puroro::DeserFromBytesIter,
{
    fn deser<I>(&mut self, iter: I) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        <<Self as ::puroro_internal::GetImplStruct>::Type as ::puroro::DeserFromBytesIter>::deser(self, iter)
    }
}
impl<ImplTag> ::puroro_internal::de::DeserFieldsFromBytesIter for {{ m.ident }}<ImplTag>
where
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::puroro_internal::de::DeserFieldsFromBytesIter,
{
    fn deser_field<I>(
        &mut self,
        field_number: i32,
        data: ::puroro::types::FieldData<&mut ::puroro_internal::de::from_iter::ScopedIter<I>>,
    ) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        ::puroro_internal::de::DeserFieldsFromBytesIter::deser_field(&mut self.0, field_number, data)
    }
}

impl<ImplTag> ::puroro::SerToIoWrite for {{ m.ident }}<ImplTag>
where
    Self: ::puroro_internal::GetImplStruct,
    <Self as ::puroro_internal::GetImplStruct>::Type: ::puroro::SerToIoWrite,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write
    {
        ::puroro::SerToIoWrite::ser(&self.0, out)
    }
}

{%- endfor %}

{#- ################# impls ################# #}

pub mod _puroro_impls {
    mod _puroro_root {
        pub use super::super::_puroro_root::*;
    }

    {%- for m in messages %}

    {#- ################# Simple ################# #}
    
    impl ::puroro_internal::GetImplStruct for super::{{ m.ident }}<::puroro::tags::SimpleImpl> {
        type Type = {{ m.simple_ident }};
    }

    #[allow(non_camel_case_types)]
    #[derive(Clone, Default, PartialEq, Debug)]
    pub struct {{ m.simple_ident }} {
        {%- for field in m.fields %}
        pub {{ field.ident }}: {{ field.simple_field_type }},
        {%- endfor %}
        {%- for oneof in m.oneofs %}
        pub {{ oneof.field_ident }}: ::std::option::Option<i32/*TODO*/>,
        {%- endfor %}
    }

    {%- endfor %}
}