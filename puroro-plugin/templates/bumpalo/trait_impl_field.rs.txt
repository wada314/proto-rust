
{%- match f.bumpalo_maybe_field_message_path %}
{%- when Some with (struct_path) %}
type Field{{ f.number }}MessageType<'this> where Self: 'this = &'this {{ struct_path }};
{%- else %}
{%- endmatch %}

{%- if f.is_repeated %}

{%- match f.bumpalo_maybe_borrowed_field_type %}
{%- when Some with (borrowed) %}
type Field{{ f.number }}RepeatedType<'this> where Self: 'this =
    ::puroro::AsRefRepeatedField<'this, {{ f.bumpalo_field_type }}, {{ f.bumpalo_field_rep_item_type }}, {{ borrowed }}>;
{%- else %}
type Field{{ f.number }}RepeatedType<'this> where Self: 'this =
    ::puroro::CloneThenIntoRepeatedField<'this, {{ f.bumpalo_field_type }}, {{ f.trait_scalar_getter_type }}, {{ f.trait_scalar_getter_type }}>;
{%- endmatch %}

fn {{ f.ident }}<'this>(&'this self) -> Self::Field{{ f.number }}RepeatedType<'this> {
    {%- match f.bumpalo_maybe_borrowed_field_type %}
    {%- when Some with (borrowed) %}
    ::puroro::AsRefRepeatedField::new(&self.{{ f.ident }})
    {%- else %}
    ::puroro::CloneThenIntoRepeatedField::new(&self.{{ f.ident }})
    {%- endmatch %}
}

{%- else %} {#- if f.is_repeated #}

{%- if !f.is_explicit_oneof_field %}
fn {{ f.ident_unesc }}_opt<'this>(&'this self) -> Option<{{ f.trait_scalar_getter_type }}> {
    {%- if f.has_optional_bit %}

    {#-
     # The field type is a bare value type, and an optional bit is available in the bitfield.
     # Maybe wrap the field with Some() depend on the bitfield's optional bit value.
     #}
    if ::puroro::internal::get_bitvec_bit(&self._bitfield, {{ f.bitfield_index }}) {
        ::std::option::Option::Some(
            {%- if f.is_length_delimited %}
            self.{{ f.ident }}.as_ref()
            {%- else %}
            ::std::clone::Clone::clone(&self.{{ f.ident }})
            {%- endif %}
        )
    } else {
        ::std::option::Option::None
    }
    {%- else %} {#- if f.has_optional_bit #}
    {%- if f.is_message %}
    
    {#- The field is Option<Box<M>> type. Return by as_ref()-ing the internal Box. #}
    self.{{ f.ident }}.as_ref().map(|b| b.as_ref())

    {%- else %} {#- if f.is_message #}

    {#- The field is bare value type. Wrap it by Some() and return it. #}
    ::std::option::Option::Some(
        {%- if f.is_length_delimited %}
        self.{{ f.ident }}.as_ref()
        {%- else %}
        ::std::clone::Clone::clone(&self.{{ f.ident }})
        {%- endif %})

    {%- endif %} {#- if f.is_message #}
    {%- endif %} {#- if f.has_optional_bit #}
}
{%- endif %} {#- if !f.is_explicit_oneof_field #}

{%- endif %} {#- if f.is_repeated #}
