
{%- if f.is_message %}
{#- [optional|repeated] MyMessage => &'this MyMessageBumpalo<'this> #}
type Field{{ f.number }}MessageType<'this> where Self: 'this = &'this {{ f.bumpalo_field_message_path }};
{%- endif %} {#- if f.is_message #}

{%- if f.is_repeated %}

{#- repeated i32 =>  CloneThenIntoRepeatedField<'this, NoAllocBumpVec<i32>, i32, i32> #}
{#- repeated String => AsRefRepeatedField<'this, NoAllocBumpVec<NoAllocBumpString>, NoAllocBumpString, str> #}
{#- repeated MyMessage => &'this [MyMessageBumpalo<'this>] #}
type Field{{ f.number }}RepeatedType<'this> where Self: 'this =
{%- match f.bumpalo_maybe_borrowed_field_type %}
{%- when Some with (borrowed) %}
{%- if f.is_message %}
    &'this [{{ borrowed }}];
{%- else %} {#- if f.is_message #}
    ::puroro::AsRefRepeatedField<'this, {{ f.bumpalo_field_type }}, {{ f.bumpalo_field_rep_item_type }}, {{ borrowed }}>;
{%- endif %} {#- if f.is_message #}
{%- else %}
    ::puroro::CloneThenIntoRepeatedField<'this, {{ f.bumpalo_field_type }}, {{ f.trait_scalar_getter_type }}, {{ f.trait_scalar_getter_type }}>;
{%- endmatch %}

fn {{ f.ident }}<'this>(&'this self) -> Self::Field{{ f.number }}RepeatedType<'this> {
    {%- match f.bumpalo_maybe_borrowed_field_type %}
    {%- when Some with (borrowed) %}
    {%- if f.is_message %}
    unsafe { self.{{ f.ident }}.cast_item_unchecked() }
    {%- else %} {#- if f.is_message #}
    ::puroro::AsRefRepeatedField::new(&self.{{ f.ident }})
    {%- endif %} {#- if f.is_message #}
    {%- else %}
    ::puroro::CloneThenIntoRepeatedField::new(&self.{{ f.ident }})
    {%- endmatch %}
}

{%- else %} {#- if f.is_repeated #}

{#- [optional] int32 => Option<i32> #}
{#- [optional] String => Option<&'this str> #}
{#- [optional] MyMessage => Option<&'this MyMessageBumpalo<'this>> #}
{%- if !f.is_explicit_oneof_field %}
fn {{ f.ident_unesc }}_opt<'this>(&'this self) -> Option<{{ f.trait_scalar_getter_type }}> {
    <Self>::{{ f.ident_unesc }}_opt(self)
}
{%- endif %} {#- if !f.is_explicit_oneof_field #}

{%- endif %} {#- if f.is_repeated #}
