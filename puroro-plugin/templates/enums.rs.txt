
{% for enume in self.enums %}
#[derive(Debug, Clone)]
pub enum {{ enume.rust_ident() }} {
    {%- for value in enume.values() %}
    {{ value.rust_ident() }} = {{ value.number() }},
    {%- endfor %}
}

impl ::std::convert::TryFrom<i32> for {{ enume.rust_ident() }} {
    type Error = i32;
    fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
        ::std::result::Result::Ok(match value {
            {%- for value in enume.values() %}
            {{ value.number() }} => {{ enume.rust_ident() }}::{{ value.rust_ident() }},
            {%- endfor %}
            _ => Err(value)?,
        })
    }
}

impl ::std::convert::From<{{ enume.rust_ident() }}> for i32 {
    fn from(value: {{ enume.rust_ident() }}) -> i32 {
        value as i32
    }
}

{% endfor %}