{%- match f.simple_maybe_field_message_path %}
{%- when Some with (struct_path) %}
type Field{{ f.number }}MessageType<'this> where Self: 'this = &'this ScalarType;
{%- else %}
{%- endmatch %}

{%- if f.trait_has_scalar_getter %}
fn {{ f.ident }}<'this>(&'this self) -> {{ f.trait_scalar_getter_type }} {
    {%- if f.is_length_delimited %}
    self.{{ f.ident }}.as_ref()
    {%- else %}
    Clone::clone(&self.{{ f.ident }})
    {%- endif %}
}
{%- endif %}

{%- if f.trait_has_optional_getter && !f.is_explicit_oneof_field %}
fn {{ f.ident }}<'this>(&'this self) -> Option<{{ f.trait_scalar_getter_type }}> {
    {%- if f.is_length_delimited %}
    {%- if f.is_message %}
    self.{{ f.ident }}.as_ref()
    {%- else %}
    self.{{ f.ident }}.as_ref().map(|r| r.as_ref())
    {%- endif %}
    {%- else %}
    Clone::clone(&self.{{ f.ident }})
    {%- endif %}
    {%- if field.has_default_value %}
    .or(
        <() as super::_puroro_traits::{{ m.trait_ident }}>::{{ f.ident }}(&())
    )
    {%- endif %}
}
{%- endif %}

{%- if f.trait_has_repeated_getter %}
{%- if f.is_length_delimited %}
{%- if f.is_message %}
type Field{{ f.number }}RepeatedType<'this> where Self: 'this
    = <&'this RepeatedType as ::std::iter::IntoIterator>::IntoIter;
{%- else %}
type Field{{ f.number }}RepeatedType<'this> where Self: 'this
    = ::puroro::internal::impls::single_field::AsRefIter<
        <&'this RepeatedType as ::std::iter::IntoIterator>::IntoIter,
        {%- if f.is_bytes %}
        [u8],
        {%- endif %}
        {%- if f.is_string %}
        str,
        {%- endif %}
    >;
{%- endif %}
{%- else %}
type Field{{ f.number }}RepeatedType<'this> where Self: 'this
    = ::std::iter::Cloned<<&'this RepeatedType as ::std::iter::IntoIterator>::IntoIter>;
{%- endif %}

fn {{ f.ident }}<'this>(&'this self) -> Self::Field{{ f.number }}RepeatedType<'this> {
    {%- if f.is_length_delimited %}
    {%- if f.is_message %}
    ::std::iter::IntoIterator::into_iter(&self.{{ f.ident }})
    {%- else %}
    ::puroro::internal::impls::single_field::AsRefIter::new(
        ::std::iter::IntoIterator::into_iter(&self.{{ f.ident }})
    )
    {%- endif %}
    {%- else %}
    ::std::iter::Iterator::cloned(::std::iter::IntoIterator::into_iter(&self.{{ f.ident }}))
    {%- endif %}
}
{%- endif %}