
#[allow(unused)]
#[allow(non_camel_case_types)]
#[derive(Clone, Default, PartialEq, Debug)]
pub struct {{ self.rust_ident() }} {
    {%- for field in self.fields()  %}
    pub {{ field.rust_ident() }}: {{ field.rust_field_type("::puroro::tags::SimpleImpl").unwrap() }},
    {%- endfor %}
}

impl ::puroro_internal::GetImplStruct for {{ self.message.rust_ident() }}::<::puroro::tags::SimpleImpl> {
    type Type = {{ self.rust_ident() }};
}

impl ::puroro::Message for {{ self.rust_ident() }} {}

impl {{ self.message.rust_absolute_trait_path() }} for {{ self.rust_ident() }} {
    {%- for field in self.fields() %}

    {%- match field.field_type().unwrap().maybe_message().unwrap() %}
    {%- when Some with (m) %}
    type Field{{ field.number() }}MessageType<'this> = {{ m.rust_absolute_path() }}<::puroro::tags::SimpleImpl>;
    {%- else %}
    {%- endmatch %}
    
    {%- if field.is_non_synthetic_oneof_item().unwrap() %}
    type Field{{ field.number() }}OneofItemType<'this> = {{ field.rust_oneof_field_type("::puroro::tags::SimpleImpl").unwrap() }};
    {%- endif %}

    {%- if field.has_scalar_getter() %}
    /// {{ field.rust_one_line_comment().unwrap() }}
    fn {{ field.rust_ident() }}<'this>(&'this self) -> {{ field.trait_scalar_getter_type().unwrap() }} {
        {%- match field.maybe_trait_scalar_getter_type_borrowed("::puroro::tags::SimpleImpl").unwrap() %}
        {%- when Some with (_) %}
        ::std::borrow::Cow::Borrowed(&self.{{ field.rust_ident() }})
        {%- else %}
        ::std::clone::Clone::clone(&self.{{ field.rust_ident() }})
        {%- endmatch %}
    }
    {%- endif %}
    {%- if field.has_scalar_optional_getter() %}
    /// {{ field.rust_one_line_comment().unwrap() }}
    fn {{ field.rust_ident() }}<'this>(&'this self) -> ::std::option::Option<{{ field.trait_scalar_getter_type().unwrap() }}> {
        todo!()
    }
    {%- endif %}
    {%- if field.has_repeated_getter() %}
    {%- match field.maybe_trait_scalar_getter_type_borrowed("::puroro::tags::SimpleImpl").unwrap() %}
    {%- when Some with (borrowed) %}
    type Field{{ field.number() }}RepeatedType<'this> = ::puroro_internal::impls::simple::VecCowWrapper<'this, {{ borrowed }}>;
    {%- else %}
    type Field{{ field.number() }}RepeatedType<'this> = ::puroro_internal::impls::simple::VecWrapper<'this, {{ field.trait_scalar_getter_type().unwrap() }}>;
    {%- endmatch %}

    /// {{ field.rust_one_line_comment().unwrap() }}
    fn {{ field.rust_ident() }}<'this>(&'this self) -> Self::Field{{ field.number() }}RepeatedType<'this> {
        {%- match field.maybe_trait_scalar_getter_type_borrowed("::puroro::tags::SimpleImpl").unwrap() %}
        {%- when Some with (borrowed) %}
        ::puroro_internal::impls::simple::VecCowWrapper::new(&self.{{ field.rust_ident() }})
        {%- else %}
        ::puroro_internal::impls::simple::VecWrapper::new(&self.{{ field.rust_ident() }})
        {%- endmatch %}
    }
    {%- endif %}
    {%- endfor %}
}

impl ::puroro::DeserFromBytesIter for {{ self.rust_ident() }} {
    fn deser<I>(&mut self, iter: I) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        ::puroro_internal::de::from_iter::deser_from_iter(self, iter)
    }
}

impl ::puroro_internal::de::DeserFieldsFromBytesIter for {{ self.rust_ident() }} {
    fn deser_field<I>(
        &mut self,
        field_number: i32,
        data: ::puroro::types::FieldData<&mut ::puroro_internal::de::from_iter::ScopedIter<I>>,
    ) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        match field_number {
            {%- for field in self.fields() %}
            {{ field.number() }} => ::puroro_internal::impls::simple::DeserFieldFromBytesIter::<
                {{ field.rust_label_and_type_tags("::puroro::tags::", "SimpleImpl").unwrap() }}
            >::deser_field(&mut self.{{ field.rust_ident() }}, data),
            {%- endfor %}
            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
    }
}

impl ::puroro::SerToIoWrite for {{ self.rust_ident() }} {
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write
    {
        {%- for field in self.fields() %}
        ::puroro_internal::impls::simple::SerFieldToIoWrite::<
            {{ field.rust_label_and_type_tags("::puroro::tags::", "SimpleImpl").unwrap() }}
        >::ser_field(&self.{{ field.rust_ident() }}, {{ field.number() }}, out)?;
        {%- endfor %}
        ::std::result::Result::Ok(())
    }
}
