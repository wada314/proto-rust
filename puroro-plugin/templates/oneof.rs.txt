pub enum {{ enum_ident }}
{%- if has_message_field %}
<'msg, T: {{ owner_message_trait_path }}>
{%- else %}
{%- if has_reference_field %}
<'msg>
{%- endif %}
{%- endif %}
{
    {%- for field in fields %}
    {{ field.ident }}({{ field.trait_field_type }}),
    {%- endfor %}
}

#[allow(non_camel_case_types)]
#[derive(Clone, PartialEq, Debug)]
pub enum {{ enum_ident }}_Simple
{
    {%- for field in fields %}
    {{ field.ident }}({{ field.simple_field_type }}),
    {%- endfor %}
}

impl<'msg, T> ::std::convert::From<&'msg {{ enum_ident }}_Simple> 
for {{ enum_ident }}
{%- if has_message_field %}
    <'msg, {{ simple_owner_message_path }}>
{%- else %}
    {%- if has_reference_field %}
        <'msg>
    {%- endif %}
{%- endif %}
{
    fn from(from: &'msg {{ enum_ident }}_Simple) -> Self {
        match from {
            {%- for field in fields %}
            {{ enum_ident }}_Simple::{{ field.ident }}(v) => {{ enum_ident }}::{{ field.ident }}(
                {%- if field.is_length_delimited %}
                ::std::borrow::Cow::Borrowed(v.as_ref())
                {%- else %}
                ::std::clone::Clone::clone(&v)
                {%- endif %}
            ),
            {%- endfor %}
        }
    }
}
