enum {{ enum_ident }}{{ trait_maybe_generic_params }} {
    {%- for field in fields %}
    {{ field.ident }}({{ field.trait_field_type }}),
    {%- endfor %}
}

#[allow(non_camel_case_types)]
#[derive(Clone, PartialEq, Debug)]
pub enum {{ enum_ident }}_Simple
{
    {%- for field in fields %}
    {{ field.ident }}({{ field.simple_field_type }}),
    {%- endfor %}
}
/*
impl ::puroro_internal::de::DeserFieldsFromBytesIter for {{ enum_ident }}_Simple {
    fn deser_field<I>(
        &mut self,
        field_number: i32,
        data: ::puroro::types::FieldData<&mut ::puroro_internal::de::from_iter::ScopedIter<I>>,
    ) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        match field_number {
            {%- for field in fields %}
            {{ field.number }} => {
                
                ::puroro_internal::impls::simple::DeserFieldFromBytesIter::<
                    ::puroro::tags::OneofItem ,{{ field.simple_field_type_tag }}
                >::deser_field(&mut , data)
            }
            {%- endfor %}
            _ => ::std::result::Result::Err(::puroro::ErrorKind::InvalidFieldNumber)?,
        }
    }
}*/
