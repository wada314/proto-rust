
{%- if f.is_message %}
{#- [optional|repeated] MyMessage => &'this MyMessage #}
type Field{{ f.number }}MessageType<'this> where Self: 'this = &'this {{ f.simple_field_message_path }};
{%- endif %} {#- if f.is_message #}

{%- if f.is_repeated %}

{%- if f.is_length_delimited %}
{%- if f.is_message %}
{#- repeated MyMessage => &'this [MyMessage] #}
type Field{{ f.number }}RepeatedType<'this> = &'this [{{ f.simple_scalar_field_type }}];
{%- else %} {#- if f.is_message #}
{#- repeated String => AsRefRepeatedField<'this, Vec<String>, String, str> #}
type Field{{ f.number }}RepeatedType<'this> = ::puroro::AsRefRepeatedField<
    'this,
    {{ f.simple_field_type }},
    {{ f.simple_scalar_field_type }},
    {%- if f.is_string %}str,{%- endif %}
    {%- if f.is_bytes %}[u8],{%- endif %}
>;
{%- endif %} {#- if f.is_message #}
{%- else %} {#- if f.is_length_delimited #}
{#- repeated i32 => CloneThenIntoRepeatedField<'this, Vec<i32>, i32, i32> #}
type Field{{ f.number }}RepeatedType<'this> = ::puroro::CloneThenIntoRepeatedField<
    'this,
    {{ f.simple_field_type }},
    {{ f.trait_scalar_getter_type }},
    {{ f.trait_scalar_getter_type }},
    >;
{%- endif %} {#- if f.is_length_delimited #}

fn {{ f.ident }}<'this>(&'this self) -> Self::Field{{ f.number }}RepeatedType<'this> {
    {%- if f.is_length_delimited %}
    {%- if f.is_message %}
    &self.{{ f.ident }}
    {%- else %} {#- if f.is_message #}
    ::puroro::AsRefRepeatedField::new(&self.{{ f.ident }})
    {%- endif %} {#- if f.is_message #}
    {%- else %} {#- if f.is_length_delimited #}
    ::puroro::CloneThenIntoRepeatedField::new(&self.{{ f.ident }})
    {%- endif %} {#- if f.is_length_delimited #}
}

{%- else %} {#- if f.is_repeated #}

{%- if !f.is_explicit_oneof_field %}
{#- [optional] i32 => Option<i32> #}
{#- [optional] String => Option<&'this str> #}
{#- [optional] MyMessage => Option<&'this MyMessage> #}
fn {{ f.ident_unesc }}_opt<'this>(&'this self) -> Option<{{ f.trait_scalar_getter_type }}> {
    {%- if f.is_unlabeled %}

    {%- if f.is_length_delimited %}
    {%- if f.is_message %}
    {#- Message, the field type is Option<T> #}
    self.{{ f.ident }}.as_ref().map(|v| v.as_ref())
    {%- else %}
    {#- String / Bytes, the field type is T #}
    if self.{{ f.ident }}.is_empty() {
        ::std::option::Option::None
    } else {
        ::std::option::Option::Some(self.{{ f.ident }}.as_ref())
    }
    {%- endif %}
    {%- else %}
    {#- Numerical types, the field type is T #}
    if self.{{ f.ident }} == ::std::default::Default::default() {
        ::std::option::Option::None
    } else {
        ::std::option::Option::Some(self.{{ f.ident }}.clone())
    }
    {%- endif %}

    {%- else %} {#- if f.is_unlabeled #}

    {#- The field type is Option<T> #}
    {%- if f.is_length_delimited %}
    self.{{ f.ident }}.as_ref().map(|v| v.as_ref())
    {%- else %}
    Clone::clone(&self.{{ f.ident }})
    {%- endif %}

    {%- endif %} {#- if f.is_unlabeled #}
}
{%- endif %} {#- if !f.is_explicit_oneof_field #}

{%- endif %} {#- if f.is_repeated #}
