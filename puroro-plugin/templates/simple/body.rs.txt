
pub struct {{ m.simple_ident }} {
    {%- for field in m.fields %}
    {%- if !field.is_explicit_oneof_field %}
    pub {{ field.ident }}: {{ field.simple_field_type }},
    {%- endif %}
    {%- endfor %}

    {%- for oneof in m.oneofs %}
    pub {{ oneof.field_ident }}: ::std::option::Option<
        super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }}
        {%- if oneof.has_ld_field %}
        {%- if oneof.has_message_field %}
        <'static, ::puroro::internal::bool::True, Self>
        {%- else %}
        <'static, ::puroro::internal::bool::True>
        {%- endif %}
        {%- endif %}
    >,
    {%- endfor %}
}
impl ::puroro::Message<{{ m.simple_ident }}> for {{ m.simple_ident }} {}

impl {{ m.simple_ident }} {
    pub fn new() -> Self {
        Self {        
            {%- for field in m.fields %}
            {%- if !field.is_explicit_oneof_field %}
            {%- if field.has_default_value %}
            {%- if field.is_length_delimited %}
            {%- if field.is_bytes %}
            {{ field.ident }}: ::std::option::Option::Some({{ field.default_value }}.to_vec()),
            {%- endif %}
            {%- if field.is_string %}
            {{ field.ident }}: ::std::option::Option::Some({{ field.default_value }}.to_string()),
            {%- endif %}
            {%- else %}
            {{ field.ident }}: ::std::option::Option::Some({{ field.default_value }}),
            {%- endif %}
            {%- else %}
            {{ field.ident }}: ::std::default::Default::default(),
            {%- endif %}
            {%- endif %}
            {%- endfor %}

            {%- for oneof in m.oneofs %}
            {{ oneof.field_ident }}: ::std::default::Default::default(),
            {%- endfor %}
        }
    }
}

impl super::_puroro_traits::{{ m.trait_ident }} for {{ m.simple_ident }} {
    {%- for field in m.fields %}
    {%- call simple_trait_impl_field(field) %}
    {%- endfor %}

    {%- for oneof in m.oneofs %}
    fn {{ oneof.field_ident }}<'this>(&'this self) ->
        Option<
            super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }}
            {%- if oneof.has_ld_field %}
            {%- if oneof.has_message_field %}
            <'this, ::puroro::internal::bool::False, Self>
            {%- else %}
            <'this, ::puroro::internal::bool::False>
            {%- endif %}
            {%- endif %}
        >
    {
        use super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }} as E;
        self.{{ oneof.field_ident }}.as_ref().map(|oneof| match oneof {
            {%- for field in oneof.fields %}
            {% if field.is_length_delimited %}
            E::{{ field.ident }}(v) => E::{{ field.ident }}(v.as_ref()),
            {%- else %}
            E::{{ field.ident }}(v) => E::{{ field.ident }}(v.clone()),
            {%- endif %}
            {%- endfor %}
        })
    }
    {%- endfor %}
}

impl ::puroro::MessageRepresentativeImpl for {{ m.simple_ident }} {}

impl ::puroro::internal::de::DeserMessageFromBytesIter for {{ m.simple_ident }} {
    fn deser_field<I>(
        &mut self,
        field_number: i32,
        data: ::puroro::internal::types::FieldData<&mut ::puroro::internal::de::from_iter::ScopedIter<I>>,
    ) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
        match field_number {
            {%- for field in m.fields %}
            {%- if !field.is_explicit_oneof_field %}
            {{ field.number }} => DeserFieldFromBytesIter::<
                {{ field.simple_label_and_type_tags }}
            >::deser_field(&mut self.{{ field.ident }}, data),
            {%- endif %}
            {%- endfor %}

            {%- for oneof in m.oneofs %}
            {%- for field in oneof.fields %}
            {{ field.number }} => {
                use super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }} as E;
                if !matches!(
                    &self.{{ oneof.field_ident }},
                    Some(E::{{ field.ident }}(_)))
                {
                    self.{{ oneof.field_ident }} = Some(
                        E::{{ field.ident }}(
                            ::std::default::Default::default()
                        )
                    );
                }
                let field_value_mut_ref = match &mut self.{{ oneof.field_ident }} {
                    Some(E::{{ field.ident }}(v)) => v,
                    _ => unreachable!(),
                };
                DeserFieldFromBytesIter::<
                    ::puroro::tags::OneofField, {{ field.simple_field_type_tag }}
                >::deser_field(field_value_mut_ref, data)
            }
            {%- endfor %}
            {%- endfor %}

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
    }
}

impl ::puroro::internal::se::SerMessageToIoWrite for {{ m.simple_ident }}
where
    Self: super::_puroro_traits::{{ m.ident }}Trait,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        {%- for field in m.fields %}
        ::puroro::internal::se::SerFieldToIoWrite::<
            {{ field.trait_label_and_type_tags }}
        >::ser_field(
            {%- if field.is_repeated %}
            <Self as super::_puroro_traits::{{ m.ident }}Trait>::{{ field.ident }}(self),
            {%- else %}
            <Self as super::_puroro_traits::{{ m.ident }}Trait>::{{ field.ident_unesc }}_opt(self),
            {%- endif %}
            {{ field.number }},
            out
        )?;
        {%- endfor %} {#- for field in m.fields #}
        ::std::result::Result::Ok(())
    }
}

impl ::std::default::Default for {{ m.simple_ident }} {
    fn default() -> Self {
        Self::new()
    }
}

impl ::std::fmt::Debug for {{ m.simple_ident }} 
where
    Self: super::_puroro_traits::{{ m.trait_ident }}
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        f.debug_struct("{{ m.simple_ident }}")
            {%- for field in m.fields %}
            {%- if field.is_repeated %}
            .field("{{ field.ident }}", &<Self as super::_puroro_traits::{{ m.ident }}Trait>::{{ field.ident }}(self)
                .collect::<::std::vec::Vec<_>>())
            {%- else %} {#- if field.is_repeated #}
            {%- if field.has_optional_bit || field.is_explicit_oneof_field %}
            .field("{{ field.ident }}", &<Self as super::_puroro_traits::{{ m.ident }}Trait>::{{ field.ident_unesc }}_opt(self))
            {%- else %} {#- if field.has_optional_bit || field.is_explicit_oneof_field #}
            .field("{{ field.ident }}", &<Self as super::_puroro_traits::{{ m.ident }}Trait>::{{ field.ident }}(self))
            {%- endif %} {#- if field.has_optional_bit || field.is_explicit_oneof_field #}
            {%- endif %} {#- if field.is_repeated #}
            {%- endfor %} {#- for field in m.fields #}
            .finish()
    }
}

impl ::std::clone::Clone for {{ m.simple_ident }} {
    fn clone(&self) -> Self {
        Self {
            {%- for field in m.fields %}
            {%- if !field.is_explicit_oneof_field %}
            {{ field.ident }}: ::std::clone::Clone::clone(&self.{{ field.ident }}),
            {%- endif %} {#- if !field.is_explicit_oneof_field #}
            {%- endfor %} {#- for field in m.fields #}
            {%- for oneof in m.oneofs %}
            {{ oneof.field_ident }}: ::std::clone::Clone::clone(&self.{{ oneof.field_ident }}),
            {%- endfor %} {#- for oneof in m.oneofs #}
        }
    }
}

impl ::std::cmp::PartialEq for {{ m.simple_ident }} {
    fn eq(&self, rhs: &Self) -> bool {
        {%- for field in m.fields %}
        {%- if !field.is_explicit_oneof_field %}
        self.{{ field.ident }} == rhs.{{ field.ident }} &&
        {%- endif %} {#- if !field.is_explicit_oneof_field #}
        {%- endfor %} {#- for field in m.fields #}
        {%- for oneof in m.oneofs %}
        self.{{ oneof.field_ident }} == rhs.{{ oneof.field_ident }} &&
        {%- endfor %} {#- for oneof in m.oneofs #}
        true
    }
}
