#[derive(::std::clone::Clone, ::std::default::Default, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct {{ m.simple_ident }} {
    {%- for field in m.fields %}
    pub {{ field.ident }}: {{ field.simple_field_type }},
    {%- endfor %}
    {%- for oneof in m.oneofs %}
    {%- if !oneof.is_synthetic %}
    pub {{ oneof.field_ident }}: ::std::option::Option<
        super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }}_Simple
    >,
    {%- endif %}
    {%- endfor %}
}
impl ::puroro::Message for {{ m.simple_ident }} {}

impl super::_puroro_traits::{{ m.ident }}Trait for {{ m.simple_ident }} {
    {%- for field in m.fields %}
    {%- call simple_trait_impl_field(field) %}
    {%- endfor %}
    
    {%- for oneof in m.oneofs %}
    fn {{ oneof.field_ident }}<'this>(&'this self) ->
        ::std::option::Option<
            super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }}
            {%- if oneof.has_message_field %}
            <'this, Self>
            {%- else %}
            {%- if oneof.has_reference_field %}
            <'this>
            {%- endif %}
            {%- endif %}
        >
    {
        self.{{ oneof.field_ident }}.as_ref().map(|o| ::std::convert::From::from(o))
    }
    {%- endfor %}
}

impl ::puroro::DeserFromBytesIter for {{ m.simple_ident }} {
    fn deser<I>(&mut self, iter: I) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        ::puroro_internal::de::from_iter::deser_from_iter(self, iter)
    }
}

impl ::puroro_internal::de::DeserFieldsFromBytesIter for {{ m.simple_ident }} {
    fn deser_field<I>(
        &mut self,
        field_number: i32,
        data: ::puroro::types::FieldData<&mut ::puroro_internal::de::from_iter::ScopedIter<I>>,
    ) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        match field_number {
            {%- for field in m.fields %}
            {%- if !field.is_explicit_oneof_field %}
            {{ field.number }} => ::puroro_internal::impls::simple::de::DeserFieldFromBytesIter::<
                {{ field.simple_label_and_type_tags }}
            >::deser_field(&mut self.{{ field.ident }}, data),
            {%- endif %}
            {%- endfor %}

            {%- for oneof in m.oneofs %}
            {%- for field in oneof.fields %}
            {{ field.number }} => {
                use super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }}_Simple;
                #[allow(unused)]
                use ::std::option::Option::Some;
                if !matches!(
                    &self.{{ oneof.field_ident }},
                    Some({{ oneof.enum_ident }}_Simple::{{ field.ident }}(_)))
                {
                    self.{{ oneof.field_ident }} = Some(
                        {{ oneof.enum_ident }}_Simple::{{ field.ident }}(
                            ::std::default::Default::default()
                        )
                    );
                }
                let field_value_mut_ref = match &mut self.{{ oneof.field_ident }} {
                    Some({{ oneof.enum_ident }}_Simple::{{ field.ident }}(v)) => v,
                    _ => unreachable!(),
                };
                ::puroro_internal::impls::simple::de::DeserFieldFromBytesIter::<
                    ::puroro::tags::OneofItem, {{ field.simple_field_type_tag }}
                >::deser_field(field_value_mut_ref, data)
            }
            {%- endfor %}
            {%- endfor %}

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
    }
}

impl ::puroro::SerToIoWrite for {{ m.simple_ident }} {
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write
    {
        {%- for field in m.fields %}
        ::puroro_internal::impls::simple::se::SerFieldToIoWrite::<
            {{ field.simple_label_and_type_tags }}
        >::ser_field(&self.{{ field.ident }}, {{ field.number }}, out)?;
        {%- endfor %}
        ::std::result::Result::Ok(())
    }
}

