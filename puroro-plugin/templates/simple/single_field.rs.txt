{%- for sfield in m.fields %}
{%- if !sfield.is_explicit_oneof_field %}

#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
struct {{ m.simple_single_field_ident }}{{ sfield.number }} {
    {{ sfield.ident }}: {{ sfield.simple_field_type }},
}

impl ::puroro::Message<{{ m.simple_ident }}> for {{ m.simple_single_field_ident }}{{ sfield.number }} {}

impl super::_puroro_traits::{{ m.ident }}Trait for {{ m.simple_single_field_ident }}{{ sfield.number }}
{
    {%- for field in m.fields %}
    {%- if field.number == sfield.number %}
    {%- call simple_trait_impl_field(field) %}
    {%- else %}
    {%- call empty_trait_impl_field(field) %}
    {%- endif %}
    {%- endfor %}
    
    {%- for oneof in m.oneofs %}
    fn {{ oneof.field_ident }}<'this>(&'this self) ->
        ::std::option::Option<
            super::_puroro_nested::{{ m.submodule_ident }}::_puroro_oneofs::{{ oneof.enum_ident }}
            {%- if oneof.has_reference_field %}
            <'this, Self>
            {%- endif %}
        >
    {
        todo!()
    }
    {%- endfor %}
}

impl ::puroro::SerToIoWrite for {{ m.simple_single_field_ident }}{{ sfield.number }} {
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write
    {
        use ::puroro::internal::impls::simple::se::SerFieldToIoWrite;
        SerFieldToIoWrite::<
            {{ sfield.simple_label_and_type_tags }}
        >::ser_field(&self.{{ sfield.ident }}, {{ sfield.number }}, out)?;
        ::std::result::Result::Ok(())
    }
}

{%- endif %}
{%- endfor %}