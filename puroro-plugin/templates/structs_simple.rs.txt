{#- ################# Simple ################# #}

impl ::puroro_internal::GetImplStruct for super::{{ m.ident }}<::puroro::tags::SimpleImpl> {
    type Type = {{ m.simple_ident }};
}

#[allow(non_camel_case_types)]
#[derive(Clone, Default, PartialEq, Debug)]
pub struct {{ m.simple_ident }} {
    {%- for field in m.fields %}
    pub {{ field.ident }}: {{ field.simple_field_type }},
    {%- endfor %}
    {%- for oneof in m.oneofs %}
    pub {{ oneof.field_ident }}: ::std::option::Option<i32/*TODO*/>,
    {%- endfor %}
}
impl ::puroro::Message for {{ m.simple_ident }} {}

impl {{ m.trait_absolute_path }} for {{ m.simple_ident }} {
    {%- for field in m.fields %}

    {%- match field.trait_maybe_field_message_absolute_path %}
    {%- when Some with (struct_path) %}
    type Field{{ field.number }}MessageType<'this> = {{ struct_path }}<::puroro::tags::SimpleImpl>;
    {%- else %}
    {%- endmatch %}

    {%- if field.trait_has_scalar_getter %}
    fn {{ field.ident }}<'this>(&'this self) -> {{ field.trait_scalar_getter_type }} {
        {%- if field.is_length_delimited %}
        ::std::borrow::Cow::Borrowed(&self.{{ field.ident }})
        {%- else %}
        ::std::clone::Clone::clone(&self.{{ field.ident }})
        {%- endif %}
    }
    {%- endif %}
    {%- if field.trait_has_optional_getter %}
    fn {{ field.ident }}<'this>(&'this self) -> ::std::option::Option<{{ field.trait_scalar_getter_type }}> {
        todo!()
    }
    {%- endif %}
    {%- if field.trait_has_repeated_getter %}
    {%- match field.simple_maybe_borrowed_field_type %}
    {%- when Some with (borrowed) %}
    type Field{{ field.number }}RepeatedType<'this> = ::puroro_internal::impls::simple::VecCowWrapper<'this, {{ borrowed }}>;
    {%- else %}
    type Field{{ field.number }}RepeatedType<'this> = ::puroro_internal::impls::simple::VecWrapper<'this, {{ field.trait_scalar_getter_type }}>;
    {%- endmatch %}

    fn {{ field.ident }}<'this>(&'this self) -> Self::Field{{ field.number }}RepeatedType<'this> {
        {%- match field.simple_maybe_borrowed_field_type %}
        {%- when Some with (borrowed) %}
        ::puroro_internal::impls::simple::VecCowWrapper::new(&self.{{ field.ident }})
        {%- else %}
        ::puroro_internal::impls::simple::VecWrapper::new(&self.{{ field.ident }})
        {%- endmatch %}
    }
    {%- endif %}
    {%- endfor %}
}

impl ::puroro::DeserFromBytesIter for {{ m.simple_ident }} {
    fn deser<I>(&mut self, iter: I) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        ::puroro_internal::de::from_iter::deser_from_iter(self, iter)
    }
}

impl ::puroro_internal::de::DeserFieldsFromBytesIter for {{ m.simple_ident }} {
    fn deser_field<I>(
        &mut self,
        field_number: i32,
        data: ::puroro::types::FieldData<&mut ::puroro_internal::de::from_iter::ScopedIter<I>>,
    ) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        match field_number {
            {%- for field in m.fields %}
            {{ field.number }} => ::puroro_internal::impls::simple::DeserFieldFromBytesIter::<
                {{ field.simple_label_and_type_tags }}
            >::deser_field(&mut self.{{ field.ident }}, data),
            {%- endfor %}
            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
    }
}

impl ::puroro::SerToIoWrite for {{ m.simple_ident }} {
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write
    {
        {%- for field in m.fields %}
        ::puroro_internal::impls::simple::SerFieldToIoWrite::<
            {{ field.simple_label_and_type_tags }}
        >::ser_field(&self.{{ field.ident }}, {{ field.number }}, out)?;
        {%- endfor %}
        ::std::result::Result::Ok(())
    }
}