
#[derive(Default, Clone)]
pub struct {{ ident_struct }} {
    {%- for field in fields %}
    // {{ "{:?}, {:?}"|format(field.rule,field.wire_type) }}
    {{ field.ident_struct_field }}: {{ field.rust_field_type }},
    {%- endfor %} {#- for field in fields #}

    _bitfield: self::_puroro::bitvec::BitArray<{{ (bits_length + 7) / 8 }}>,
}

impl {{ ident_struct }} {
    {%- for field in fields %}
    {%- match field.rule %}
    {%- when FieldRule::Repeated %}

    {#- Repeated getter #}
    // {{ "{:?}, {:?}"|format(field.rule,field.wire_type) }}
    pub fn {{ field.ident_getter }}(&self) -> {{ field.rust_getter_type }} {
        use self::_puroro::internal::field_type::RepeatedFieldType;
        <{{ field.rust_field_type }} as RepeatedFieldType>::get_field(
            &self.{{ field.ident_struct_field }}, &self._bitfield, 
        )
    }
    pub fn {{ field.ident_getter_mut }}(&mut self) -> {{ field.rust_getter_mut_type }} {
        use self::_puroro::internal::field_type::RepeatedFieldType;
        <{{ field.rust_field_type }} as RepeatedFieldType>::mut_field(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield, 
        )
    }
    pub fn {{ field.ident_clear }}(&mut self) {
        use self::_puroro::internal::field_type::RepeatedFieldType;
        <{{ field.rust_field_type }} as RepeatedFieldType>::clear(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield, 
        )
    }
    
    {%- else %} {#- when FieldRule::Repeated #}

    {#- Singular getter #}
    // {{ "{:?}, {:?}"|format(field.rule,field.wire_type) }}
    pub fn {{ field.ident_getter }}(&self) -> {{ field.rust_getter_type }} {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::get_field(
            &self.{{ field.ident_struct_field }}, &self._bitfield, ::std::default::Default::default,
        )
    }
    pub fn {{ field.ident_getter_opt }}(&self) -> {{ field.rust_getter_opt_type }} {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::get_field_opt(
            &self.{{ field.ident_struct_field }}, &self._bitfield,
        )
    }
    pub fn {{ field.ident_has }}(&self) -> bool {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::get_field_opt(
            &self.{{ field.ident_struct_field }}, &self._bitfield,
        ).is_some()
    }
    pub fn {{ field.ident_getter_mut }}(&mut self) -> {{ field.rust_getter_mut_type }} {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::mut_field(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield, ::std::default::Default::default,
        )
    }
    pub fn {{ field.ident_clear }}(&mut self) {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::clear(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield,
        )
    }

    {%- endmatch %} {#- match field.rule #}
    {%- endfor %} {#- for field in fields #}
}

impl self::_puroro::Message for {{ ident_struct }} {
    fn from_bytes_iter<I: ::std::iter::Iterator<Item=::std::io::Result<u8>>>(iter: I) -> self::_puroro::Result<Self> {
        #[allow(unused)]
        use ::std::result::Result::Ok;
        let mut msg: Self = ::std::default::Default::default();
        msg.merge_from_bytes_iter(iter)?;
        Ok(msg)
    }

    fn merge_from_bytes_iter<I: ::std::iter::Iterator<Item =::std::io::Result<u8>>>(&mut self, mut iter: I) -> self::_puroro::Result<()> {
        #[allow(unused)]
        use ::std::result::Result::Ok;
        #[allow(unused)]
        use ::std::option::Option::Some;
        while let Some((number, _field_data)) = self::_puroro::internal::ser::FieldData::from_bytes_iter(iter.by_ref())? {
            match number {
                {%- for field in fields %}
                {{ field.number }} => <
                    {{ field.rust_field_type }} as self::_puroro::internal::field_type::FieldType
                >::deser_from_iter(
                    &mut self.{{ field.ident_struct_field }},
                    &mut self._bitfield,
                    _field_data,
                )?,
                {%- endfor %} {#- for field in fields #}
                _ => todo!(),
            }
        }
        Ok(())
    }
}

{#- a submodule for the utility types needed for this message type #}
{#- e.g. An enum for oneof items #}
pub mod {{ ident_module }} {

    mod _puroro {
        pub use super::super::_puroro::*;
    }
    mod _puroro_root {
        pub use super::super::_puroro_root::*;
    }

    

    {%- for oneof in oneofs %}
    {#- Oneof union. Includes None case #}
    pub(crate) union {{ oneof.ident_union }} {
        _none: (),
        {%- for field in oneof.fields %}
        {{ field.ident_union_item }}: {{ field.rust_field_type }},
        {%- endfor %} {#- for field in oneof.fields #}
    }
    {#- public oneof enum without contents, not including None case #}
    #[repr(u32)]
    pub enum {{ oneof.ident_case }} {
        {%- for field in oneof.fields %}
        {{ field.ident_enum_item }},
        {%- endfor %} {#- for field in oneof.fields #}
    }
    {#- public oneof enum with ref to its contents, not including None case #}
    #[repr(u32)]
    pub enum {{ oneof.ident_case_ref }} {%- if oneof.has_ld_type %}<'a>{%- endif %} {
        {%- for field in oneof.fields %}
        {{ field.ident_enum_item }}({{ field.rust_oneof_getter_type }}),
        {%- endfor %} {#- for field in oneof.fields #}
    }

    impl {{ oneof.ident_union }} {
        {%- for field in oneof.fields %}
        pub(crate) fn {{ field.ident_opt_getter }}<B: self::_puroro::bitvec::BitSlice>(&self, bits: &B) -> {{ field.rust_opt_getter_type }} {
            #[allow(unused)]
            use ::std::option::Option::{None, Some};
            use self::_puroro::internal::oneof_type::OneofCase;
            use self::_puroro::internal::oneof_field_type::OneofFieldType;

            let case_opt = self::{{ oneof.ident_case }}::from_bitslice(bits);
            if let Some({{ oneof.ident_case }}::{{ field.ident_enum_item }}) = case_opt {
                let item = unsafe {
                    &self.{{ field.ident_union_item }}
                };
                Some(item.get_field())
            } else {
                None
            }
        }
        {%- endfor %} {#- for field in oneof.fields #}

        pub(crate) fn _clear<B: self::_puroro::bitvec::BitSlice>(&mut self, bits: &mut B) {
            #[allow(unused)]
            use ::std::option::Option::Some;
            #[allow(unused)]
            use self::_puroro::internal::oneof_type::OneofCase;
            #[allow(unused)]
            use ::std::mem::ManuallyDrop;

            match self::{{ oneof.ident_case }}::from_bitslice(bits) {
                {%- for field in oneof.fields %}
                Some({{ oneof.ident_case  }}::{{ field.ident_enum_item }}) => {
                    unsafe { ManuallyDrop::take(&mut self.{{ field.ident_union_item }}) };
                }
                {%- endfor %} {#- for field in oneof.fields #}
                _ => (),
            }
            {#- Set the bitfield value to the last value + 1, which means None. #}
            bits.set_range::<{{ oneof.bitfield_start }}, {{ oneof.bitfield_end }}>({{ oneof.num_fields }});
        }
    }
    
    impl self::_puroro::internal::oneof_type::OneofCase<{{ oneof.bitfield_start }}, {{ oneof.bitfield_end }}> for {{ oneof.ident_case }} {
        fn from_u32(x: u32) -> Option<Self> {
            #[allow(unused)]
            use ::std::option::Option::{None, Some};
            match x {
                {%- for field in oneof.fields %}
                {{ field.index }} => Some(self::{{ oneof.ident_case }}::{{ field.ident_enum_item }}),
                {%- endfor %} {#- for field in oneof.fields #}
                _ => None,
            }
        }
    }

    {%- endfor %} {#- for oneof in oneofs #}
}

