
#[derive(Default, Clone)]
pub struct {{ ident_camel }} {
    {%- for f in fields %}
    {%- match f.rule %}
    {%- when FieldRule::Repeated %}
    {%- else %}
    // {{ "{:?}, {:?}"|format(f.rule,f.wire_type) }}
    {{ f.ident_lsnake }}: {{ f.rust_field_type }},
    {%- endmatch %}
    {%- endfor %} {#- for f in fields #}

    _bitfield: self::_puroro::bitvec::array::BitArray<[u32; {{ (bits_length + 7) / 8 }}], self::_puroro::bitvec::order::Lsb0>,
}

impl {{ ident_camel }} {
    {%- for f in fields %}
    {%- match f.rule %}
    {%- when FieldRule::Repeated %}
    {%- else %}
    // {{ "{:?}, {:?}"|format(f.rule,f.wire_type) }}
    pub fn {{ f.ident_lsnake }}(&self) -> {{ f.rust_getter_type }} {
        <{{ f.rust_field_type }} as self::_puroro::internal::field_types::FieldType>::get_field(
            &self.{{ f.ident_lsnake }}, &self._bitfield,
        )
    }
    {%- endmatch %}
    {%- endfor %} {#- for f in fields #}
}

impl self::_puroro::Message for {{ ident_camel }} {
    fn from_bytes_iter<I: ::std::iter::Iterator<Item=::std::io::Result<u8>>>(iter: I) -> self::_puroro::Result<Self> {
        let mut msg = ::std::default::Default::default();
        let mut peekable = iter.peekable();
        while peekable.peek().is_some() {
            let (wire, number) = self::_puroro::internal::utils::wire_and_number_from_bytes_iter(peekable.by_ref())?;
        }
        Ok(msg)
    }
}

pub mod {{ ident_lsnake }} {

    mod _puroro {
        pub use super::super::_puroro::*;
    }
    mod _puroro_root {
        pub use super::super::_puroro_root::*;
    }

}

