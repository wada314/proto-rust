{#- ################ Macros (file local functions) ################ #}

{%- macro field_type_gen(field) -%}
    {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() -%}
    {%- when wrappers::MaybeEnumOrMessage::Enum with (e) -%}
        <ImplTag as ::puroro_internal::EnumTypeGen<{{ field.syntax_and_label_tags().unwrap() }}>>
    {%- when wrappers::MaybeEnumOrMessage::Message with (m) -%}
        <ImplTag as ::puroro_internal::MsgTypeGen<{{ field.syntax_and_label_tags().unwrap() }}>>
    {%- else -%}
        <ImplTag as ::puroro_internal::FieldTypeGen<{{ field.syntax_and_label_and_type_tags().unwrap() }}>>
    {%- endmatch -%}
{%- endmacro -%}

{%- macro field_type(field) -%}
    {%- call field_type_gen(field) -%}::
    {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() -%}
    {%- when wrappers::MaybeEnumOrMessage::Enum with (e) -%}
        EnumFieldType::<{{ e.rust_absolute_path() }}>
    {%- when wrappers::MaybeEnumOrMessage::Message with (m) -%}
        MsgFieldType::<{{ m.rust_absolute_path() }}<ImplTag>>
    {%- else -%}
        Type
    {%- endmatch -%}
{%- endmacro -%}

{%- macro maybe_concrete_type_of_enum_and_message(field) -%}
    {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() -%}
    {%- when wrappers::MaybeEnumOrMessage::Enum with (e) -%}
        {{ e.rust_absolute_path() }}
    {%- when wrappers::MaybeEnumOrMessage::Message with (m) -%}
        {{ m.rust_absolute_path() }}<ImplTag>
    {%- else -%}
    {%- endmatch -%}
{%- endmacro -%}

{# ################# Struct body ################# -#}

#[allow(unused)]
pub struct {{ self.message.rust_ident() }}<ImplTag> 
where ImplTag:
    ::puroro_internal::AnyFieldTypeGen + ::puroro_internal::StructInternalTypeGen,
{
    {% if self.is_public -%}

    {% for field in self.message.fields() -%}
    /// {{ field.rust_one_line_comment().unwrap() }}
    pub {{ field.rust_ident() }}: {% call field_type(field) %},
    {% endfor -%}
    puroro_internal: <ImplTag as ::puroro_internal::StructInternalTypeGen>::Type,

    {%- else -%}

    body: super::public::{{ self.message.rust_ident() }}<ImplTag>,

    {%- endif %}
}

{# ################# Puroro provided trait impls ################# -#}

impl<ImplTag> ::puroro::Message for {{ self.message.rust_ident() }}<ImplTag>
where ImplTag:
    ::puroro_internal::AnyFieldTypeGen + ::puroro_internal::StructInternalTypeGen,
{
}

impl<ImplTag> ::puroro_internal::MessageInternal for {{ self.message.rust_ident() }}<ImplTag>
where ImplTag:
    ::puroro_internal::AnyFieldTypeGen + ::puroro_internal::StructInternalTypeGen,
{
    type ImplTypeTag = ImplTag;

    fn new_with_internal_data(
        internal_data: <Self::ImplTypeTag as ::puroro_internal::StructInternalTypeGen>::Type,
    ) -> Self {
        Self {
            {%- if self.is_public %}

            {%- for field in self.message.fields() %}
            {{ field.rust_ident() }}: {% call field_type_gen(field) %}::default(&internal_data),
            {%- endfor %}
            puroro_internal: internal_data,

            {%- else -%}

            body: ::puroro_internal::MessageInternal::new_with_internal_data(internal_data),
            
            {%- endif %}
        }
    }
}

impl<ImplTag> ::puroro::DeserFromBytesIter for {{ self.message.rust_ident() }}<ImplTag>
where ImplTag:
    ::puroro_internal::AnyFieldTypeGen
    + ::puroro_internal::StructInternalTypeGen
    + ::puroro_internal::DeserAnyFieldFromBytesIter
{
    fn deser<I>(&mut self, iter: I) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>
    {
        {% if self.is_public -%}
        ::puroro_internal::de::from_iter::deser_from_iter(self, iter)
        {%- else -%}
        ::puroro::DeserFromBytesIter::deser(&mut self.body, iter)
        {%- endif %}
    }
}

impl<ImplTag> ::puroro_internal::de::MessageFromBytesIter for {{ self.message.rust_ident() }}<ImplTag>
where ImplTag:
    ::puroro_internal::AnyFieldTypeGen
    + ::puroro_internal::StructInternalTypeGen
    + ::puroro_internal::DeserAnyFieldFromBytesIter
{    
    fn deser_field<I>(
        &mut self,
        field_number: i32,
        data: ::puroro::types::FieldData<&mut ::puroro_internal::ScopedIter<I>>,
    ) -> ::puroro::Result<()>
    where
        I: ::std::iter::Iterator<Item = ::std::io::Result<u8>> 
    {
        {% if self.is_public -%}

        match field_number {
            {%- for field in self.message.fields() %}
            {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() %}
            {%- when wrappers::MaybeEnumOrMessage::Enum with (e) %}
            {{ field.number() }} => <ImplTag as ::puroro_internal::de::DeserEnumFromBytesIterProxy<
                {{ field.syntax_and_label_tags().unwrap() }}
            >>::DeserEnum::<
                {{ e.rust_absolute_path() }}
            >::deser_from_scoped_bytes_iter(&mut self.{{ field.rust_ident() }}, data, &self.puroro_internal),
            {%- when wrappers::MaybeEnumOrMessage::Message with (m) %}
            {{ field.number() }} => <ImplTag as ::puroro_internal::de::DeserMsgFromBytesIterProxy<
                {{ field.syntax_and_label_tags().unwrap() }}
            >>::DeserMsg::<
                {{ m.rust_absolute_path() }}<ImplTag>
            >::deser_from_scoped_bytes_iter(&mut self.{{ field.rust_ident() }}, data, &self.puroro_internal),
            {%- else %}
            {{ field.number() }} => <ImplTag as ::puroro_internal::de::DeserFieldFromBytesIter<
                {{ field.syntax_and_label_and_type_tags().unwrap() }}
            >>::deser_from_scoped_bytes_iter(&mut self.{{ field.rust_ident() }}, data, &self.puroro_internal),
            {%- endmatch %}
            {%- endfor %}

            _ => ::std::result::Result::Err(::puroro::ErrorKind::UnknownFieldNumber)?,
        }

        {%- else -%}

        ::puroro_internal::de::MessageFromBytesIter::deser_field(&mut self.body, field_number, data)

        {%- endif %}
    }
}


impl<ImplTag> ::puroro::SerToIoWrite for {{ self.message.rust_ident() }}<ImplTag>
where ImplTag:
    ::puroro_internal::AnyFieldTypeGen
    + ::puroro_internal::SerAnyFieldToIoWrite
    + ::puroro_internal::StructInternalTypeGen
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write
    {
        {% if self.is_public -%}
        
        {%- for field in self.message.fields() %}
        {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() %}
        {%- when wrappers::MaybeEnumOrMessage::Enum with (e) %}
        <ImplTag as ::puroro_internal::se::SerEnumToIoWriteProxy<
            {{ field.syntax_and_label_tags().unwrap() }}
        >>::SerEnum::<
            {{ e.rust_absolute_path() }}
        >::ser_to_io_write(&self.{{ field.rust_ident() }}, {{ field.number() }}, out, &self.puroro_internal)?;
        {%- when wrappers::MaybeEnumOrMessage::Message with (m) %}
        <ImplTag as ::puroro_internal::se::SerMsgToIoWriteProxy<
            {{ field.syntax_and_label_tags().unwrap() }}
        >>::SerMsg::<
            {{ m.rust_absolute_path() }}<ImplTag>
        >::ser_to_io_write(&self.{{ field.rust_ident() }}, {{ field.number() }}, out, &self.puroro_internal)?;
        {%- else %}
        <ImplTag as ::puroro_internal::se::SerFieldToIoWrite<
            {{ field.syntax_and_label_and_type_tags().unwrap() }}
        >>::ser_to_io_write(&self.{{ field.rust_ident() }}, {{ field.number() }}, out, &self.puroro_internal)?;
        {%- endmatch %}
        {%- endfor %}
        <ImplTag as ::puroro_internal::se::SerInternalDataToIoWrite>::ser_to_io_write(out, &self.puroro_internal)?;
        Ok(())

        {%- else -%}
        ::puroro::SerToIoWrite::ser(&self.body, out)
        {%- endif %}
    }
}

impl<ImplTag, NewImplTag> ::puroro::SwitchImpl<NewImplTag> for {{ self.message.rust_ident() }}<ImplTag> 
where
    NewImplTag:
        ::puroro_internal::AnyFieldTypeGen
        + ::puroro_internal::StructInternalTypeGen
        + ::puroro_internal::ChooseStructVisibility<
            super::public::{{ self.message.rust_ident() }}<NewImplTag>,
            super::private::{{ self.message.rust_ident() }}<NewImplTag>,
        >,
    ImplTag:
        ::puroro_internal::AnyFieldTypeGen
        + ::puroro_internal::StructInternalTypeGen,
{
    type Type = <NewImplTag as ::puroro_internal::ChooseStructVisibility<
        super::public::{{ self.message.rust_ident() }}<NewImplTag>,
        super::private::{{ self.message.rust_ident() }}<NewImplTag>,
    >>::Type;
}

impl<ImplTag> {{ self.message.rust_absolute_trait_path() }} for {{ self.message.rust_ident() }}<ImplTag>
where
    ImplTag:
        ::puroro_internal::AnyFieldTypeGen
        + ::puroro_internal::StructInternalTypeGen,
{
    {%- for field in self.message.fields() %}

    {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() %}
    {%- when wrappers::MaybeEnumOrMessage::Message with (m) %}
    type Field{{ field.number() }}MessageImplTag<'this> = <ImplTag as ::puroro_internal::MsgTypeGen<
        {{ field.syntax_and_label_tags().unwrap() }}
    >>::ImplTagForChildMessage<'this>;
    {%- else %}
    {%- endmatch %}

    {%- if field.has_scalar_getter() %}
    fn {{ field.rust_ident() }}<'this>(&'this self) -> {{ field.trait_scalar_getter_type().unwrap() }} {
        {% if self.is_public %}
        {%- call field_type_gen(field) %}::get_scalar(&self.{{ field.rust_ident() }}, &self.puroro_internal)
        {%- else %} {# if self.is_public #}
        {{- self.message.rust_absolute_trait_path() }}::{{ field.rust_ident() }}(&self.body)
        {%- endif %} {# if self.is_public #}
    }
    {%- endif %}

    {%- if field.has_scalar_optional_getter() %}
    fn {{ field.rust_ident() }}<'this>(&'this self) -> ::std::option::Option<{{ field.trait_scalar_getter_type().unwrap() }}>
    {
        {% if self.is_public %}        
        {%- call field_type_gen(field) -%}::get_scalar_optional(&self.{{ field.rust_ident() }}, &self.puroro_internal)
        {%- else -%}
        <super::public::{{ self.message.rust_ident() }}<ImplTag> as {{ self.message.rust_absolute_trait_path() }}>::{{ field.rust_ident() }}(&self.body)
        {%- endif %}
    }
    {%- endif %}

    {%- if field.has_repeated_getter() %}

    type Field{{ field.number() }}RepeatedType<'this>
    {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() %}
    {%- when wrappers::MaybeEnumOrMessage::Enum with (e) %}
        = {% call field_type_gen(field) %}::TraitRepeatedFieldType::<'this, {{ e.rust_absolute_path() }}>;
    {%- when wrappers::MaybeEnumOrMessage::Message with (m) %}
        = {% call field_type_gen(field) %}::TraitRepeatedFieldType::<'this, {{ m.rust_absolute_path() }}<
            Self::Field{{ field.number() }}MessageImplTag<'this>
        >>;
    {%- else %}
        = {% call field_type_gen(field) %}::TraitRepeatedFieldType::<'this>;
    {%- endmatch %}

    fn {{ field.rust_ident() }}<'this>(&'this self) -> Self::Field{{ field.number() }}RepeatedType<'this> 
    {
        {% if self.is_public %}
        {%- call field_type_gen(field) %}::get_repeated(&self.{{ field.rust_ident() }}, &self.puroro_internal)
        {%- else %}
        {{- self.message.rust_absolute_trait_path() }}::{{ field.rust_ident() }}(&self.body)
        {%- endif %}
    }

    {%- endif %}

    {%- endfor %}
}

{# ################# std trait impls ################# -#}

impl<ImplTag> ::std::default::Default for {{ self.message.rust_ident() }}<ImplTag>
where 
    ImplTag: 
        ::puroro_internal::AnyFieldTypeGen
        + ::puroro_internal::StructInternalTypeGen,
    <ImplTag as ::puroro_internal::StructInternalTypeGen>::Type: ::std::default::Default,
{
    fn default() -> Self {
        <Self as ::puroro_internal::MessageInternal>::new_with_internal_data(::std::default::Default::default())
    }
}

impl<ImplTag> ::std::clone::Clone for {{ self.message.rust_ident() }}<ImplTag>
where 
    ImplTag: 
        ::puroro_internal::AnyFieldTypeGen
        + ::puroro_internal::StructInternalTypeGen,
    <ImplTag as ::puroro_internal::StructInternalTypeGen>::Type: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        {%- if self.is_public -%}
        let internal_data = ::std::clone::Clone::clone(&self.puroro_internal);
        Self {
            {%- for field in self.message.fields() %}
            
            {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() %}
            {%- when wrappers::MaybeEnumOrMessage::Enum with (e) %}
            {{ field.rust_ident() }}: <ImplTag as ::puroro_internal::EnumTypeGen<
                {{ field.syntax_and_label_tags().unwrap() }}
            >>::clone(&self.{{ field.rust_ident() }}, &internal_data),
            {%- when wrappers::MaybeEnumOrMessage::Message with (m) %}
            {{ field.rust_ident() }}: <ImplTag as ::puroro_internal::MsgTypeGen<
                {{ field.syntax_and_label_tags().unwrap() }}
            >>::clone(&self.{{ field.rust_ident() }}, &internal_data),
            {%- else %}
            {{ field.rust_ident() }}: <ImplTag as ::puroro_internal::FieldTypeGen<
                {{ field.syntax_and_label_and_type_tags().unwrap() }}
            >>::clone(&self.{{ field.rust_ident() }}, &internal_data),
            {%- endmatch %}

            {%- endfor %}
            puroro_internal: internal_data,
        }
        {%- else %}
        Self {
            body: ::std::clone::Clone::clone(&self.body),
        }
        {%- endif %}
    }
}

// Incorrect! Not work properly with recursive types
impl<ImplTag> ::std::fmt::Debug for {{ self.message.rust_ident() }}<ImplTag>
where
    ImplTag: ::puroro_internal::AnyFieldTypeGen
        + ::puroro_internal::StructInternalTypeGen,
    {%- for field in self.message.fields() %}
    {%- match field.field_type().unwrap().maybe_enum_or_message().unwrap() %}
    {%- when wrappers::MaybeEnumOrMessage::Enum with (e) %}
    <ImplTag as ::puroro_internal::EnumTypeGen<
        {{ field.syntax_and_label_tags().unwrap() }}
    >>::EnumFieldType::<
        {{ e.rust_absolute_path() }}
    >: std::fmt::Debug,
    {%- when wrappers::MaybeEnumOrMessage::Message with (m) %}
    <ImplTag as ::puroro_internal::MsgTypeGen<
        {{ field.syntax_and_label_tags().unwrap() }}
    >>::MsgFieldType::<
        {{ m.rust_absolute_path() }}<ImplTag>
    >: std::fmt::Debug,
    {%- else %}
    <ImplTag as ::puroro_internal::FieldTypeGen<
        {{ field.syntax_and_label_and_type_tags().unwrap() }}
    >>::Type: ::std::fmt::Debug,
    {%- endmatch %}
    {%- endfor %}
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        {% if self.is_public -%}

        f.debug_struct("{{ self.message.rust_ident() }}")
            {% for field in self.message.fields() -%}
            .field("{{ field.rust_ident() }}", &self.{{ field.rust_ident() }})
            {% endfor -%}
            .finish()
        
        {%- else -%}
        <super::public::{{ self.message.rust_ident() }}<ImplTag> as ::std::fmt::Debug>::fmt(
            &self.body, f
        )
        {%- endif %}
    }
}

impl<ImplTag> ::std::fmt::Display for {{ self.message.rust_ident() }}<ImplTag>
where
    ImplTag: ::puroro_internal::AnyFieldTypeGen + ::puroro_internal::StructInternalTypeGen,
    Self: ::std::fmt::Debug
{
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        <Self as ::std::fmt::Debug>::fmt(self, f)
    }
}
    

