
#[derive(Default)]
pub struct {{ ident_struct }} {
    {%- for field in fields %}
    // {{ "{:?}, {:?}"|format(field.rule,field.wire_type) }}
    {{ field.ident_struct_field }}: {{ field.rust_field_type }},
    {%- endfor %} {#- for field in fields #}

    {%- for oneof in oneofs %}
    // {{ "oneof {}"|format(oneof.ident_union) }}
    {{ oneof.ident_struct_field }}: {{ oneof.rust_field_type }},
    {%- endfor %} {#- for oneof in oneofs #}

    _bitfield: self::_puroro::bitvec::BitArray<{{ (bits_length + 7) / 8 }}>,
}

impl {{ ident_struct }} {
    {%- for field in fields %}
    {%- match field.rule %}
    {%- when FieldRule::Repeated %}

    {#- Repeated getter #}
    // {{ "{:?}, {:?}"|format(field.rule,field.wire_type) }}
    pub fn {{ field.ident_getter }}(&self) -> {{ field.rust_getter_type }} {
        use self::_puroro::internal::field_type::RepeatedFieldType;
        <{{ field.rust_field_type }} as RepeatedFieldType>::get_field(
            &self.{{ field.ident_struct_field }}, &self._bitfield, 
        )
    }
    pub fn {{ field.ident_getter_mut }}(&mut self) -> {{ field.rust_getter_mut_type }} {
        use self::_puroro::internal::field_type::RepeatedFieldType;
        <{{ field.rust_field_type }} as RepeatedFieldType>::mut_field(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield, 
        )
    }
    pub fn {{ field.ident_clear }}(&mut self) {
        use self::_puroro::internal::field_type::RepeatedFieldType;
        <{{ field.rust_field_type }} as RepeatedFieldType>::clear(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield, 
        )
    }
    
    {%- else %} {#- when FieldRule::Repeated #}

    {#- Singular getter #}
    // {{ "{:?}, {:?}"|format(field.rule,field.wire_type) }}
    pub fn {{ field.ident_getter }}(&self) -> {{ field.rust_getter_type }} {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::get_field(
            &self.{{ field.ident_struct_field }}, &self._bitfield, ::std::default::Default::default,
        )
    }
    pub fn {{ field.ident_getter_opt }}(&self) -> {{ field.rust_getter_opt_type }} {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::get_field_opt(
            &self.{{ field.ident_struct_field }}, &self._bitfield,
        )
    }
    pub fn {{ field.ident_has }}(&self) -> bool {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::get_field_opt(
            &self.{{ field.ident_struct_field }}, &self._bitfield,
        ).is_some()
    }
    pub fn {{ field.ident_getter_mut }}(&mut self) -> {{ field.rust_getter_mut_type }} {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::mut_field(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield, ::std::default::Default::default,
        )
    }
    pub fn {{ field.ident_clear }}(&mut self) {
        use self::_puroro::internal::field_type::NonRepeatedFieldType;
        <{{ field.rust_field_type }} as NonRepeatedFieldType>::clear(
            &mut self.{{ field.ident_struct_field }}, &mut self._bitfield,
        )
    }

    {%- endmatch %} {#- match field.rule #}
    {%- endfor %} {#- for field in fields #}

    {%- for oneof in oneofs %}
    {#- oneof group getter #}
    pub fn {{ oneof.ident_getter }}(&self) -> {{ oneof.rust_getter_type }} {
        todo!()
    }

    {%- for field in oneof.fields %}

    {#- oneof item getter #}
    pub fn {{ field.ident_opt_getter }}(&self) -> {{ field.rust_opt_getter_type }} {
        self.{{ oneof.ident_struct_field }}.{{ field.ident_opt_getter }}(&self._bitfield)
    }

    {%- endfor %} {#- for field in oneof.fields #}

    {%- endfor %} {#- for oneof in oneofs #}
}

impl self::_puroro::Message for {{ ident_struct }} {
    fn from_bytes_iter<I: ::std::iter::Iterator<Item=::std::io::Result<u8>>>(iter: I) -> self::_puroro::Result<Self> {
        #[allow(unused)]
        use ::std::result::Result::Ok;
        let mut msg: Self = ::std::default::Default::default();
        msg.merge_from_bytes_iter(iter)?;
        Ok(msg)
    }

    fn merge_from_bytes_iter<I: ::std::iter::Iterator<Item =::std::io::Result<u8>>>(&mut self, mut iter: I) -> self::_puroro::Result<()> {
        #[allow(unused)]
        use ::std::result::Result::Ok;
        #[allow(unused)]
        use ::std::option::Option::Some;
        while let Some((number, _field_data)) = self::_puroro::internal::ser::FieldData::from_bytes_iter(iter.by_ref())? {
            match number {
                {%- for field in fields %}
                {{ field.number }} => <
                    {{ field.rust_field_type }} as self::_puroro::internal::field_type::FieldType
                >::deser_from_iter(
                    &mut self.{{ field.ident_struct_field }},
                    &mut self._bitfield,
                    _field_data,
                )?,
                {%- endfor %} {#- for field in fields #}
                _ => todo!(),
            }
        }
        Ok(())
    }
}

impl ::std::clone::Clone for {{ ident_struct }} {
    fn clone(&self) -> Self {
        #[allow(unused)]
        use ::std::clone::Clone;
        Self {
            {%- for field in fields %}
            {{ field.ident_struct_field }}: Clone::clone(&self.{{ field.ident_struct_field }}),
            {%- endfor %} {#- for field in fields #}

            {%- for oneof in oneofs %}
            {{ oneof.ident_struct_field }}: self.{{ oneof.ident_struct_field }}._clone(&self._bitfield),
            {%- endfor %} {#- for oneof in oneofs #}

            _bitfield: Clone::clone(&self._bitfield),
        }
    }
}

impl ::std::fmt::Debug for {{ ident_struct }} {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::result::Result<(), ::std::fmt::Error> {
        fmt.debug_struct("{{ ident_struct }}")
            {%- for field in fields %}
            .field("{{ field.ident_struct_field }}", &self.{{ field.ident_getter }}())
            {%- endfor %} {#- for field in fields #}
            {#- TODO: oneof fields? #}
            .finish()
    }
}

impl ::std::ops::Drop for {{ ident_struct }} {
    fn drop(&mut self) {
        {#- We need to explicitly clear the oneof unions. #}
        {%- for oneof in oneofs %}
        self.{{ oneof.ident_struct_field }}._clear(&mut self._bitfield);
        {%- endfor %} {#- for oneof in oneofs #}
    }
}
