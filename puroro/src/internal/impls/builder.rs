//! # Builders and SingleField structs
//!
//! puroro also generates a set of structs which is postfixed by "SingleField***N***"
//! (***N*** is the number of the field), which stores only a certain field.
//! You normally don't need to directly use these structs, but instead you can use
//! the `Builder` struct which is also generated by puroro to compose a struct:
//!
//! ```rust
//! # use ::std::ops::Deref;
//! # trait MyMessageTrait {}
//! pub struct MyMessageBuilder<T>(T);
//! impl MyMessageBuilder<()> {
//!     pub fn new() -> Self {
//! #       todo!()
//!         /* ... */
//!     }
//! }
//! impl<T: MyMessageTrait> MyMessageBuilder<T> {
//!     pub fn append_my_number(self, value: i32)
//!     -> MyMessageBuilder<(T, MyMessageSingleField1)> {
//! #       todo!()
//!         /* ... */
//!     }
//!     pub fn append_my_name<U: Deref<Target=str>>(self, value: Vec<U>)
//!     -> MyMessageBuilder<(T, MyMessageSingleField2<U>)> {
//! #       todo!()
//!         /* ... */
//!     }
//!     pub fn append_my_child<U: MyMessageTrait>(self, value: U)
//!     -> MyMessageBuilder<(T, MyMessageSingleField3<U>)> {
//! #       todo!()
//!         /* ... */
//!     }
//! }
//!
//! pub struct MyMessageSingleField1 {
//!     pub my_number: i32,
//! }
//! pub struct MyMessageSingleField2<T: Deref<Target=str>> {
//!     pub my_name: Vec<T>,
//! }
//! pub struct MyMessageSingleField3<T: MyMessageTrait> {
//!     pub my_child: T,
//! }
//! impl MyMessageTrait for MyMessageSingleField1 { /* ... */ }
//! impl<T: Deref<Target=str>> MyMessageTrait for MyMessageSingleField2<T> { /* ... */ }
//! impl<T: MyMessageTrait> MyMessageTrait for MyMessageSingleField3<T> { /* ... */ }
//! ```
//!
//! Usage:
//!
//! ```ignored
//! let my_message = MyMessageBuilder::new()
//!     .append_my_number(10)
//!     .append_my_name(vec!["foo", "bar"])
//!     .build();
//! assert_eq!(10, my_message.my_number());
//! ```
//!
//! For every fields (including the fields of nested oneof fields),
//! a method `append_<fieldname>` is generated for the builder struct.
//!
