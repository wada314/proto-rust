// A generated source code by puroro library
// package google.protobuf
pub mod compiler;

pub mod _puroro_root {
    pub use super::super::_puroro_root::*;
}

pub use _puroro_simple_impl::DescriptorProto;
pub use _puroro_simple_impl::EnumDescriptorProto;
pub use _puroro_simple_impl::EnumOptions;
pub use _puroro_simple_impl::EnumValueDescriptorProto;
pub use _puroro_simple_impl::EnumValueOptions;
pub use _puroro_simple_impl::ExtensionRangeOptions;
pub use _puroro_simple_impl::FieldDescriptorProto;
pub use _puroro_simple_impl::FieldOptions;
pub use _puroro_simple_impl::FileDescriptorProto;
pub use _puroro_simple_impl::FileDescriptorSet;
pub use _puroro_simple_impl::FileOptions;
pub use _puroro_simple_impl::GeneratedCodeInfo;
pub use _puroro_simple_impl::MessageOptions;
pub use _puroro_simple_impl::MethodDescriptorProto;
pub use _puroro_simple_impl::MethodOptions;
pub use _puroro_simple_impl::OneofDescriptorProto;
pub use _puroro_simple_impl::OneofOptions;
pub use _puroro_simple_impl::ServiceDescriptorProto;
pub use _puroro_simple_impl::ServiceOptions;
pub use _puroro_simple_impl::SourceCodeInfo;
pub use _puroro_simple_impl::UninterpretedOption;
pub mod _puroro_simple_impl {
    mod _puroro_root {
        pub use super::super::_puroro_root::*;
    }
    pub struct FileDescriptorSet {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (0 + 31) / 32]>,
        file: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::FileDescriptorProto,
        >,
    }
    impl ::puroro::Message<FileDescriptorSet> for FileDescriptorSet {}

    impl FileDescriptorSet {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                file: ::std::default::Default::default(),
            }
        }
        pub fn file(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::FileDescriptorProto]
        {
            &self.file
        }
        pub fn file_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::FileDescriptorProto,
        > {
            &mut self.file
        }
    }

    impl super::_puroro_traits::FileDescriptorSetTrait for FileDescriptorSet {
        type FileMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::FileDescriptorProto where Self: 'this;
        type FileRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::FileDescriptorProto];

        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
            &self.file
        }
    }

    impl ::puroro::MessageRepresentativeImpl for FileDescriptorSet {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for FileDescriptorSet {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::FileDescriptorProto>
                >::deser_field(&mut self.file, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for FileDescriptorSet
    where
        Self: super::_puroro_traits::FileDescriptorSetTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorSetTrait>::FileMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorSetTrait>::file(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for FileDescriptorSet {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for FileDescriptorSet
    where
        Self: super::_puroro_traits::FileDescriptorSetTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("FileDescriptorSet")
                .field("file", &self.file())
                .finish()
        }
    }

    impl ::std::clone::Clone for FileDescriptorSet {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                file: ::std::clone::Clone::clone(&self.file),
            }
        }
    }

    impl ::std::cmp::PartialEq for FileDescriptorSet {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield && self.file == rhs.file && true
        }
    }
    pub struct FileDescriptorProto {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (3 + 31) / 32]>,
        name: ::puroro::internal::Bare<::std::string::String>,
        package: ::puroro::internal::Bare<::std::string::String>,
        dependency: ::std::vec::Vec<::std::string::String>,
        public_dependency: ::std::vec::Vec<i32>,
        weak_dependency: ::std::vec::Vec<i32>,
        message_type: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto,
        >,
        enum_type: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto,
        >,
        service: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceDescriptorProto,
        >,
        extension: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto,
        >,
        options: ::std::option::Option<
            ::std::boxed::Box<
                self::_puroro_root::google::protobuf::_puroro_simple_impl::FileOptions,
            >,
        >,
        source_code_info: ::std::option::Option<
            ::std::boxed::Box<
                self::_puroro_root::google::protobuf::_puroro_simple_impl::SourceCodeInfo,
            >,
        >,
        syntax: ::puroro::internal::Bare<::std::string::String>,
    }
    impl ::puroro::Message<FileDescriptorProto> for FileDescriptorProto {}

    impl FileDescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                package: ::std::default::Default::default(),
                dependency: ::std::default::Default::default(),
                public_dependency: ::std::default::Default::default(),
                weak_dependency: ::std::default::Default::default(),
                message_type: ::std::default::Default::default(),
                enum_type: ::std::default::Default::default(),
                service: ::std::default::Default::default(),
                extension: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                source_code_info: ::std::default::Default::default(),
                syntax: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn package_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.package)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_package(&self) -> bool {
            Self::package_opt(self).is_some()
        }

        pub fn package(&self) -> &'_ str {
            self.package_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn dependency(&self) -> &'_ [impl ::std::ops::Deref<Target = str> + ::std::fmt::Debug] {
            &self.dependency
        }
        pub fn public_dependency(&self) -> &'_ [i32] {
            &self.public_dependency
        }
        pub fn weak_dependency(&self) -> &'_ [i32] {
            &self.weak_dependency
        }
        pub fn message_type(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto]
        {
            &self.message_type
        }
        pub fn enum_type(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto]
        {
            &self.enum_type
        }
        pub fn service(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceDescriptorProto]
        {
            &self.service
        }
        pub fn extension(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto]
        {
            &self.extension
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::FileOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::FileOptions,
        > {
            self.options_opt()
        }
        pub fn source_code_info_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::SourceCodeInfo,
        > {
            self.source_code_info.as_deref()
        }

        pub fn has_source_code_info(&self) -> bool {
            Self::source_code_info_opt(self).is_some()
        }

        pub fn source_code_info(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::SourceCodeInfo,
        > {
            self.source_code_info_opt()
        }
        pub fn syntax_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.syntax)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_syntax(&self) -> bool {
            Self::syntax_opt(self).is_some()
        }

        pub fn syntax(&self) -> &'_ str {
            self.syntax_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn clear_package(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn package_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_package() {
                self.package = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.package
        }
        pub fn dependency_mut(&mut self) -> &'_ mut ::std::vec::Vec<::std::string::String> {
            &mut self.dependency
        }
        pub fn public_dependency_mut(&mut self) -> &'_ mut ::std::vec::Vec<i32> {
            &mut self.public_dependency
        }
        pub fn weak_dependency_mut(&mut self) -> &'_ mut ::std::vec::Vec<i32> {
            &mut self.weak_dependency
        }
        pub fn message_type_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto,
        > {
            &mut self.message_type
        }
        pub fn enum_type_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto,
        > {
            &mut self.enum_type
        }
        pub fn service_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceDescriptorProto,
        > {
            &mut self.service
        }
        pub fn extension_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto,
        > {
            &mut self.extension
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::FileOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
        pub fn clear_source_code_info(&mut self) {
            self.source_code_info = ::std::default::Default::default();
        }
        pub fn source_code_info_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::SourceCodeInfo
        {
            if !self.has_source_code_info() {
                self.source_code_info = ::std::default::Default::default();
            }
            self.source_code_info
                .get_or_insert_with(::std::default::Default::default)
        }
        pub fn clear_syntax(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn syntax_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_syntax() {
                self.syntax = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.syntax
        }
    }

    impl super::_puroro_traits::FileDescriptorProtoTrait for FileDescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileDescriptorProto>::name_opt(self)
        }
        fn package_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileDescriptorProto>::package_opt(self)
        }
        type DependencyRepeatedType<'this> = ::puroro::AsRefRepeatedField<
            'this,
            ::std::vec::Vec<::std::string::String>,
            ::std::string::String,
            str,
        >;

        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.dependency)
        }
        type PublicDependencyRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<'this, ::std::vec::Vec<i32>, i32, i32>;

        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::CloneThenIntoRepeatedField::new(&self.public_dependency)
        }
        type WeakDependencyRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<'this, ::std::vec::Vec<i32>, i32, i32>;

        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::CloneThenIntoRepeatedField::new(&self.weak_dependency)
        }
        type MessageTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto where Self: 'this;
        type MessageTypeRepeatedType<'this> =
            &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto];

        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            &self.message_type
        }
        type EnumTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto where Self: 'this;
        type EnumTypeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto];

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            &self.enum_type
        }
        type ServiceMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceDescriptorProto where Self: 'this;
        type ServiceRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceDescriptorProto];

        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            &self.service
        }
        type ExtensionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto where Self: 'this;
        type ExtensionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto];

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            &self.extension
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::FileOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::FileDescriptorProto>::options_opt(self)
        }
        type SourceCodeInfoMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::SourceCodeInfo where Self: 'this;
        fn source_code_info_opt<'this>(
            &'this self,
        ) -> Option<Self::SourceCodeInfoMessageType<'this>> {
            <self::FileDescriptorProto>::source_code_info_opt(self)
        }
        fn syntax_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileDescriptorProto>::syntax_opt(self)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for FileDescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for FileDescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.package, data)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::String
                >::deser_field(&mut self.dependency, data)
            }
            10 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Int32
                >::deser_field(&mut self.public_dependency, data)
            }
            11 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Int32
                >::deser_field(&mut self.weak_dependency, data)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto>
                >::deser_field(&mut self.message_type, data)
            }
            5 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto>
                >::deser_field(&mut self.enum_type, data)
            }
            6 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceDescriptorProto>
                >::deser_field(&mut self.service, data)
            }
            7 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto>
                >::deser_field(&mut self.extension, data)
            }
            8 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::FileOptions>>
                >::deser_field(&mut self.options, data)
            }
            9 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::SourceCodeInfo>>
                >::deser_field(&mut self.source_code_info, data)
            }
            12 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.syntax, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for FileDescriptorProto
    where
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::package_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::dependency(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::public_dependency(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::weak_dependency(self),
                11,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FileDescriptorProtoTrait>::MessageTypeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileDescriptorProtoTrait>::message_type(self),
            4,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::EnumTypeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::enum_type(self),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ServiceMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::service(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ExtensionMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::extension(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::options_opt(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileDescriptorProtoTrait>::source_code_info_opt(self),
            9,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::syntax_opt(self),
                12,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for FileDescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for FileDescriptorProto
    where
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("FileDescriptorProto")
                .field("name", &self.name_opt())
                .field("package", &self.package_opt())
                .field("dependency", &self.dependency())
                .field("public_dependency", &self.public_dependency())
                .field("weak_dependency", &self.weak_dependency())
                .field("message_type", &self.message_type())
                .field("enum_type", &self.enum_type())
                .field("service", &self.service())
                .field("extension", &self.extension())
                .field("options", &self.options())
                .field("source_code_info", &self.source_code_info())
                .field("syntax", &self.syntax_opt())
                .finish()
        }
    }

    impl ::std::clone::Clone for FileDescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                package: ::std::clone::Clone::clone(&self.package),
                dependency: ::std::clone::Clone::clone(&self.dependency),
                public_dependency: ::std::clone::Clone::clone(&self.public_dependency),
                weak_dependency: ::std::clone::Clone::clone(&self.weak_dependency),
                message_type: ::std::clone::Clone::clone(&self.message_type),
                enum_type: ::std::clone::Clone::clone(&self.enum_type),
                service: ::std::clone::Clone::clone(&self.service),
                extension: ::std::clone::Clone::clone(&self.extension),
                options: ::std::clone::Clone::clone(&self.options),
                source_code_info: ::std::clone::Clone::clone(&self.source_code_info),
                syntax: ::std::clone::Clone::clone(&self.syntax),
            }
        }
    }

    impl ::std::cmp::PartialEq for FileDescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && (self._bitfield.get(1).as_deref() != Some(&true) || self.package == rhs.package)
                && self.dependency == rhs.dependency
                && self.public_dependency == rhs.public_dependency
                && self.weak_dependency == rhs.weak_dependency
                && self.message_type == rhs.message_type
                && self.enum_type == rhs.enum_type
                && self.service == rhs.service
                && self.extension == rhs.extension
                && self.options == rhs.options
                && self.source_code_info == rhs.source_code_info
                && (self._bitfield.get(2).as_deref() != Some(&true) || self.syntax == rhs.syntax)
                && true
        }
    }
    pub struct DescriptorProto {
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (1 + 31) / 32],
    >,
    name: ::puroro::internal::Bare<::std::string::String>,
    field: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto>,
    extension: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto>,
    nested_type: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto>,
    enum_type: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto>,
    extension_range: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ExtensionRange>,
    oneof_decl: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofDescriptorProto>,
    options: ::std::option::Option<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::MessageOptions>>,
    reserved_range: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ReservedRange>,
    reserved_name: ::std::vec::Vec<::std::string::String>,
}
    impl ::puroro::Message<DescriptorProto> for DescriptorProto {}

    impl DescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                field: ::std::default::Default::default(),
                extension: ::std::default::Default::default(),
                nested_type: ::std::default::Default::default(),
                enum_type: ::std::default::Default::default(),
                extension_range: ::std::default::Default::default(),
                oneof_decl: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                reserved_range: ::std::default::Default::default(),
                reserved_name: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn field(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto]
        {
            &self.field
        }
        pub fn extension(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto]
        {
            &self.extension
        }
        pub fn nested_type(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto]
        {
            &self.nested_type
        }
        pub fn enum_type(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto]
        {
            &self.enum_type
        }
        pub fn extension_range(&self) -> &'_[self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ExtensionRange]{
            &self.extension_range
        }
        pub fn oneof_decl(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofDescriptorProto]
        {
            &self.oneof_decl
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::MessageOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::MessageOptions,
        > {
            self.options_opt()
        }
        pub fn reserved_range(&self) -> &'_[self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ReservedRange]{
            &self.reserved_range
        }
        pub fn reserved_name(
            &self,
        ) -> &'_ [impl ::std::ops::Deref<Target = str> + ::std::fmt::Debug] {
            &self.reserved_name
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn field_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto,
        > {
            &mut self.field
        }
        pub fn extension_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto,
        > {
            &mut self.extension
        }
        pub fn nested_type_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto,
        > {
            &mut self.nested_type
        }
        pub fn enum_type_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto,
        > {
            &mut self.enum_type
        }
        pub fn extension_range_mut(&mut self) -> &'_ mut ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ExtensionRange>{
            &mut self.extension_range
        }
        pub fn oneof_decl_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofDescriptorProto,
        > {
            &mut self.oneof_decl
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::MessageOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
        pub fn reserved_range_mut(&mut self) -> &'_ mut ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ReservedRange>{
            &mut self.reserved_range
        }
        pub fn reserved_name_mut(&mut self) -> &'_ mut ::std::vec::Vec<::std::string::String> {
            &mut self.reserved_name
        }
    }

    impl super::_puroro_traits::DescriptorProtoTrait for DescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::DescriptorProto>::name_opt(self)
        }
        type FieldMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto where Self: 'this;
        type FieldRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto];

        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            &self.field
        }
        type ExtensionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto where Self: 'this;
        type ExtensionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto];

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            &self.extension
        }
        type NestedTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto where Self: 'this;
        type NestedTypeRepeatedType<'this> =
            &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto];

        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            &self.nested_type
        }
        type EnumTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto where Self: 'this;
        type EnumTypeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto];

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            &self.enum_type
        }
        type ExtensionRangeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ExtensionRange where Self: 'this;
        type ExtensionRangeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ExtensionRange];

        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            &self.extension_range
        }
        type OneofDeclMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofDescriptorProto where Self: 'this;
        type OneofDeclRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofDescriptorProto];

        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            &self.oneof_decl
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::MessageOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::DescriptorProto>::options_opt(self)
        }
        type ReservedRangeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ReservedRange where Self: 'this;
        type ReservedRangeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ReservedRange];

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            &self.reserved_range
        }
        type ReservedNameRepeatedType<'this> = ::puroro::AsRefRepeatedField<
            'this,
            ::std::vec::Vec<::std::string::String>,
            ::std::string::String,
            str,
        >;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.reserved_name)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for DescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for DescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
            }
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto>
                >::deser_field(&mut self.field, data)
            }
            6 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldDescriptorProto>
                >::deser_field(&mut self.extension, data)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::DescriptorProto>
                >::deser_field(&mut self.nested_type, data)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumDescriptorProto>
                >::deser_field(&mut self.enum_type, data)
            }
            5 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ExtensionRange>
                >::deser_field(&mut self.extension_range, data)
            }
            8 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofDescriptorProto>
                >::deser_field(&mut self.oneof_decl, data)
            }
            7 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::MessageOptions>>
                >::deser_field(&mut self.options, data)
            }
            9 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_simple_impl::ReservedRange>
                >::deser_field(&mut self.reserved_range, data)
            }
            10 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::String
                >::deser_field(&mut self.reserved_name, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for DescriptorProto
    where
        Self: super::_puroro_traits::DescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::FieldMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::field(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::extension(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::NestedTypeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::nested_type(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::EnumTypeMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::enum_type(self),
                4,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionRangeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::DescriptorProtoTrait>::extension_range(self),
            5,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::OneofDeclMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::oneof_decl(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::OptionsMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::options_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::ReservedRangeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::reserved_range(self),
                9,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::reserved_name(self),
                10,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for DescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for DescriptorProto
    where
        Self: super::_puroro_traits::DescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("DescriptorProto")
                .field("name", &self.name_opt())
                .field("field", &self.field())
                .field("extension", &self.extension())
                .field("nested_type", &self.nested_type())
                .field("enum_type", &self.enum_type())
                .field("extension_range", &self.extension_range())
                .field("oneof_decl", &self.oneof_decl())
                .field("options", &self.options())
                .field("reserved_range", &self.reserved_range())
                .field("reserved_name", &self.reserved_name())
                .finish()
        }
    }

    impl ::std::clone::Clone for DescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                field: ::std::clone::Clone::clone(&self.field),
                extension: ::std::clone::Clone::clone(&self.extension),
                nested_type: ::std::clone::Clone::clone(&self.nested_type),
                enum_type: ::std::clone::Clone::clone(&self.enum_type),
                extension_range: ::std::clone::Clone::clone(&self.extension_range),
                oneof_decl: ::std::clone::Clone::clone(&self.oneof_decl),
                options: ::std::clone::Clone::clone(&self.options),
                reserved_range: ::std::clone::Clone::clone(&self.reserved_range),
                reserved_name: ::std::clone::Clone::clone(&self.reserved_name),
            }
        }
    }

    impl ::std::cmp::PartialEq for DescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && self.field == rhs.field
                && self.extension == rhs.extension
                && self.nested_type == rhs.nested_type
                && self.enum_type == rhs.enum_type
                && self.extension_range == rhs.extension_range
                && self.oneof_decl == rhs.oneof_decl
                && self.options == rhs.options
                && self.reserved_range == rhs.reserved_range
                && self.reserved_name == rhs.reserved_name
                && true
        }
    }
    pub struct ExtensionRangeOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (0 + 31) / 32]>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<ExtensionRangeOptions> for ExtensionRangeOptions {}

    impl ExtensionRangeOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::ExtensionRangeOptionsTrait for ExtensionRangeOptions {
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for ExtensionRangeOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for ExtensionRangeOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for ExtensionRangeOptions
    where
        Self: super::_puroro_traits::ExtensionRangeOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for ExtensionRangeOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for ExtensionRangeOptions
    where
        Self: super::_puroro_traits::ExtensionRangeOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("ExtensionRangeOptions")
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for ExtensionRangeOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for ExtensionRangeOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct FieldDescriptorProto {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (10 + 31) / 32]>,
        name: ::puroro::internal::Bare<::std::string::String>,
        number: ::puroro::internal::Bare<i32>,
        label: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        >,
        r#type: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        >,
        type_name: ::puroro::internal::Bare<::std::string::String>,
        extendee: ::puroro::internal::Bare<::std::string::String>,
        default_value: ::puroro::internal::Bare<::std::string::String>,
        oneof_index: ::puroro::internal::Bare<i32>,
        json_name: ::puroro::internal::Bare<::std::string::String>,
        options: ::std::option::Option<
            ::std::boxed::Box<
                self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldOptions,
            >,
        >,
        proto3_optional: ::puroro::internal::Bare<bool>,
    }
    impl ::puroro::Message<FieldDescriptorProto> for FieldDescriptorProto {}

    impl FieldDescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                number: ::std::default::Default::default(),
                label: ::std::default::Default::default(),
                r#type: ::std::default::Default::default(),
                type_name: ::std::default::Default::default(),
                extendee: ::std::default::Default::default(),
                default_value: ::std::default::Default::default(),
                oneof_index: ::std::default::Default::default(),
                json_name: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                proto3_optional: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn number_opt(&self) -> ::std::option::Option<i32> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.number.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_number(&self) -> bool {
            Self::number_opt(self).is_some()
        }

        pub fn number(&self) -> i32 {
            self.number_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn label_opt(
            &self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.label.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_label(&self) -> bool {
            Self::label_opt(self).is_some()
        }

        pub fn label(
            &self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label
        {
            self.label_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn type_opt(
            &self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.r#type.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_type(&self) -> bool {
            Self::type_opt(self).is_some()
        }

        pub fn r#type(
            &self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type
        {
            self.type_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn type_name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.type_name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_type_name(&self) -> bool {
            Self::type_name_opt(self).is_some()
        }

        pub fn type_name(&self) -> &'_ str {
            self.type_name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn extendee_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.extendee)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_extendee(&self) -> bool {
            Self::extendee_opt(self).is_some()
        }

        pub fn extendee(&self) -> &'_ str {
            self.extendee_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn default_value_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(6).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.default_value)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_default_value(&self) -> bool {
            Self::default_value_opt(self).is_some()
        }

        pub fn default_value(&self) -> &'_ str {
            self.default_value_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn oneof_index_opt(&self) -> ::std::option::Option<i32> {
            if self._bitfield.get(7).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.oneof_index.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_oneof_index(&self) -> bool {
            Self::oneof_index_opt(self).is_some()
        }

        pub fn oneof_index(&self) -> i32 {
            self.oneof_index_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn json_name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(8).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.json_name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_json_name(&self) -> bool {
            Self::json_name_opt(self).is_some()
        }

        pub fn json_name(&self) -> &'_ str {
            self.json_name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldOptions,
        > {
            self.options_opt()
        }
        pub fn proto3_optional_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(9).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.proto3_optional.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_proto3_optional(&self) -> bool {
            Self::proto3_optional_opt(self).is_some()
        }

        pub fn proto3_optional(&self) -> bool {
            self.proto3_optional_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn clear_number(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn number_mut(&mut self) -> &'_ mut i32 {
            if !self.has_number() {
                self.number = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.number
        }
        pub fn clear_label(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn label_mut(&mut self) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label{
            if !self.has_label() {
                self.label = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.label
        }
        pub fn clear_type(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn type_mut(&mut self) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type{
            if !self.has_type() {
                self.r#type = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.r#type
        }
        pub fn clear_type_name(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn type_name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_type_name() {
                self.type_name = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.type_name
        }
        pub fn clear_extendee(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn extendee_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_extendee() {
                self.extendee = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            &mut self.extendee
        }
        pub fn clear_default_value(&mut self) {
            self._bitfield.set(6, false);
        }
        pub fn default_value_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_default_value() {
                self.default_value = ::std::default::Default::default();
                self._bitfield.set(6, true);
            }
            &mut self.default_value
        }
        pub fn clear_oneof_index(&mut self) {
            self._bitfield.set(7, false);
        }
        pub fn oneof_index_mut(&mut self) -> &'_ mut i32 {
            if !self.has_oneof_index() {
                self.oneof_index = ::std::default::Default::default();
                self._bitfield.set(7, true);
            }
            &mut self.oneof_index
        }
        pub fn clear_json_name(&mut self) {
            self._bitfield.set(8, false);
        }
        pub fn json_name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_json_name() {
                self.json_name = ::std::default::Default::default();
                self._bitfield.set(8, true);
            }
            &mut self.json_name
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
        pub fn clear_proto3_optional(&mut self) {
            self._bitfield.set(9, false);
        }
        pub fn proto3_optional_mut(&mut self) -> &'_ mut bool {
            if !self.has_proto3_optional() {
                self.proto3_optional = ::std::default::Default::default();
                self._bitfield.set(9, true);
            }
            &mut self.proto3_optional
        }
    }

    impl super::_puroro_traits::FieldDescriptorProtoTrait for FieldDescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FieldDescriptorProto>::name_opt(self)
        }
        fn number_opt<'this>(&'this self) -> Option<i32> {
            <self::FieldDescriptorProto>::number_opt(self)
        }
        fn label_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            <self::FieldDescriptorProto>::label_opt(self)
        }
        fn type_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            <self::FieldDescriptorProto>::type_opt(self)
        }
        fn type_name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FieldDescriptorProto>::type_name_opt(self)
        }
        fn extendee_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FieldDescriptorProto>::extendee_opt(self)
        }
        fn default_value_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FieldDescriptorProto>::default_value_opt(self)
        }
        fn oneof_index_opt<'this>(&'this self) -> Option<i32> {
            <self::FieldDescriptorProto>::oneof_index_opt(self)
        }
        fn json_name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FieldDescriptorProto>::json_name_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::FieldDescriptorProto>::options_opt(self)
        }
        fn proto3_optional_opt<'this>(&'this self) -> Option<bool> {
            <self::FieldDescriptorProto>::proto3_optional_opt(self)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for FieldDescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for FieldDescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
                1 => {
                    self._bitfield.set(0, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
                }
                3 => {
                    self._bitfield.set(1, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int32
                >::deser_field(&mut self.number, data)
                }
                4 => {
                    self._bitfield.set(2, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label>
                >::deser_field(&mut self.label, data)
                }
                5 => {
                    self._bitfield.set(3, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type>
                >::deser_field(&mut self.r#type, data)
                }
                6 => {
                    self._bitfield.set(4, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.type_name, data)
                }
                2 => {
                    self._bitfield.set(5, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.extendee, data)
                }
                7 => {
                    self._bitfield.set(6, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.default_value, data)
                }
                9 => {
                    self._bitfield.set(7, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int32
                >::deser_field(&mut self.oneof_index, data)
                }
                10 => {
                    self._bitfield.set(8, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.json_name, data)
                }
                8 => DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional,
                    ::puroro::tags::Message<
                        ::std::boxed::Box<
                            self::_puroro_root::google::protobuf::_puroro_simple_impl::FieldOptions,
                        >,
                    >,
                >::deser_field(&mut self.options, data),
                17 => {
                    self._bitfield.set(9, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.proto3_optional, data)
                }

                _ => unimplemented!("TODO: This case should be handled properly..."),
            }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for FieldDescriptorProto
    where
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::number_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label>
        >::ser_field(
            <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::label_opt(self),
            4,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type>
        >::ser_field(
            <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::type_opt(self),
            5,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::type_name_opt(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::extendee_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::default_value_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::oneof_index_opt(self),
                9,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::json_name_opt(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::options_opt(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::proto3_optional_opt(
                    self,
                ),
                17,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for FieldDescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for FieldDescriptorProto
    where
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("FieldDescriptorProto")
                .field("name", &self.name_opt())
                .field("number", &self.number_opt())
                .field("label", &self.label_opt())
                .field("r#type", &self.type_opt())
                .field("type_name", &self.type_name_opt())
                .field("extendee", &self.extendee_opt())
                .field("default_value", &self.default_value_opt())
                .field("oneof_index", &self.oneof_index_opt())
                .field("json_name", &self.json_name_opt())
                .field("options", &self.options())
                .field("proto3_optional", &self.proto3_optional_opt())
                .finish()
        }
    }

    impl ::std::clone::Clone for FieldDescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                number: ::std::clone::Clone::clone(&self.number),
                label: ::std::clone::Clone::clone(&self.label),
                r#type: ::std::clone::Clone::clone(&self.r#type),
                type_name: ::std::clone::Clone::clone(&self.type_name),
                extendee: ::std::clone::Clone::clone(&self.extendee),
                default_value: ::std::clone::Clone::clone(&self.default_value),
                oneof_index: ::std::clone::Clone::clone(&self.oneof_index),
                json_name: ::std::clone::Clone::clone(&self.json_name),
                options: ::std::clone::Clone::clone(&self.options),
                proto3_optional: ::std::clone::Clone::clone(&self.proto3_optional),
            }
        }
    }

    impl ::std::cmp::PartialEq for FieldDescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && (self._bitfield.get(1).as_deref() != Some(&true) || self.number == rhs.number)
                && (self._bitfield.get(2).as_deref() != Some(&true) || self.label == rhs.label)
                && (self._bitfield.get(3).as_deref() != Some(&true) || self.r#type == rhs.r#type)
                && (self._bitfield.get(4).as_deref() != Some(&true)
                    || self.type_name == rhs.type_name)
                && (self._bitfield.get(5).as_deref() != Some(&true)
                    || self.extendee == rhs.extendee)
                && (self._bitfield.get(6).as_deref() != Some(&true)
                    || self.default_value == rhs.default_value)
                && (self._bitfield.get(7).as_deref() != Some(&true)
                    || self.oneof_index == rhs.oneof_index)
                && (self._bitfield.get(8).as_deref() != Some(&true)
                    || self.json_name == rhs.json_name)
                && self.options == rhs.options
                && (self._bitfield.get(9).as_deref() != Some(&true)
                    || self.proto3_optional == rhs.proto3_optional)
                && true
        }
    }
    pub struct OneofDescriptorProto {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        name: ::puroro::internal::Bare<::std::string::String>,
        options: ::std::option::Option<
            ::std::boxed::Box<
                self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofOptions,
            >,
        >,
    }
    impl ::puroro::Message<OneofDescriptorProto> for OneofDescriptorProto {}

    impl OneofDescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofOptions,
        > {
            self.options_opt()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
    }

    impl super::_puroro_traits::OneofDescriptorProtoTrait for OneofDescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::OneofDescriptorProto>::name_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::OneofDescriptorProto>::options_opt(self)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for OneofDescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for OneofDescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
                1 => {
                    self._bitfield.set(0, true);
                    DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
                }
                2 => DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional,
                    ::puroro::tags::Message<
                        ::std::boxed::Box<
                            self::_puroro_root::google::protobuf::_puroro_simple_impl::OneofOptions,
                        >,
                    >,
                >::deser_field(&mut self.options, data),

                _ => unimplemented!("TODO: This case should be handled properly..."),
            }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for OneofDescriptorProto
    where
        Self: super::_puroro_traits::OneofDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::options_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for OneofDescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for OneofDescriptorProto
    where
        Self: super::_puroro_traits::OneofDescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("OneofDescriptorProto")
                .field("name", &self.name_opt())
                .field("options", &self.options())
                .finish()
        }
    }

    impl ::std::clone::Clone for OneofDescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    impl ::std::cmp::PartialEq for OneofDescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && self.options == rhs.options
                && true
        }
    }
    pub struct EnumDescriptorProto {
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (1 + 31) / 32],
    >,
    name: ::puroro::internal::Bare<::std::string::String>,
    value: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueDescriptorProto>,
    options: ::std::option::Option<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumOptions>>,
    reserved_range: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_simple_impl::EnumReservedRange>,
    reserved_name: ::std::vec::Vec<::std::string::String>,
}
    impl ::puroro::Message<EnumDescriptorProto> for EnumDescriptorProto {}

    impl EnumDescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                value: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                reserved_range: ::std::default::Default::default(),
                reserved_name: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn value(&self) -> &'_[self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueDescriptorProto]{
            &self.value
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumOptions,
        > {
            self.options_opt()
        }
        pub fn reserved_range(&self) -> &'_[self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_simple_impl::EnumReservedRange]{
            &self.reserved_range
        }
        pub fn reserved_name(
            &self,
        ) -> &'_ [impl ::std::ops::Deref<Target = str> + ::std::fmt::Debug] {
            &self.reserved_name
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn value_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueDescriptorProto,
        > {
            &mut self.value
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
        pub fn reserved_range_mut(&mut self) -> &'_ mut ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_simple_impl::EnumReservedRange>{
            &mut self.reserved_range
        }
        pub fn reserved_name_mut(&mut self) -> &'_ mut ::std::vec::Vec<::std::string::String> {
            &mut self.reserved_name
        }
    }

    impl super::_puroro_traits::EnumDescriptorProtoTrait for EnumDescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::EnumDescriptorProto>::name_opt(self)
        }
        type ValueMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueDescriptorProto where Self: 'this;
        type ValueRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueDescriptorProto];

        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            &self.value
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::EnumDescriptorProto>::options_opt(self)
        }
        type ReservedRangeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_simple_impl::EnumReservedRange where Self: 'this;
        type ReservedRangeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_simple_impl::EnumReservedRange];

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            &self.reserved_range
        }
        type ReservedNameRepeatedType<'this> = ::puroro::AsRefRepeatedField<
            'this,
            ::std::vec::Vec<::std::string::String>,
            ::std::string::String,
            str,
        >;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.reserved_name)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for EnumDescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for EnumDescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
            }
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueDescriptorProto>
                >::deser_field(&mut self.value, data)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumOptions>>
                >::deser_field(&mut self.options, data)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_simple_impl::EnumReservedRange>
                >::deser_field(&mut self.reserved_range, data)
            }
            5 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::String
                >::deser_field(&mut self.reserved_name, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for EnumDescriptorProto
    where
        Self: super::_puroro_traits::EnumDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ValueMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::value(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::options_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ReservedRangeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::reserved_range(self),
            4,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::reserved_name(self),
                5,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for EnumDescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for EnumDescriptorProto
    where
        Self: super::_puroro_traits::EnumDescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("EnumDescriptorProto")
                .field("name", &self.name_opt())
                .field("value", &self.value())
                .field("options", &self.options())
                .field("reserved_range", &self.reserved_range())
                .field("reserved_name", &self.reserved_name())
                .finish()
        }
    }

    impl ::std::clone::Clone for EnumDescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                value: ::std::clone::Clone::clone(&self.value),
                options: ::std::clone::Clone::clone(&self.options),
                reserved_range: ::std::clone::Clone::clone(&self.reserved_range),
                reserved_name: ::std::clone::Clone::clone(&self.reserved_name),
            }
        }
    }

    impl ::std::cmp::PartialEq for EnumDescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && self.value == rhs.value
                && self.options == rhs.options
                && self.reserved_range == rhs.reserved_range
                && self.reserved_name == rhs.reserved_name
                && true
        }
    }
    pub struct EnumValueDescriptorProto {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (2 + 31) / 32]>,
        name: ::puroro::internal::Bare<::std::string::String>,
        number: ::puroro::internal::Bare<i32>,
        options: ::std::option::Option<
            ::std::boxed::Box<
                self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueOptions,
            >,
        >,
    }
    impl ::puroro::Message<EnumValueDescriptorProto> for EnumValueDescriptorProto {}

    impl EnumValueDescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                number: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn number_opt(&self) -> ::std::option::Option<i32> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.number.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_number(&self) -> bool {
            Self::number_opt(self).is_some()
        }

        pub fn number(&self) -> i32 {
            self.number_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueOptions,
        > {
            self.options_opt()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn clear_number(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn number_mut(&mut self) -> &'_ mut i32 {
            if !self.has_number() {
                self.number = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.number
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
    }

    impl super::_puroro_traits::EnumValueDescriptorProtoTrait for EnumValueDescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::EnumValueDescriptorProto>::name_opt(self)
        }
        fn number_opt<'this>(&'this self) -> Option<i32> {
            <self::EnumValueDescriptorProto>::number_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::EnumValueDescriptorProto>::options_opt(self)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for EnumValueDescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for EnumValueDescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int32
                >::deser_field(&mut self.number, data)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::EnumValueOptions>>
                >::deser_field(&mut self.options, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for EnumValueDescriptorProto
    where
        Self: super::_puroro_traits::EnumValueDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::number_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::OptionsMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::options_opt(self),
            3,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for EnumValueDescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for EnumValueDescriptorProto
    where
        Self: super::_puroro_traits::EnumValueDescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("EnumValueDescriptorProto")
                .field("name", &self.name_opt())
                .field("number", &self.number_opt())
                .field("options", &self.options())
                .finish()
        }
    }

    impl ::std::clone::Clone for EnumValueDescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                number: ::std::clone::Clone::clone(&self.number),
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    impl ::std::cmp::PartialEq for EnumValueDescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && (self._bitfield.get(1).as_deref() != Some(&true) || self.number == rhs.number)
                && self.options == rhs.options
                && true
        }
    }
    pub struct ServiceDescriptorProto {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        name: ::puroro::internal::Bare<::std::string::String>,
        method: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodDescriptorProto,
        >,
        options: ::std::option::Option<
            ::std::boxed::Box<
                self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceOptions,
            >,
        >,
    }
    impl ::puroro::Message<ServiceDescriptorProto> for ServiceDescriptorProto {}

    impl ServiceDescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                method: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn method(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodDescriptorProto]
        {
            &self.method
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceOptions,
        > {
            self.options_opt()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn method_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodDescriptorProto,
        > {
            &mut self.method
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
    }

    impl super::_puroro_traits::ServiceDescriptorProtoTrait for ServiceDescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::ServiceDescriptorProto>::name_opt(self)
        }
        type MethodMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodDescriptorProto where Self: 'this;
        type MethodRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodDescriptorProto];

        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            &self.method
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::ServiceDescriptorProto>::options_opt(self)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for ServiceDescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for ServiceDescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
            }
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodDescriptorProto>
                >::deser_field(&mut self.method, data)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::ServiceOptions>>
                >::deser_field(&mut self.options, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for ServiceDescriptorProto
    where
        Self: super::_puroro_traits::ServiceDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::MethodMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::method(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::OptionsMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::options_opt(self),
            3,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for ServiceDescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for ServiceDescriptorProto
    where
        Self: super::_puroro_traits::ServiceDescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("ServiceDescriptorProto")
                .field("name", &self.name_opt())
                .field("method", &self.method())
                .field("options", &self.options())
                .finish()
        }
    }

    impl ::std::clone::Clone for ServiceDescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                method: ::std::clone::Clone::clone(&self.method),
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    impl ::std::cmp::PartialEq for ServiceDescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && self.method == rhs.method
                && self.options == rhs.options
                && true
        }
    }
    pub struct MethodDescriptorProto {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (5 + 31) / 32]>,
        name: ::puroro::internal::Bare<::std::string::String>,
        input_type: ::puroro::internal::Bare<::std::string::String>,
        output_type: ::puroro::internal::Bare<::std::string::String>,
        options: ::std::option::Option<
            ::std::boxed::Box<
                self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodOptions,
            >,
        >,
        client_streaming: ::puroro::internal::Bare<bool>,
        server_streaming: ::puroro::internal::Bare<bool>,
    }
    impl ::puroro::Message<MethodDescriptorProto> for MethodDescriptorProto {}

    impl MethodDescriptorProto {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                input_type: ::std::default::Default::default(),
                output_type: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                client_streaming: ::std::default::Default::default(),
                server_streaming: ::std::default::Default::default(),
            }
        }
        pub fn name_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_name(&self) -> bool {
            Self::name_opt(self).is_some()
        }

        pub fn name(&self) -> &'_ str {
            self.name_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn input_type_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.input_type)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_input_type(&self) -> bool {
            Self::input_type_opt(self).is_some()
        }

        pub fn input_type(&self) -> &'_ str {
            self.input_type_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn output_type_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.output_type)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_output_type(&self) -> bool {
            Self::output_type_opt(self).is_some()
        }

        pub fn output_type(&self) -> &'_ str {
            self.output_type_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn options_opt(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodOptions,
        > {
            self.options.as_deref()
        }

        pub fn has_options(&self) -> bool {
            Self::options_opt(self).is_some()
        }

        pub fn options(
            &self,
        ) -> ::std::option::Option<
            &'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodOptions,
        > {
            self.options_opt()
        }
        pub fn client_streaming_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.client_streaming.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_client_streaming(&self) -> bool {
            Self::client_streaming_opt(self).is_some()
        }

        pub fn client_streaming(&self) -> bool {
            self.client_streaming_opt().unwrap_or(false)
        }
        pub fn server_streaming_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.server_streaming.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_server_streaming(&self) -> bool {
            Self::server_streaming_opt(self).is_some()
        }

        pub fn server_streaming(&self) -> bool {
            self.server_streaming_opt().unwrap_or(false)
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.name
        }
        pub fn clear_input_type(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn input_type_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_input_type() {
                self.input_type = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.input_type
        }
        pub fn clear_output_type(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn output_type_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_output_type() {
                self.output_type = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.output_type
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodOptions
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            self.options
                .get_or_insert_with(::std::default::Default::default)
        }
        pub fn clear_client_streaming(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn client_streaming_mut(&mut self) -> &'_ mut bool {
            if !self.has_client_streaming() {
                self.client_streaming = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.client_streaming
        }
        pub fn clear_server_streaming(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn server_streaming_mut(&mut self) -> &'_ mut bool {
            if !self.has_server_streaming() {
                self.server_streaming = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.server_streaming
        }
    }

    impl super::_puroro_traits::MethodDescriptorProtoTrait for MethodDescriptorProto {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <self::MethodDescriptorProto>::name_opt(self)
        }
        fn input_type_opt<'this>(&'this self) -> Option<&'this str> {
            <self::MethodDescriptorProto>::input_type_opt(self)
        }
        fn output_type_opt<'this>(&'this self) -> Option<&'this str> {
            <self::MethodDescriptorProto>::output_type_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodOptions where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <self::MethodDescriptorProto>::options_opt(self)
        }
        fn client_streaming_opt<'this>(&'this self) -> Option<bool> {
            <self::MethodDescriptorProto>::client_streaming_opt(self)
        }
        fn server_streaming_opt<'this>(&'this self) -> Option<bool> {
            <self::MethodDescriptorProto>::server_streaming_opt(self)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for MethodDescriptorProto {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for MethodDescriptorProto {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.input_type, data)
            }
            3 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.output_type, data)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::MethodOptions>>
                >::deser_field(&mut self.options, data)
            }
            5 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.client_streaming, data)
            }
            6 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.server_streaming, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for MethodDescriptorProto
    where
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::input_type_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::output_type_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::options_opt(self),
                4,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::client_streaming_opt(
                    self,
                ),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::server_streaming_opt(
                    self,
                ),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for MethodDescriptorProto {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for MethodDescriptorProto
    where
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("MethodDescriptorProto")
                .field("name", &self.name_opt())
                .field("input_type", &self.input_type_opt())
                .field("output_type", &self.output_type_opt())
                .field("options", &self.options())
                .field("client_streaming", &self.client_streaming_opt())
                .field("server_streaming", &self.server_streaming_opt())
                .finish()
        }
    }

    impl ::std::clone::Clone for MethodDescriptorProto {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                input_type: ::std::clone::Clone::clone(&self.input_type),
                output_type: ::std::clone::Clone::clone(&self.output_type),
                options: ::std::clone::Clone::clone(&self.options),
                client_streaming: ::std::clone::Clone::clone(&self.client_streaming),
                server_streaming: ::std::clone::Clone::clone(&self.server_streaming),
            }
        }
    }

    impl ::std::cmp::PartialEq for MethodDescriptorProto {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.name == rhs.name)
                && (self._bitfield.get(1).as_deref() != Some(&true)
                    || self.input_type == rhs.input_type)
                && (self._bitfield.get(2).as_deref() != Some(&true)
                    || self.output_type == rhs.output_type)
                && self.options == rhs.options
                && (self._bitfield.get(3).as_deref() != Some(&true)
                    || self.client_streaming == rhs.client_streaming)
                && (self._bitfield.get(4).as_deref() != Some(&true)
                    || self.server_streaming == rhs.server_streaming)
                && true
        }
    }
    pub struct FileOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (20 + 31) / 32]>,
        java_package: ::puroro::internal::Bare<::std::string::String>,
        java_outer_classname: ::puroro::internal::Bare<::std::string::String>,
        java_multiple_files: ::puroro::internal::Bare<bool>,
        java_generate_equals_and_hash: ::puroro::internal::Bare<bool>,
        java_string_check_utf8: ::puroro::internal::Bare<bool>,
        optimize_for: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        >,
        go_package: ::puroro::internal::Bare<::std::string::String>,
        cc_generic_services: ::puroro::internal::Bare<bool>,
        java_generic_services: ::puroro::internal::Bare<bool>,
        py_generic_services: ::puroro::internal::Bare<bool>,
        php_generic_services: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        cc_enable_arenas: ::puroro::internal::Bare<bool>,
        objc_class_prefix: ::puroro::internal::Bare<::std::string::String>,
        csharp_namespace: ::puroro::internal::Bare<::std::string::String>,
        swift_prefix: ::puroro::internal::Bare<::std::string::String>,
        php_class_prefix: ::puroro::internal::Bare<::std::string::String>,
        php_namespace: ::puroro::internal::Bare<::std::string::String>,
        php_metadata_namespace: ::puroro::internal::Bare<::std::string::String>,
        ruby_package: ::puroro::internal::Bare<::std::string::String>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<FileOptions> for FileOptions {}

    impl FileOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                java_package: ::std::default::Default::default(),
                java_outer_classname: ::std::default::Default::default(),
                java_multiple_files: ::std::default::Default::default(),
                java_generate_equals_and_hash: ::std::default::Default::default(),
                java_string_check_utf8: ::std::default::Default::default(),
                optimize_for: ::std::default::Default::default(),
                go_package: ::std::default::Default::default(),
                cc_generic_services: ::std::default::Default::default(),
                java_generic_services: ::std::default::Default::default(),
                py_generic_services: ::std::default::Default::default(),
                php_generic_services: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                cc_enable_arenas: ::std::default::Default::default(),
                objc_class_prefix: ::std::default::Default::default(),
                csharp_namespace: ::std::default::Default::default(),
                swift_prefix: ::std::default::Default::default(),
                php_class_prefix: ::std::default::Default::default(),
                php_namespace: ::std::default::Default::default(),
                php_metadata_namespace: ::std::default::Default::default(),
                ruby_package: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn java_package_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.java_package)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_java_package(&self) -> bool {
            Self::java_package_opt(self).is_some()
        }

        pub fn java_package(&self) -> &'_ str {
            self.java_package_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn java_outer_classname_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.java_outer_classname)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_java_outer_classname(&self) -> bool {
            Self::java_outer_classname_opt(self).is_some()
        }

        pub fn java_outer_classname(&self) -> &'_ str {
            self.java_outer_classname_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn java_multiple_files_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_multiple_files.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_java_multiple_files(&self) -> bool {
            Self::java_multiple_files_opt(self).is_some()
        }

        pub fn java_multiple_files(&self) -> bool {
            self.java_multiple_files_opt().unwrap_or(false)
        }
        pub fn java_generate_equals_and_hash_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_generate_equals_and_hash.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_java_generate_equals_and_hash(&self) -> bool {
            Self::java_generate_equals_and_hash_opt(self).is_some()
        }

        pub fn java_generate_equals_and_hash(&self) -> bool {
            self.java_generate_equals_and_hash_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn java_string_check_utf8_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_string_check_utf8.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_java_string_check_utf8(&self) -> bool {
            Self::java_string_check_utf8_opt(self).is_some()
        }

        pub fn java_string_check_utf8(&self) -> bool {
            self.java_string_check_utf8_opt().unwrap_or(false)
        }
        pub fn optimize_for_opt(
            &self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        > {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.optimize_for.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_optimize_for(&self) -> bool {
            Self::optimize_for_opt(self).is_some()
        }

        pub fn optimize_for(
            &self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode
        {
            self.optimize_for_opt().unwrap_or(
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode::Speed
        )
        }
        pub fn go_package_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(6).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.go_package)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_go_package(&self) -> bool {
            Self::go_package_opt(self).is_some()
        }

        pub fn go_package(&self) -> &'_ str {
            self.go_package_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn cc_generic_services_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(7).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.cc_generic_services.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_cc_generic_services(&self) -> bool {
            Self::cc_generic_services_opt(self).is_some()
        }

        pub fn cc_generic_services(&self) -> bool {
            self.cc_generic_services_opt().unwrap_or(false)
        }
        pub fn java_generic_services_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(8).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_generic_services.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_java_generic_services(&self) -> bool {
            Self::java_generic_services_opt(self).is_some()
        }

        pub fn java_generic_services(&self) -> bool {
            self.java_generic_services_opt().unwrap_or(false)
        }
        pub fn py_generic_services_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(9).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.py_generic_services.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_py_generic_services(&self) -> bool {
            Self::py_generic_services_opt(self).is_some()
        }

        pub fn py_generic_services(&self) -> bool {
            self.py_generic_services_opt().unwrap_or(false)
        }
        pub fn php_generic_services_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(10).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.php_generic_services.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_php_generic_services(&self) -> bool {
            Self::php_generic_services_opt(self).is_some()
        }

        pub fn php_generic_services(&self) -> bool {
            self.php_generic_services_opt().unwrap_or(false)
        }
        pub fn deprecated_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(11).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_deprecated(&self) -> bool {
            Self::deprecated_opt(self).is_some()
        }

        pub fn deprecated(&self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        pub fn cc_enable_arenas_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(12).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.cc_enable_arenas.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_cc_enable_arenas(&self) -> bool {
            Self::cc_enable_arenas_opt(self).is_some()
        }

        pub fn cc_enable_arenas(&self) -> bool {
            self.cc_enable_arenas_opt().unwrap_or(true)
        }
        pub fn objc_class_prefix_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(13).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.objc_class_prefix)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_objc_class_prefix(&self) -> bool {
            Self::objc_class_prefix_opt(self).is_some()
        }

        pub fn objc_class_prefix(&self) -> &'_ str {
            self.objc_class_prefix_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn csharp_namespace_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(14).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.csharp_namespace)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_csharp_namespace(&self) -> bool {
            Self::csharp_namespace_opt(self).is_some()
        }

        pub fn csharp_namespace(&self) -> &'_ str {
            self.csharp_namespace_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn swift_prefix_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(15).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.swift_prefix)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_swift_prefix(&self) -> bool {
            Self::swift_prefix_opt(self).is_some()
        }

        pub fn swift_prefix(&self) -> &'_ str {
            self.swift_prefix_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn php_class_prefix_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(16).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.php_class_prefix)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_php_class_prefix(&self) -> bool {
            Self::php_class_prefix_opt(self).is_some()
        }

        pub fn php_class_prefix(&self) -> &'_ str {
            self.php_class_prefix_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn php_namespace_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(17).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.php_namespace)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_php_namespace(&self) -> bool {
            Self::php_namespace_opt(self).is_some()
        }

        pub fn php_namespace(&self) -> &'_ str {
            self.php_namespace_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn php_metadata_namespace_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(18).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.php_metadata_namespace)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_php_metadata_namespace(&self) -> bool {
            Self::php_metadata_namespace_opt(self).is_some()
        }

        pub fn php_metadata_namespace(&self) -> &'_ str {
            self.php_metadata_namespace_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn ruby_package_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(19).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.ruby_package)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_ruby_package(&self) -> bool {
            Self::ruby_package_opt(self).is_some()
        }

        pub fn ruby_package(&self) -> &'_ str {
            self.ruby_package_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn clear_java_package(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn java_package_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_java_package() {
                self.java_package = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.java_package
        }
        pub fn clear_java_outer_classname(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn java_outer_classname_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_java_outer_classname() {
                self.java_outer_classname = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.java_outer_classname
        }
        pub fn clear_java_multiple_files(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn java_multiple_files_mut(&mut self) -> &'_ mut bool {
            if !self.has_java_multiple_files() {
                self.java_multiple_files = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.java_multiple_files
        }
        pub fn clear_java_generate_equals_and_hash(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn java_generate_equals_and_hash_mut(&mut self) -> &'_ mut bool {
            if !self.has_java_generate_equals_and_hash() {
                self.java_generate_equals_and_hash = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.java_generate_equals_and_hash
        }
        pub fn clear_java_string_check_utf8(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn java_string_check_utf8_mut(&mut self) -> &'_ mut bool {
            if !self.has_java_string_check_utf8() {
                self.java_string_check_utf8 = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.java_string_check_utf8
        }
        pub fn clear_optimize_for(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn optimize_for_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode
        {
            if !self.has_optimize_for() {
                self.optimize_for = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            &mut self.optimize_for
        }
        pub fn clear_go_package(&mut self) {
            self._bitfield.set(6, false);
        }
        pub fn go_package_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_go_package() {
                self.go_package = ::std::default::Default::default();
                self._bitfield.set(6, true);
            }
            &mut self.go_package
        }
        pub fn clear_cc_generic_services(&mut self) {
            self._bitfield.set(7, false);
        }
        pub fn cc_generic_services_mut(&mut self) -> &'_ mut bool {
            if !self.has_cc_generic_services() {
                self.cc_generic_services = ::std::default::Default::default();
                self._bitfield.set(7, true);
            }
            &mut self.cc_generic_services
        }
        pub fn clear_java_generic_services(&mut self) {
            self._bitfield.set(8, false);
        }
        pub fn java_generic_services_mut(&mut self) -> &'_ mut bool {
            if !self.has_java_generic_services() {
                self.java_generic_services = ::std::default::Default::default();
                self._bitfield.set(8, true);
            }
            &mut self.java_generic_services
        }
        pub fn clear_py_generic_services(&mut self) {
            self._bitfield.set(9, false);
        }
        pub fn py_generic_services_mut(&mut self) -> &'_ mut bool {
            if !self.has_py_generic_services() {
                self.py_generic_services = ::std::default::Default::default();
                self._bitfield.set(9, true);
            }
            &mut self.py_generic_services
        }
        pub fn clear_php_generic_services(&mut self) {
            self._bitfield.set(10, false);
        }
        pub fn php_generic_services_mut(&mut self) -> &'_ mut bool {
            if !self.has_php_generic_services() {
                self.php_generic_services = ::std::default::Default::default();
                self._bitfield.set(10, true);
            }
            &mut self.php_generic_services
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(11, false);
        }
        pub fn deprecated_mut(&mut self) -> &'_ mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(11, true);
            }
            &mut self.deprecated
        }
        pub fn clear_cc_enable_arenas(&mut self) {
            self._bitfield.set(12, false);
        }
        pub fn cc_enable_arenas_mut(&mut self) -> &'_ mut bool {
            if !self.has_cc_enable_arenas() {
                self.cc_enable_arenas = ::std::default::Default::default();
                self._bitfield.set(12, true);
            }
            &mut self.cc_enable_arenas
        }
        pub fn clear_objc_class_prefix(&mut self) {
            self._bitfield.set(13, false);
        }
        pub fn objc_class_prefix_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_objc_class_prefix() {
                self.objc_class_prefix = ::std::default::Default::default();
                self._bitfield.set(13, true);
            }
            &mut self.objc_class_prefix
        }
        pub fn clear_csharp_namespace(&mut self) {
            self._bitfield.set(14, false);
        }
        pub fn csharp_namespace_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_csharp_namespace() {
                self.csharp_namespace = ::std::default::Default::default();
                self._bitfield.set(14, true);
            }
            &mut self.csharp_namespace
        }
        pub fn clear_swift_prefix(&mut self) {
            self._bitfield.set(15, false);
        }
        pub fn swift_prefix_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_swift_prefix() {
                self.swift_prefix = ::std::default::Default::default();
                self._bitfield.set(15, true);
            }
            &mut self.swift_prefix
        }
        pub fn clear_php_class_prefix(&mut self) {
            self._bitfield.set(16, false);
        }
        pub fn php_class_prefix_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_php_class_prefix() {
                self.php_class_prefix = ::std::default::Default::default();
                self._bitfield.set(16, true);
            }
            &mut self.php_class_prefix
        }
        pub fn clear_php_namespace(&mut self) {
            self._bitfield.set(17, false);
        }
        pub fn php_namespace_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_php_namespace() {
                self.php_namespace = ::std::default::Default::default();
                self._bitfield.set(17, true);
            }
            &mut self.php_namespace
        }
        pub fn clear_php_metadata_namespace(&mut self) {
            self._bitfield.set(18, false);
        }
        pub fn php_metadata_namespace_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_php_metadata_namespace() {
                self.php_metadata_namespace = ::std::default::Default::default();
                self._bitfield.set(18, true);
            }
            &mut self.php_metadata_namespace
        }
        pub fn clear_ruby_package(&mut self) {
            self._bitfield.set(19, false);
        }
        pub fn ruby_package_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_ruby_package() {
                self.ruby_package = ::std::default::Default::default();
                self._bitfield.set(19, true);
            }
            &mut self.ruby_package
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::FileOptionsTrait for FileOptions {
        fn java_package_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::java_package_opt(self)
        }
        fn java_outer_classname_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::java_outer_classname_opt(self)
        }
        fn java_multiple_files_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::java_multiple_files_opt(self)
        }
        fn java_generate_equals_and_hash_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::java_generate_equals_and_hash_opt(self)
        }
        fn java_string_check_utf8_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::java_string_check_utf8_opt(self)
        }
        fn optimize_for_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
        {
            <self::FileOptions>::optimize_for_opt(self)
        }
        fn go_package_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::go_package_opt(self)
        }
        fn cc_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::cc_generic_services_opt(self)
        }
        fn java_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::java_generic_services_opt(self)
        }
        fn py_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::py_generic_services_opt(self)
        }
        fn php_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::php_generic_services_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::deprecated_opt(self)
        }
        fn cc_enable_arenas_opt<'this>(&'this self) -> Option<bool> {
            <self::FileOptions>::cc_enable_arenas_opt(self)
        }
        fn objc_class_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::objc_class_prefix_opt(self)
        }
        fn csharp_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::csharp_namespace_opt(self)
        }
        fn swift_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::swift_prefix_opt(self)
        }
        fn php_class_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::php_class_prefix_opt(self)
        }
        fn php_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::php_namespace_opt(self)
        }
        fn php_metadata_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::php_metadata_namespace_opt(self)
        }
        fn ruby_package_opt<'this>(&'this self) -> Option<&'this str> {
            <self::FileOptions>::ruby_package_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for FileOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for FileOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.java_package, data)
            }
            8 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.java_outer_classname, data)
            }
            10 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_multiple_files, data)
            }
            20 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_generate_equals_and_hash, data)
            }
            27 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_string_check_utf8, data)
            }
            9 => {
                self._bitfield.set(5, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
                >::deser_field(&mut self.optimize_for, data)
            }
            11 => {
                self._bitfield.set(6, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.go_package, data)
            }
            16 => {
                self._bitfield.set(7, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.cc_generic_services, data)
            }
            17 => {
                self._bitfield.set(8, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_generic_services, data)
            }
            18 => {
                self._bitfield.set(9, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.py_generic_services, data)
            }
            42 => {
                self._bitfield.set(10, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.php_generic_services, data)
            }
            23 => {
                self._bitfield.set(11, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data)
            }
            31 => {
                self._bitfield.set(12, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.cc_enable_arenas, data)
            }
            36 => {
                self._bitfield.set(13, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.objc_class_prefix, data)
            }
            37 => {
                self._bitfield.set(14, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.csharp_namespace, data)
            }
            39 => {
                self._bitfield.set(15, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.swift_prefix, data)
            }
            40 => {
                self._bitfield.set(16, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.php_class_prefix, data)
            }
            41 => {
                self._bitfield.set(17, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.php_namespace, data)
            }
            44 => {
                self._bitfield.set(18, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.php_metadata_namespace, data)
            }
            45 => {
                self._bitfield.set(19, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.ruby_package, data)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for FileOptions
    where
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_package_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_outer_classname_opt(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_multiple_files_opt(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Bool
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::java_generate_equals_and_hash_opt(self),
            20,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_string_check_utf8_opt(self),
                27,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::optimize_for_opt(self),
            9,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::go_package_opt(self),
                11,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::cc_generic_services_opt(self),
                16,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_generic_services_opt(self),
                17,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::py_generic_services_opt(self),
                18,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_generic_services_opt(self),
                42,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::deprecated_opt(self),
                23,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::cc_enable_arenas_opt(self),
                31,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::objc_class_prefix_opt(self),
                36,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::csharp_namespace_opt(self),
                37,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::swift_prefix_opt(self),
                39,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_class_prefix_opt(self),
                40,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_namespace_opt(self),
                41,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_metadata_namespace_opt(self),
                44,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::ruby_package_opt(self),
                45,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FileOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for FileOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for FileOptions
    where
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("FileOptions")
                .field("java_package", &self.java_package_opt())
                .field("java_outer_classname", &self.java_outer_classname_opt())
                .field("java_multiple_files", &self.java_multiple_files_opt())
                .field(
                    "java_generate_equals_and_hash",
                    &self.java_generate_equals_and_hash_opt(),
                )
                .field("java_string_check_utf8", &self.java_string_check_utf8_opt())
                .field("optimize_for", &self.optimize_for_opt())
                .field("go_package", &self.go_package_opt())
                .field("cc_generic_services", &self.cc_generic_services_opt())
                .field("java_generic_services", &self.java_generic_services_opt())
                .field("py_generic_services", &self.py_generic_services_opt())
                .field("php_generic_services", &self.php_generic_services_opt())
                .field("deprecated", &self.deprecated_opt())
                .field("cc_enable_arenas", &self.cc_enable_arenas_opt())
                .field("objc_class_prefix", &self.objc_class_prefix_opt())
                .field("csharp_namespace", &self.csharp_namespace_opt())
                .field("swift_prefix", &self.swift_prefix_opt())
                .field("php_class_prefix", &self.php_class_prefix_opt())
                .field("php_namespace", &self.php_namespace_opt())
                .field("php_metadata_namespace", &self.php_metadata_namespace_opt())
                .field("ruby_package", &self.ruby_package_opt())
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for FileOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                java_package: ::std::clone::Clone::clone(&self.java_package),
                java_outer_classname: ::std::clone::Clone::clone(&self.java_outer_classname),
                java_multiple_files: ::std::clone::Clone::clone(&self.java_multiple_files),
                java_generate_equals_and_hash: ::std::clone::Clone::clone(
                    &self.java_generate_equals_and_hash,
                ),
                java_string_check_utf8: ::std::clone::Clone::clone(&self.java_string_check_utf8),
                optimize_for: ::std::clone::Clone::clone(&self.optimize_for),
                go_package: ::std::clone::Clone::clone(&self.go_package),
                cc_generic_services: ::std::clone::Clone::clone(&self.cc_generic_services),
                java_generic_services: ::std::clone::Clone::clone(&self.java_generic_services),
                py_generic_services: ::std::clone::Clone::clone(&self.py_generic_services),
                php_generic_services: ::std::clone::Clone::clone(&self.php_generic_services),
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
                cc_enable_arenas: ::std::clone::Clone::clone(&self.cc_enable_arenas),
                objc_class_prefix: ::std::clone::Clone::clone(&self.objc_class_prefix),
                csharp_namespace: ::std::clone::Clone::clone(&self.csharp_namespace),
                swift_prefix: ::std::clone::Clone::clone(&self.swift_prefix),
                php_class_prefix: ::std::clone::Clone::clone(&self.php_class_prefix),
                php_namespace: ::std::clone::Clone::clone(&self.php_namespace),
                php_metadata_namespace: ::std::clone::Clone::clone(&self.php_metadata_namespace),
                ruby_package: ::std::clone::Clone::clone(&self.ruby_package),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for FileOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true)
                    || self.java_package == rhs.java_package)
                && (self._bitfield.get(1).as_deref() != Some(&true)
                    || self.java_outer_classname == rhs.java_outer_classname)
                && (self._bitfield.get(2).as_deref() != Some(&true)
                    || self.java_multiple_files == rhs.java_multiple_files)
                && (self._bitfield.get(3).as_deref() != Some(&true)
                    || self.java_generate_equals_and_hash == rhs.java_generate_equals_and_hash)
                && (self._bitfield.get(4).as_deref() != Some(&true)
                    || self.java_string_check_utf8 == rhs.java_string_check_utf8)
                && (self._bitfield.get(5).as_deref() != Some(&true)
                    || self.optimize_for == rhs.optimize_for)
                && (self._bitfield.get(6).as_deref() != Some(&true)
                    || self.go_package == rhs.go_package)
                && (self._bitfield.get(7).as_deref() != Some(&true)
                    || self.cc_generic_services == rhs.cc_generic_services)
                && (self._bitfield.get(8).as_deref() != Some(&true)
                    || self.java_generic_services == rhs.java_generic_services)
                && (self._bitfield.get(9).as_deref() != Some(&true)
                    || self.py_generic_services == rhs.py_generic_services)
                && (self._bitfield.get(10).as_deref() != Some(&true)
                    || self.php_generic_services == rhs.php_generic_services)
                && (self._bitfield.get(11).as_deref() != Some(&true)
                    || self.deprecated == rhs.deprecated)
                && (self._bitfield.get(12).as_deref() != Some(&true)
                    || self.cc_enable_arenas == rhs.cc_enable_arenas)
                && (self._bitfield.get(13).as_deref() != Some(&true)
                    || self.objc_class_prefix == rhs.objc_class_prefix)
                && (self._bitfield.get(14).as_deref() != Some(&true)
                    || self.csharp_namespace == rhs.csharp_namespace)
                && (self._bitfield.get(15).as_deref() != Some(&true)
                    || self.swift_prefix == rhs.swift_prefix)
                && (self._bitfield.get(16).as_deref() != Some(&true)
                    || self.php_class_prefix == rhs.php_class_prefix)
                && (self._bitfield.get(17).as_deref() != Some(&true)
                    || self.php_namespace == rhs.php_namespace)
                && (self._bitfield.get(18).as_deref() != Some(&true)
                    || self.php_metadata_namespace == rhs.php_metadata_namespace)
                && (self._bitfield.get(19).as_deref() != Some(&true)
                    || self.ruby_package == rhs.ruby_package)
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct MessageOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (4 + 31) / 32]>,
        message_set_wire_format: ::puroro::internal::Bare<bool>,
        no_standard_descriptor_accessor: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        map_entry: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<MessageOptions> for MessageOptions {}

    impl MessageOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                message_set_wire_format: ::std::default::Default::default(),
                no_standard_descriptor_accessor: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                map_entry: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn message_set_wire_format_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.message_set_wire_format.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_message_set_wire_format(&self) -> bool {
            Self::message_set_wire_format_opt(self).is_some()
        }

        pub fn message_set_wire_format(&self) -> bool {
            self.message_set_wire_format_opt().unwrap_or(false)
        }
        pub fn no_standard_descriptor_accessor_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.no_standard_descriptor_accessor.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_no_standard_descriptor_accessor(&self) -> bool {
            Self::no_standard_descriptor_accessor_opt(self).is_some()
        }

        pub fn no_standard_descriptor_accessor(&self) -> bool {
            self.no_standard_descriptor_accessor_opt().unwrap_or(false)
        }
        pub fn deprecated_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_deprecated(&self) -> bool {
            Self::deprecated_opt(self).is_some()
        }

        pub fn deprecated(&self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        pub fn map_entry_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.map_entry.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_map_entry(&self) -> bool {
            Self::map_entry_opt(self).is_some()
        }

        pub fn map_entry(&self) -> bool {
            self.map_entry_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn clear_message_set_wire_format(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn message_set_wire_format_mut(&mut self) -> &'_ mut bool {
            if !self.has_message_set_wire_format() {
                self.message_set_wire_format = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.message_set_wire_format
        }
        pub fn clear_no_standard_descriptor_accessor(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn no_standard_descriptor_accessor_mut(&mut self) -> &'_ mut bool {
            if !self.has_no_standard_descriptor_accessor() {
                self.no_standard_descriptor_accessor = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.no_standard_descriptor_accessor
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn deprecated_mut(&mut self) -> &'_ mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.deprecated
        }
        pub fn clear_map_entry(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn map_entry_mut(&mut self) -> &'_ mut bool {
            if !self.has_map_entry() {
                self.map_entry = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.map_entry
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::MessageOptionsTrait for MessageOptions {
        fn message_set_wire_format_opt<'this>(&'this self) -> Option<bool> {
            <self::MessageOptions>::message_set_wire_format_opt(self)
        }
        fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> Option<bool> {
            <self::MessageOptions>::no_standard_descriptor_accessor_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <self::MessageOptions>::deprecated_opt(self)
        }
        fn map_entry_opt<'this>(&'this self) -> Option<bool> {
            <self::MessageOptions>::map_entry_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for MessageOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for MessageOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.message_set_wire_format, data)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.no_standard_descriptor_accessor, data)
            }
            3 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data)
            }
            7 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.map_entry, data)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for MessageOptions
    where
        Self: super::_puroro_traits::MessageOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::message_set_wire_format_opt(
                    self,
                ),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Bool
        >::ser_field(
            <Self as super::_puroro_traits::MessageOptionsTrait>::no_standard_descriptor_accessor_opt(self),
            2,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::map_entry_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::MessageOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::MessageOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for MessageOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for MessageOptions
    where
        Self: super::_puroro_traits::MessageOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("MessageOptions")
                .field(
                    "message_set_wire_format",
                    &self.message_set_wire_format_opt(),
                )
                .field(
                    "no_standard_descriptor_accessor",
                    &self.no_standard_descriptor_accessor_opt(),
                )
                .field("deprecated", &self.deprecated_opt())
                .field("map_entry", &self.map_entry_opt())
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for MessageOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                message_set_wire_format: ::std::clone::Clone::clone(&self.message_set_wire_format),
                no_standard_descriptor_accessor: ::std::clone::Clone::clone(
                    &self.no_standard_descriptor_accessor,
                ),
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
                map_entry: ::std::clone::Clone::clone(&self.map_entry),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for MessageOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true)
                    || self.message_set_wire_format == rhs.message_set_wire_format)
                && (self._bitfield.get(1).as_deref() != Some(&true)
                    || self.no_standard_descriptor_accessor == rhs.no_standard_descriptor_accessor)
                && (self._bitfield.get(2).as_deref() != Some(&true)
                    || self.deprecated == rhs.deprecated)
                && (self._bitfield.get(3).as_deref() != Some(&true)
                    || self.map_entry == rhs.map_entry)
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct FieldOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (6 + 31) / 32]>,
        ctype: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        >,
        packed: ::puroro::internal::Bare<bool>,
        jstype: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        >,
        lazy: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        weak: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<FieldOptions> for FieldOptions {}

    impl FieldOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                ctype: ::std::default::Default::default(),
                packed: ::std::default::Default::default(),
                jstype: ::std::default::Default::default(),
                lazy: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                weak: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn ctype_opt(
            &self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        > {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.ctype.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_ctype(&self) -> bool {
            Self::ctype_opt(self).is_some()
        }

        pub fn ctype(
            &self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype {
            self.ctype_opt().unwrap_or(
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype::String,
            )
        }
        pub fn packed_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.packed.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_packed(&self) -> bool {
            Self::packed_opt(self).is_some()
        }

        pub fn packed(&self) -> bool {
            self.packed_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn jstype_opt(
            &self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        > {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.jstype.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_jstype(&self) -> bool {
            Self::jstype_opt(self).is_some()
        }

        pub fn jstype(
            &self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype {
            self.jstype_opt().unwrap_or(
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype::JsNormal
        )
        }
        pub fn lazy_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.lazy.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_lazy(&self) -> bool {
            Self::lazy_opt(self).is_some()
        }

        pub fn lazy(&self) -> bool {
            self.lazy_opt().unwrap_or(false)
        }
        pub fn deprecated_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_deprecated(&self) -> bool {
            Self::deprecated_opt(self).is_some()
        }

        pub fn deprecated(&self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        pub fn weak_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.weak.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_weak(&self) -> bool {
            Self::weak_opt(self).is_some()
        }

        pub fn weak(&self) -> bool {
            self.weak_opt().unwrap_or(false)
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn clear_ctype(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn ctype_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype
        {
            if !self.has_ctype() {
                self.ctype = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.ctype
        }
        pub fn clear_packed(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn packed_mut(&mut self) -> &'_ mut bool {
            if !self.has_packed() {
                self.packed = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.packed
        }
        pub fn clear_jstype(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn jstype_mut(
            &mut self,
        ) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype
        {
            if !self.has_jstype() {
                self.jstype = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.jstype
        }
        pub fn clear_lazy(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn lazy_mut(&mut self) -> &'_ mut bool {
            if !self.has_lazy() {
                self.lazy = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.lazy
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn deprecated_mut(&mut self) -> &'_ mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.deprecated
        }
        pub fn clear_weak(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn weak_mut(&mut self) -> &'_ mut bool {
            if !self.has_weak() {
                self.weak = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            &mut self.weak
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::FieldOptionsTrait for FieldOptions {
        fn ctype_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype>
        {
            <self::FieldOptions>::ctype_opt(self)
        }
        fn packed_opt<'this>(&'this self) -> Option<bool> {
            <self::FieldOptions>::packed_opt(self)
        }
        fn jstype_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype>
        {
            <self::FieldOptions>::jstype_opt(self)
        }
        fn lazy_opt<'this>(&'this self) -> Option<bool> {
            <self::FieldOptions>::lazy_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <self::FieldOptions>::deprecated_opt(self)
        }
        fn weak_opt<'this>(&'this self) -> Option<bool> {
            <self::FieldOptions>::weak_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for FieldOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for FieldOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype>
                >::deser_field(&mut self.ctype, data)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.packed, data)
            }
            6 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype>
                >::deser_field(&mut self.jstype, data)
            }
            5 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.lazy, data)
            }
            3 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data)
            }
            10 => {
                self._bitfield.set(5, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.weak, data)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for FieldOptions
    where
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Enum2<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::ctype_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::packed_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Enum2<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::jstype_opt(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::lazy_opt(self),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::weak_opt(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FieldOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FieldOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for FieldOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for FieldOptions
    where
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("FieldOptions")
                .field("ctype", &self.ctype_opt())
                .field("packed", &self.packed_opt())
                .field("jstype", &self.jstype_opt())
                .field("lazy", &self.lazy_opt())
                .field("deprecated", &self.deprecated_opt())
                .field("weak", &self.weak_opt())
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for FieldOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                ctype: ::std::clone::Clone::clone(&self.ctype),
                packed: ::std::clone::Clone::clone(&self.packed),
                jstype: ::std::clone::Clone::clone(&self.jstype),
                lazy: ::std::clone::Clone::clone(&self.lazy),
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
                weak: ::std::clone::Clone::clone(&self.weak),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for FieldOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true) || self.ctype == rhs.ctype)
                && (self._bitfield.get(1).as_deref() != Some(&true) || self.packed == rhs.packed)
                && (self._bitfield.get(2).as_deref() != Some(&true) || self.jstype == rhs.jstype)
                && (self._bitfield.get(3).as_deref() != Some(&true) || self.lazy == rhs.lazy)
                && (self._bitfield.get(4).as_deref() != Some(&true)
                    || self.deprecated == rhs.deprecated)
                && (self._bitfield.get(5).as_deref() != Some(&true) || self.weak == rhs.weak)
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct OneofOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (0 + 31) / 32]>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<OneofOptions> for OneofOptions {}

    impl OneofOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::OneofOptionsTrait for OneofOptions {
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for OneofOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for OneofOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for OneofOptions
    where
        Self: super::_puroro_traits::OneofOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::OneofOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::OneofOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for OneofOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for OneofOptions
    where
        Self: super::_puroro_traits::OneofOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("OneofOptions")
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for OneofOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for OneofOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct EnumOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (2 + 31) / 32]>,
        allow_alias: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<EnumOptions> for EnumOptions {}

    impl EnumOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                allow_alias: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn allow_alias_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.allow_alias.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_allow_alias(&self) -> bool {
            Self::allow_alias_opt(self).is_some()
        }

        pub fn allow_alias(&self) -> bool {
            self.allow_alias_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn deprecated_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_deprecated(&self) -> bool {
            Self::deprecated_opt(self).is_some()
        }

        pub fn deprecated(&self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn clear_allow_alias(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn allow_alias_mut(&mut self) -> &'_ mut bool {
            if !self.has_allow_alias() {
                self.allow_alias = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.allow_alias
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn deprecated_mut(&mut self) -> &'_ mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.deprecated
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::EnumOptionsTrait for EnumOptions {
        fn allow_alias_opt<'this>(&'this self) -> Option<bool> {
            <self::EnumOptions>::allow_alias_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <self::EnumOptions>::deprecated_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for EnumOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for EnumOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            2 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.allow_alias, data)
            }
            3 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for EnumOptions
    where
        Self: super::_puroro_traits::EnumOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumOptionsTrait>::allow_alias_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for EnumOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for EnumOptions
    where
        Self: super::_puroro_traits::EnumOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("EnumOptions")
                .field("allow_alias", &self.allow_alias_opt())
                .field("deprecated", &self.deprecated_opt())
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for EnumOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                allow_alias: ::std::clone::Clone::clone(&self.allow_alias),
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for EnumOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true)
                    || self.allow_alias == rhs.allow_alias)
                && (self._bitfield.get(1).as_deref() != Some(&true)
                    || self.deprecated == rhs.deprecated)
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct EnumValueOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        deprecated: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<EnumValueOptions> for EnumValueOptions {}

    impl EnumValueOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn deprecated_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_deprecated(&self) -> bool {
            Self::deprecated_opt(self).is_some()
        }

        pub fn deprecated(&self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn deprecated_mut(&mut self) -> &'_ mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.deprecated
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::EnumValueOptionsTrait for EnumValueOptions {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <self::EnumValueOptions>::deprecated_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for EnumValueOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for EnumValueOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for EnumValueOptions
    where
        Self: super::_puroro_traits::EnumValueOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueOptionsTrait>::deprecated_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumValueOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumValueOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for EnumValueOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for EnumValueOptions
    where
        Self: super::_puroro_traits::EnumValueOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("EnumValueOptions")
                .field("deprecated", &self.deprecated_opt())
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for EnumValueOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for EnumValueOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true)
                    || self.deprecated == rhs.deprecated)
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct ServiceOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        deprecated: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<ServiceOptions> for ServiceOptions {}

    impl ServiceOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn deprecated_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_deprecated(&self) -> bool {
            Self::deprecated_opt(self).is_some()
        }

        pub fn deprecated(&self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn deprecated_mut(&mut self) -> &'_ mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.deprecated
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::ServiceOptionsTrait for ServiceOptions {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <self::ServiceOptions>::deprecated_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for ServiceOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for ServiceOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            33 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for ServiceOptions
    where
        Self: super::_puroro_traits::ServiceOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceOptionsTrait>::deprecated_opt(self),
                33,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::ServiceOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ServiceOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for ServiceOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for ServiceOptions
    where
        Self: super::_puroro_traits::ServiceOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("ServiceOptions")
                .field("deprecated", &self.deprecated_opt())
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for ServiceOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for ServiceOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true)
                    || self.deprecated == rhs.deprecated)
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct MethodOptions {
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (2 + 31) / 32]>,
        deprecated: ::puroro::internal::Bare<bool>,
        idempotency_level: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        >,
        uninterpreted_option: ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        >,
    }
    impl ::puroro::Message<MethodOptions> for MethodOptions {}

    impl MethodOptions {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                idempotency_level: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn deprecated_opt(&self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_deprecated(&self) -> bool {
            Self::deprecated_opt(self).is_some()
        }

        pub fn deprecated(&self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        pub fn idempotency_level_opt(
            &self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.idempotency_level.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_idempotency_level(&self) -> bool {
            Self::idempotency_level_opt(self).is_some()
        }

        pub fn idempotency_level(
            &self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel
        {
            self.idempotency_level_opt().unwrap_or(
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel::IdempotencyUnknown
        )
        }
        pub fn uninterpreted_option(
            &self,
        ) -> &'_ [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption]
        {
            &self.uninterpreted_option
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn deprecated_mut(&mut self) -> &'_ mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.deprecated
        }
        pub fn clear_idempotency_level(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn idempotency_level_mut(&mut self) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel{
            if !self.has_idempotency_level() {
                self.idempotency_level = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.idempotency_level
        }
        pub fn uninterpreted_option_mut(
            &mut self,
        ) -> &'_ mut ::std::vec::Vec<
            self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption,
        > {
            &mut self.uninterpreted_option
        }
    }

    impl super::_puroro_traits::MethodOptionsTrait for MethodOptions {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <self::MethodOptions>::deprecated_opt(self)
        }
        fn idempotency_level_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            <self::MethodOptions>::idempotency_level_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption];

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl ::puroro::MessageRepresentativeImpl for MethodOptions {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for MethodOptions {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            33 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data)
            }
            34 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel>
                >::deser_field(&mut self.idempotency_level, data)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_simple_impl::UninterpretedOption>
                >::deser_field(&mut self.uninterpreted_option, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for MethodOptions
    where
        Self: super::_puroro_traits::MethodOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodOptionsTrait>::deprecated_opt(self),
                33,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel>
        >::ser_field(
            <Self as super::_puroro_traits::MethodOptionsTrait>::idempotency_level_opt(self),
            34,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::MethodOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::MethodOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for MethodOptions {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for MethodOptions
    where
        Self: super::_puroro_traits::MethodOptionsTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("MethodOptions")
                .field("deprecated", &self.deprecated_opt())
                .field("idempotency_level", &self.idempotency_level_opt())
                .field("uninterpreted_option", &self.uninterpreted_option())
                .finish()
        }
    }

    impl ::std::clone::Clone for MethodOptions {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
                idempotency_level: ::std::clone::Clone::clone(&self.idempotency_level),
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }

    impl ::std::cmp::PartialEq for MethodOptions {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && (self._bitfield.get(0).as_deref() != Some(&true)
                    || self.deprecated == rhs.deprecated)
                && (self._bitfield.get(1).as_deref() != Some(&true)
                    || self.idempotency_level == rhs.idempotency_level)
                && self.uninterpreted_option == rhs.uninterpreted_option
                && true
        }
    }
    pub struct UninterpretedOption {
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (6 + 31) / 32],
    >,
    name: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_simple_impl::NamePart>,
    identifier_value: ::puroro::internal::Bare<::std::string::String>,
    positive_int_value: ::puroro::internal::Bare<u64>,
    negative_int_value: ::puroro::internal::Bare<i64>,
    double_value: ::puroro::internal::Bare<f64>,
    string_value: ::puroro::internal::Bare<::std::vec::Vec<u8>>,
    aggregate_value: ::puroro::internal::Bare<::std::string::String>,
}
    impl ::puroro::Message<UninterpretedOption> for UninterpretedOption {}

    impl UninterpretedOption {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                identifier_value: ::std::default::Default::default(),
                positive_int_value: ::std::default::Default::default(),
                negative_int_value: ::std::default::Default::default(),
                double_value: ::std::default::Default::default(),
                string_value: ::std::default::Default::default(),
                aggregate_value: ::std::default::Default::default(),
            }
        }
        pub fn name(&self) -> &'_[self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_simple_impl::NamePart]{
            &self.name
        }
        pub fn identifier_value_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.identifier_value)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_identifier_value(&self) -> bool {
            Self::identifier_value_opt(self).is_some()
        }

        pub fn identifier_value(&self) -> &'_ str {
            self.identifier_value_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn positive_int_value_opt(&self) -> ::std::option::Option<u64> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.positive_int_value.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_positive_int_value(&self) -> bool {
            Self::positive_int_value_opt(self).is_some()
        }

        pub fn positive_int_value(&self) -> u64 {
            self.positive_int_value_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn negative_int_value_opt(&self) -> ::std::option::Option<i64> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.negative_int_value.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_negative_int_value(&self) -> bool {
            Self::negative_int_value_opt(self).is_some()
        }

        pub fn negative_int_value(&self) -> i64 {
            self.negative_int_value_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn double_value_opt(&self) -> ::std::option::Option<f64> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.double_value.clone().inner())
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_double_value(&self) -> bool {
            Self::double_value_opt(self).is_some()
        }

        pub fn double_value(&self) -> f64 {
            self.double_value_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn string_value_opt(&self) -> ::std::option::Option<&'_ [u8]> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.string_value)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_string_value(&self) -> bool {
            Self::string_value_opt(self).is_some()
        }

        pub fn string_value(&self) -> &'_ [u8] {
            self.string_value_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn aggregate_value_opt(&self) -> ::std::option::Option<&'_ str> {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.aggregate_value)
            } else {
                ::std::option::Option::None
            }
        }

        pub fn has_aggregate_value(&self) -> bool {
            Self::aggregate_value_opt(self).is_some()
        }

        pub fn aggregate_value(&self) -> &'_ str {
            self.aggregate_value_opt()
                .unwrap_or(::std::default::Default::default())
        }
        pub fn name_mut(&mut self) -> &'_ mut ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_simple_impl::NamePart>{
            &mut self.name
        }
        pub fn clear_identifier_value(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn identifier_value_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_identifier_value() {
                self.identifier_value = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.identifier_value
        }
        pub fn clear_positive_int_value(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn positive_int_value_mut(&mut self) -> &'_ mut u64 {
            if !self.has_positive_int_value() {
                self.positive_int_value = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.positive_int_value
        }
        pub fn clear_negative_int_value(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn negative_int_value_mut(&mut self) -> &'_ mut i64 {
            if !self.has_negative_int_value() {
                self.negative_int_value = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.negative_int_value
        }
        pub fn clear_double_value(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn double_value_mut(&mut self) -> &'_ mut f64 {
            if !self.has_double_value() {
                self.double_value = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.double_value
        }
        pub fn clear_string_value(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn string_value_mut(&mut self) -> &'_ mut ::std::vec::Vec<u8> {
            if !self.has_string_value() {
                self.string_value = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.string_value
        }
        pub fn clear_aggregate_value(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn aggregate_value_mut(&mut self) -> &'_ mut ::std::string::String {
            if !self.has_aggregate_value() {
                self.aggregate_value = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            &mut self.aggregate_value
        }
    }

    impl super::_puroro_traits::UninterpretedOptionTrait for UninterpretedOption {
        type NameMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_simple_impl::NamePart where Self: 'this;
        type NameRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_simple_impl::NamePart];

        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            &self.name
        }
        fn identifier_value_opt<'this>(&'this self) -> Option<&'this str> {
            <self::UninterpretedOption>::identifier_value_opt(self)
        }
        fn positive_int_value_opt<'this>(&'this self) -> Option<u64> {
            <self::UninterpretedOption>::positive_int_value_opt(self)
        }
        fn negative_int_value_opt<'this>(&'this self) -> Option<i64> {
            <self::UninterpretedOption>::negative_int_value_opt(self)
        }
        fn double_value_opt<'this>(&'this self) -> Option<f64> {
            <self::UninterpretedOption>::double_value_opt(self)
        }
        fn string_value_opt<'this>(&'this self) -> Option<&'this [u8]> {
            <self::UninterpretedOption>::string_value_opt(self)
        }
        fn aggregate_value_opt<'this>(&'this self) -> Option<&'this str> {
            <self::UninterpretedOption>::aggregate_value_opt(self)
        }
    }

    impl ::puroro::MessageRepresentativeImpl for UninterpretedOption {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for UninterpretedOption {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_simple_impl::NamePart>
                >::deser_field(&mut self.name, data)
            }
            3 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.identifier_value, data)
            }
            4 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::UInt64
                >::deser_field(&mut self.positive_int_value, data)
            }
            5 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int64
                >::deser_field(&mut self.negative_int_value, data)
            }
            6 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Double
                >::deser_field(&mut self.double_value, data)
            }
            7 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bytes
                >::deser_field(&mut self.string_value, data)
            }
            8 => {
                self._bitfield.set(5, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.aggregate_value, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for UninterpretedOption
    where
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::UninterpretedOptionTrait>::NameMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::name(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::identifier_value_opt(
                    self,
                ),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::UInt64,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::positive_int_value_opt(
                    self,
                ),
                4,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int64,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::negative_int_value_opt(
                    self,
                ),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Double,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::double_value_opt(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bytes,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::string_value_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::aggregate_value_opt(
                    self,
                ),
                8,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for UninterpretedOption {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for UninterpretedOption
    where
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("UninterpretedOption")
                .field("name", &self.name())
                .field("identifier_value", &self.identifier_value_opt())
                .field("positive_int_value", &self.positive_int_value_opt())
                .field("negative_int_value", &self.negative_int_value_opt())
                .field("double_value", &self.double_value_opt())
                .field("string_value", &self.string_value_opt())
                .field("aggregate_value", &self.aggregate_value_opt())
                .finish()
        }
    }

    impl ::std::clone::Clone for UninterpretedOption {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                name: ::std::clone::Clone::clone(&self.name),
                identifier_value: ::std::clone::Clone::clone(&self.identifier_value),
                positive_int_value: ::std::clone::Clone::clone(&self.positive_int_value),
                negative_int_value: ::std::clone::Clone::clone(&self.negative_int_value),
                double_value: ::std::clone::Clone::clone(&self.double_value),
                string_value: ::std::clone::Clone::clone(&self.string_value),
                aggregate_value: ::std::clone::Clone::clone(&self.aggregate_value),
            }
        }
    }

    impl ::std::cmp::PartialEq for UninterpretedOption {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield
                && self.name == rhs.name
                && (self._bitfield.get(0).as_deref() != Some(&true)
                    || self.identifier_value == rhs.identifier_value)
                && (self._bitfield.get(1).as_deref() != Some(&true)
                    || self.positive_int_value == rhs.positive_int_value)
                && (self._bitfield.get(2).as_deref() != Some(&true)
                    || self.negative_int_value == rhs.negative_int_value)
                && (self._bitfield.get(3).as_deref() != Some(&true)
                    || self.double_value == rhs.double_value)
                && (self._bitfield.get(4).as_deref() != Some(&true)
                    || self.string_value == rhs.string_value)
                && (self._bitfield.get(5).as_deref() != Some(&true)
                    || self.aggregate_value == rhs.aggregate_value)
                && true
        }
    }
    pub struct SourceCodeInfo {
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (0 + 31) / 32],
    >,
    location: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_simple_impl::Location>,
}
    impl ::puroro::Message<SourceCodeInfo> for SourceCodeInfo {}

    impl SourceCodeInfo {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                location: ::std::default::Default::default(),
            }
        }
        pub fn location(&self) -> &'_[self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_simple_impl::Location]{
            &self.location
        }
        pub fn location_mut(&mut self) -> &'_ mut ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_simple_impl::Location>{
            &mut self.location
        }
    }

    impl super::_puroro_traits::SourceCodeInfoTrait for SourceCodeInfo {
        type LocationMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_simple_impl::Location where Self: 'this;
        type LocationRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_simple_impl::Location];

        fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
            &self.location
        }
    }

    impl ::puroro::MessageRepresentativeImpl for SourceCodeInfo {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for SourceCodeInfo {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_simple_impl::Location>
                >::deser_field(&mut self.location, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for SourceCodeInfo
    where
        Self: super::_puroro_traits::SourceCodeInfoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::SourceCodeInfoTrait>::LocationMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::SourceCodeInfoTrait>::location(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for SourceCodeInfo {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for SourceCodeInfo
    where
        Self: super::_puroro_traits::SourceCodeInfoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("SourceCodeInfo")
                .field("location", &self.location())
                .finish()
        }
    }

    impl ::std::clone::Clone for SourceCodeInfo {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                location: ::std::clone::Clone::clone(&self.location),
            }
        }
    }

    impl ::std::cmp::PartialEq for SourceCodeInfo {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield && self.location == rhs.location && true
        }
    }
    pub struct GeneratedCodeInfo {
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (0 + 31) / 32],
    >,
    annotation: ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_simple_impl::Annotation>,
}
    impl ::puroro::Message<GeneratedCodeInfo> for GeneratedCodeInfo {}

    impl GeneratedCodeInfo {
        pub fn new() -> Self {
            Self {
                _bitfield: ::std::default::Default::default(),
                annotation: ::std::default::Default::default(),
            }
        }
        pub fn annotation(&self) -> &'_[self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_simple_impl::Annotation]{
            &self.annotation
        }
        pub fn annotation_mut(&mut self) -> &'_ mut ::std::vec::Vec<self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_simple_impl::Annotation>{
            &mut self.annotation
        }
    }

    impl super::_puroro_traits::GeneratedCodeInfoTrait for GeneratedCodeInfo {
        type AnnotationMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_simple_impl::Annotation where Self: 'this;
        type AnnotationRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_simple_impl::Annotation];

        fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
            &self.annotation
        }
    }

    impl ::puroro::MessageRepresentativeImpl for GeneratedCodeInfo {}

    impl ::puroro::internal::de::DeserMessageFromBytesIter for GeneratedCodeInfo {
        fn deser_field<I>(
            &mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_simple_impl::Annotation>
                >::deser_field(&mut self.annotation, data)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl ::puroro::internal::se::SerMessageToIoWrite for GeneratedCodeInfo
    where
        Self: super::_puroro_traits::GeneratedCodeInfoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::GeneratedCodeInfoTrait>::AnnotationMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::GeneratedCodeInfoTrait>::annotation(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl ::std::default::Default for GeneratedCodeInfo {
        fn default() -> Self {
            Self::new()
        }
    }

    impl ::std::fmt::Debug for GeneratedCodeInfo
    where
        Self: super::_puroro_traits::GeneratedCodeInfoTrait,
    {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            f.debug_struct("GeneratedCodeInfo")
                .field("annotation", &self.annotation())
                .finish()
        }
    }

    impl ::std::clone::Clone for GeneratedCodeInfo {
        fn clone(&self) -> Self {
            Self {
                _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                annotation: ::std::clone::Clone::clone(&self.annotation),
            }
        }
    }

    impl ::std::cmp::PartialEq for GeneratedCodeInfo {
        fn eq(&self, rhs: &Self) -> bool {
            self._bitfield == rhs._bitfield && self.annotation == rhs.annotation && true
        }
    }
}

pub use _puroro_impls::*;
pub mod _puroro_impls {
    mod _puroro_root {
        pub use super::super::_puroro_root::*;
    }
    use super::_puroro_traits::*;

    pub struct FileDescriptorSetSingleField1<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub file: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorSet>
        for FileDescriptorSetSingleField1<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorSetTrait
        for FileDescriptorSetSingleField1<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type FileMessageType<'this> = &'this ScalarType where Self: 'this;

        type FileRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
            &self.file
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorSetSingleField1<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorSetTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorSetTrait>::FileMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorSetTrait>::FileMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorSetTrait>::file(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorSetSingleField1<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { file: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorSetSingleField1<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                file: ::std::clone::Clone::clone(&self.file),
            }
        }
    }
    pub struct FileDescriptorSetBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (0 + 31) / 32]>,
        file: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::FileDescriptorProtoBumpalo<'bump>,
        >,
    }

    pub type FileDescriptorSetBumpaloOwned =
        ::puroro::BumpaloOwned<FileDescriptorSetBumpalo<'static>>;
    impl<'bump> FileDescriptorSetBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                file: ::std::default::Default::default(),
            }
        }
        pub fn file<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::FileDescriptorProtoBumpalo<'this>]{
            unsafe { self.file.cast_item_unchecked() }
        }
        pub fn file_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::FileDescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.file.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::FileDescriptorSet>
        for FileDescriptorSetBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for FileDescriptorSetBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for FileDescriptorSetBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::FileDescriptorSetTrait for FileDescriptorSetBumpalo<'bump> {
        type FileMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::FileDescriptorProtoBumpalo<'this> where Self: 'this;
        type FileRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::FileDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
            unsafe { self.file.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for FileDescriptorSetBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::FileDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.file, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for FileDescriptorSetBumpalo<'bump>
    where
        Self: super::_puroro_traits::FileDescriptorSetTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorSetTrait>::FileMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorSetTrait>::FileMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorSetTrait>::file(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct FileDescriptorSetBuilder<T>(T);

    impl<T> FileDescriptorSetBuilder<T>
    where
        T: FileDescriptorSetTrait,
    {
        pub fn append_file<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorSetBuilder<(T, FileDescriptorSetSingleField1<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorSetBuilder((self.0, FileDescriptorSetSingleField1 { file: value }))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl FileDescriptorSetBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct FileDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub package: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.package.as_ref())
        }
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::package_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { package: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                package: ::std::clone::Clone::clone(&self.package),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub dependency: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type DependencyRepeatedType<'this> =
    ::puroro::AsRefRepeatedField<
        'this,
        RepeatedType,
        ScalarType,str,
    > where Self: 'this;

        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.dependency)
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::dependency(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { dependency: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                dependency: ::std::clone::Clone::clone(&self.dependency),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub public_dependency: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        type PublicDependencyRepeatedType<'this> =
    ::puroro::CloneThenIntoRepeatedField<
        'this,
        RepeatedType,
        ScalarType,
        i32
    > where Self: 'this;

        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::CloneThenIntoRepeatedField::new(&self.public_dependency)
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::public_dependency(self),
                10,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                public_dependency: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                public_dependency: ::std::clone::Clone::clone(&self.public_dependency),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField11<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub weak_dependency: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField11<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField11<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        type WeakDependencyRepeatedType<'this> =
    ::puroro::CloneThenIntoRepeatedField<
        'this,
        RepeatedType,
        ScalarType,
        i32
    > where Self: 'this;

        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::CloneThenIntoRepeatedField::new(&self.weak_dependency)
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField11<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::weak_dependency(self),
                11,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorProtoSingleField11<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                weak_dependency: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorProtoSingleField11<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                weak_dependency: ::std::clone::Clone::clone(&self.weak_dependency),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub message_type: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = &'this ScalarType where Self: 'this;

        type MessageTypeRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            &self.message_type
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::MessageTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FileDescriptorProtoTrait>::MessageTypeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileDescriptorProtoTrait>::message_type(self),
            4,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                message_type: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                message_type: ::std::clone::Clone::clone(&self.message_type),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub enum_type: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = &'this ScalarType where Self: 'this;

        type EnumTypeRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            &self.enum_type
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::EnumTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::EnumTypeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::enum_type(self),
                5,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { enum_type: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                enum_type: ::std::clone::Clone::clone(&self.enum_type),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub service: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = &'this ScalarType where Self: 'this;

        type ServiceRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            &self.service
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ServiceMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ServiceMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::service(self),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { service: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                service: ::std::clone::Clone::clone(&self.service),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField7<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub extension: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField7<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField7<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = &'this ScalarType where Self: 'this;

        type ExtensionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            &self.extension
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField7<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ExtensionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ExtensionMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::extension(self),
                7,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileDescriptorProtoSingleField7<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { extension: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileDescriptorProtoSingleField7<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                extension: ::std::clone::Clone::clone(&self.extension),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::options_opt(self),
                8,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait,
    {
        pub source_code_info: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = &'this ScalarType where Self: 'this;

        fn source_code_info_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::SourceCodeInfoMessageType<'this>> {
            ::std::option::Option::Some(&self.source_code_info)
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileDescriptorProtoTrait>::source_code_info_opt(self),
            9,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                source_code_info: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                source_code_info: ::std::clone::Clone::clone(&self.source_code_info),
            }
        }
    }

    pub struct FileDescriptorProtoSingleField12<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub syntax: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileDescriptorProto>
        for FileDescriptorProtoSingleField12<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FileDescriptorProtoTrait
        for FileDescriptorProtoSingleField12<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        type DependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>> where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>> where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;

        fn syntax_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.syntax.as_ref())
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileDescriptorProtoSingleField12<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::syntax_opt(self),
                12,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileDescriptorProtoSingleField12<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { syntax: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileDescriptorProtoSingleField12<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                syntax: ::std::clone::Clone::clone(&self.syntax),
            }
        }
    }
    pub struct FileDescriptorProtoBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (3 + 31) / 32]>,
        name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        package: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        dependency: ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
        public_dependency: ::puroro::internal::NoAllocBumpVec<i32>,
        weak_dependency: ::puroro::internal::NoAllocBumpVec<i32>,
        message_type: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'bump>,
        >,
        enum_type: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'bump>,
        >,
        service: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::ServiceDescriptorProtoBumpalo<
                'bump,
            >,
        >,
        extension: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>,
        >,
        options: ::std::option::Option<
            ::puroro::internal::NoAllocBumpBox<
                self::_puroro_root::google::protobuf::_puroro_impls::FileOptionsBumpalo<'bump>,
            >,
        >,
        source_code_info: ::std::option::Option<
            ::puroro::internal::NoAllocBumpBox<
                self::_puroro_root::google::protobuf::_puroro_impls::SourceCodeInfoBumpalo<'bump>,
            >,
        >,
        syntax: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
    }

    pub type FileDescriptorProtoBumpaloOwned =
        ::puroro::BumpaloOwned<FileDescriptorProtoBumpalo<'static>>;
    impl<'bump> FileDescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                package: ::std::default::Default::default(),
                dependency: ::std::default::Default::default(),
                public_dependency: ::std::default::Default::default(),
                weak_dependency: ::std::default::Default::default(),
                message_type: ::std::default::Default::default(),
                enum_type: ::std::default::Default::default(),
                service: ::std::default::Default::default(),
                extension: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                source_code_info: ::std::default::Default::default(),
                syntax: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.package)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn package<'this>(&'this self) -> &'this str {
            match self.package_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_package(&self) -> bool {
            self.package_opt().is_some()
        }
        pub fn dependency<'this>(&'this self) -> &'this [impl ::std::ops::Deref<Target = str>] {
            &self.dependency
        }
        pub fn public_dependency<'this>(&'this self) -> &'this [i32] {
            &self.public_dependency
        }
        pub fn weak_dependency<'this>(&'this self) -> &'this [i32] {
            &self.weak_dependency
        }
        pub fn message_type<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'this>]{
            unsafe { self.message_type.cast_item_unchecked() }
        }
        pub fn enum_type<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'this>]{
            unsafe { self.enum_type.cast_item_unchecked() }
        }
        pub fn service<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::ServiceDescriptorProtoBumpalo<'this>]{
            unsafe { self.service.cast_item_unchecked() }
        }
        pub fn extension<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this>]{
            unsafe { self.extension.cast_item_unchecked() }
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::FileOptionsBumpalo<'this>,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::FileOptionsBumpalo<'this>,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn source_code_info_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::SourceCodeInfoBumpalo<
                'this,
            >,
        > {
            self.source_code_info
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn source_code_info<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::SourceCodeInfoBumpalo<
                'this,
            >,
        > {
            self.source_code_info_opt()
        }

        pub fn has_source_code_info(&self) -> bool {
            self.source_code_info_opt().is_some()
        }
        pub fn syntax_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.syntax)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn syntax<'this>(&'this self) -> &'this str {
            match self.syntax_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_syntax(&self) -> bool {
            self.syntax_opt().is_some()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn clear_package(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn package_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_package() {
                self.package = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            unsafe { self.package.as_mut_string_in(self._bump) }
        }
        pub fn dependency_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::AddBumpVecView<'bump, 'this, ::puroro::internal::NoAllocBumpString>
        {
            unsafe { self.dependency.as_add_bump_vec_view_in(self._bump) }
        }
        pub fn public_dependency_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, i32> {
            unsafe { self.public_dependency.as_mut_vec_in(self._bump) }
        }
        pub fn weak_dependency_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, i32> {
            unsafe { self.weak_dependency.as_mut_vec_in(self._bump) }
        }
        pub fn message_type_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.message_type.as_mut_vec_in(self._bump) }
        }
        pub fn enum_type_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.enum_type.as_mut_vec_in(self._bump) }
        }
        pub fn service_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::ServiceDescriptorProtoBumpalo<
                'bump,
            >,
        > {
            unsafe { self.service.as_mut_vec_in(self._bump) }
        }
        pub fn extension_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.extension.as_mut_vec_in(self._bump) }
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(
            &'this mut self,
        ) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::FileOptionsBumpalo<'bump>
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
        pub fn clear_source_code_info(&mut self) {
            self.source_code_info = ::std::default::Default::default();
        }
        pub fn source_code_info_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::SourceCodeInfoBumpalo<'bump>{
            if !self.has_source_code_info() {
                self.source_code_info = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.source_code_info.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
        pub fn clear_syntax(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn syntax_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_syntax() {
                self.syntax = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            unsafe { self.syntax.as_mut_string_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::FileDescriptorProto>
        for FileDescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for FileDescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for FileDescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::FileDescriptorProtoTrait for FileDescriptorProtoBumpalo<'bump> {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        fn package_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::package_opt(self)
        }
        type DependencyRepeatedType<'this> =
    ::puroro::AsRefRepeatedField<
        'this,
        ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
        ::puroro::internal::NoAllocBumpString,str,
    > where Self: 'this;

        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.dependency)
        }
        type PublicDependencyRepeatedType<'this> =
    ::puroro::CloneThenIntoRepeatedField<
        'this,
        ::puroro::internal::NoAllocBumpVec<i32>,
        i32,
        i32
    > where Self: 'this;

        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::CloneThenIntoRepeatedField::new(&self.public_dependency)
        }
        type WeakDependencyRepeatedType<'this> =
    ::puroro::CloneThenIntoRepeatedField<
        'this,
        ::puroro::internal::NoAllocBumpVec<i32>,
        i32,
        i32
    > where Self: 'this;

        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::CloneThenIntoRepeatedField::new(&self.weak_dependency)
        }
        type MessageTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'this> where Self: 'this;
        type MessageTypeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'this>] where Self: 'this;

        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            unsafe { self.message_type.cast_item_unchecked() }
        }
        type EnumTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'this> where Self: 'this;
        type EnumTypeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            unsafe { self.enum_type.cast_item_unchecked() }
        }
        type ServiceMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::ServiceDescriptorProtoBumpalo<'this> where Self: 'this;
        type ServiceRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::ServiceDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            unsafe { self.service.cast_item_unchecked() }
        }
        type ExtensionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this> where Self: 'this;
        type ExtensionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            unsafe { self.extension.cast_item_unchecked() }
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::FileOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
        type SourceCodeInfoMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::SourceCodeInfoBumpalo<'this> where Self: 'this;
        fn source_code_info_opt<'this>(
            &'this self,
        ) -> Option<Self::SourceCodeInfoMessageType<'this>> {
            <Self>::source_code_info_opt(self)
        }
        fn syntax_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::syntax_opt(self)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for FileDescriptorProtoBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.package, data, self._bump)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::String
                >::deser_field(&mut self.dependency, data, self._bump)
            }
            10 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Int32
                >::deser_field(&mut self.public_dependency, data, self._bump)
            }
            11 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Int32
                >::deser_field(&mut self.weak_dependency, data, self._bump)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.message_type, data, self._bump)
            }
            5 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.enum_type, data, self._bump)
            }
            6 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::ServiceDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.service, data, self._bump)
            }
            7 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.extension, data, self._bump)
            }
            8 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::FileOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }
            9 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::SourceCodeInfoBumpalo<'bump>>>
                >::deser_field(&mut self.source_code_info, data, self._bump)
            }
            12 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.syntax, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for FileDescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::FileDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::MessageTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::EnumTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ServiceMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ExtensionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::package_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::dependency(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::public_dependency(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::weak_dependency(self),
                11,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FileDescriptorProtoTrait>::MessageTypeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileDescriptorProtoTrait>::message_type(self),
            4,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::EnumTypeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::enum_type(self),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ServiceMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::service(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::ExtensionMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::extension(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FileDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::options_opt(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileDescriptorProtoTrait>::source_code_info_opt(self),
            9,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileDescriptorProtoTrait>::syntax_opt(self),
                12,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct FileDescriptorProtoBuilder<T>(T);

    impl<T> FileDescriptorProtoBuilder<T>
    where
        T: FileDescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileDescriptorProtoBuilder<(T, FileDescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileDescriptorProtoBuilder((self.0, FileDescriptorProtoSingleField1 { name: value }))
        }

        pub fn append_package<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileDescriptorProtoBuilder<(T, FileDescriptorProtoSingleField2<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileDescriptorProtoBuilder((self.0, FileDescriptorProtoSingleField2 { package: value }))
        }

        pub fn append_dependency<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorProtoBuilder<(
            T,
            FileDescriptorProtoSingleField3<ScalarType, RepeatedType>,
        )>
        where
            ScalarType: ::std::convert::AsRef<str>,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorProtoBuilder((
                self.0,
                FileDescriptorProtoSingleField3 { dependency: value },
            ))
        }

        pub fn append_public_dependency<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorProtoBuilder<(
            T,
            FileDescriptorProtoSingleField10<ScalarType, RepeatedType>,
        )>
        where
            ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorProtoBuilder((
                self.0,
                FileDescriptorProtoSingleField10 {
                    public_dependency: value,
                },
            ))
        }

        pub fn append_weak_dependency<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorProtoBuilder<(
            T,
            FileDescriptorProtoSingleField11<ScalarType, RepeatedType>,
        )>
        where
            ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorProtoBuilder((
                self.0,
                FileDescriptorProtoSingleField11 {
                    weak_dependency: value,
                },
            ))
        }

        pub fn append_message_type<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorProtoBuilder<(
            T,
            FileDescriptorProtoSingleField4<ScalarType, RepeatedType>,
        )>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorProtoBuilder((
                self.0,
                FileDescriptorProtoSingleField4 {
                    message_type: value,
                },
            ))
        }

        pub fn append_enum_type<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorProtoBuilder<(
            T,
            FileDescriptorProtoSingleField5<ScalarType, RepeatedType>,
        )>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorProtoBuilder((
                self.0,
                FileDescriptorProtoSingleField5 { enum_type: value },
            ))
        }

        pub fn append_service<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorProtoBuilder<(
            T,
            FileDescriptorProtoSingleField6<ScalarType, RepeatedType>,
        )>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorProtoBuilder((self.0, FileDescriptorProtoSingleField6 { service: value }))
        }

        pub fn append_extension<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileDescriptorProtoBuilder<(
            T,
            FileDescriptorProtoSingleField7<ScalarType, RepeatedType>,
        )>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileDescriptorProtoBuilder((
                self.0,
                FileDescriptorProtoSingleField7 { extension: value },
            ))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileDescriptorProtoBuilder<(T, FileDescriptorProtoSingleField8<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait,
        {
            FileDescriptorProtoBuilder((self.0, FileDescriptorProtoSingleField8 { options: value }))
        }

        pub fn append_source_code_info<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileDescriptorProtoBuilder<(T, FileDescriptorProtoSingleField9<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait,
        {
            FileDescriptorProtoBuilder((
                self.0,
                FileDescriptorProtoSingleField9 {
                    source_code_info: value,
                },
            ))
        }

        pub fn append_syntax<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileDescriptorProtoBuilder<(T, FileDescriptorProtoSingleField12<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileDescriptorProtoBuilder((self.0, FileDescriptorProtoSingleField12 { syntax: value }))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl FileDescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct DescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::DescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for DescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for DescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct DescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub field: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type FieldMessageType<'this> = &'this ScalarType where Self: 'this;

        type FieldRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            &self.field
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::DescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::FieldMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::FieldMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::field(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for DescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { field: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for DescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                field: ::std::clone::Clone::clone(&self.field),
            }
        }
    }

    pub struct DescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub extension: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = &'this ScalarType where Self: 'this;

        type ExtensionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            &self.extension
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::DescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::extension(self),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for DescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { extension: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for DescriptorProtoSingleField6<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                extension: ::std::clone::Clone::clone(&self.extension),
            }
        }
    }

    pub struct DescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub nested_type: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = &'this ScalarType where Self: 'this;

        type NestedTypeRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            &self.nested_type
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::DescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::NestedTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::NestedTypeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::nested_type(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for DescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { nested_type: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for DescriptorProtoSingleField3<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                nested_type: ::std::clone::Clone::clone(&self.nested_type),
            }
        }
    }

    pub struct DescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub enum_type: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = &'this ScalarType where Self: 'this;

        type EnumTypeRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            &self.enum_type
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::DescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::EnumTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::EnumTypeMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::enum_type(self),
                4,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for DescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { enum_type: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for DescriptorProtoSingleField4<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                enum_type: ::std::clone::Clone::clone(&self.enum_type),
            }
        }
    }

    pub struct DescriptorProtoSingleField5<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    pub extension_range: RepeatedType,
}

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
for DescriptorProtoSingleField5<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{}

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
for DescriptorProtoSingleField5<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    type FieldMessageType<'this> = () where Self: 'this;
    type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
    fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type ExtensionMessageType<'this> = () where Self: 'this;
    type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
    fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type NestedTypeMessageType<'this> = () where Self: 'this;
    type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
    fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type EnumTypeMessageType<'this> = () where Self: 'this;
    type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
    fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
type ExtensionRangeMessageType<'this> = &'this ScalarType where Self: 'this;

type ExtensionRangeRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
    &self.extension_range
}
    type OneofDeclMessageType<'this> = () where Self: 'this;
    type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
    fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type OptionsMessageType<'this> = () where Self: 'this;
    type ReservedRangeMessageType<'this> = () where Self: 'this;
    type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
    fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
    fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
}

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
for DescriptorProtoSingleField5<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    Self: super::_puroro_traits::DescriptorProtoTrait,
    for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionRangeMessageType<'a> :
        ::puroro::internal::se::SerMessageToIoWrite,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionRangeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::DescriptorProtoTrait>::extension_range(self),
            5,
            out,
            false,
        )?;
        ::std::result::Result::Ok(())
    }
}

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
for DescriptorProtoSingleField5<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    fn from(value: RepeatedType) -> Self {
        Self {
            extension_range: value,
        }
    }
}

    impl<ScalarType, RepeatedType> ::std::clone::Clone
for DescriptorProtoSingleField5<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    RepeatedType: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self {
            extension_range: ::std::clone::Clone::clone(&self.extension_range),
        }
    }
}

    pub struct DescriptorProtoSingleField8<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub oneof_decl: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField8<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField8<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = &'this ScalarType where Self: 'this;

        type OneofDeclRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            &self.oneof_decl
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField8<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::DescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::OneofDeclMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::OneofDeclMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::oneof_decl(self),
                8,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for DescriptorProtoSingleField8<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { oneof_decl: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for DescriptorProtoSingleField8<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                oneof_decl: ::std::clone::Clone::clone(&self.oneof_decl),
            }
        }
    }

    pub struct DescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait,
    {
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait,
        Self: super::_puroro_traits::DescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::OptionsMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::options_opt(self),
                7,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for DescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for DescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    pub struct DescriptorProtoSingleField9<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    pub reserved_range: RepeatedType,
}

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
for DescriptorProtoSingleField9<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{}

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
for DescriptorProtoSingleField9<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    type FieldMessageType<'this> = () where Self: 'this;
    type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
    fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type ExtensionMessageType<'this> = () where Self: 'this;
    type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
    fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type NestedTypeMessageType<'this> = () where Self: 'this;
    type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
    fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type EnumTypeMessageType<'this> = () where Self: 'this;
    type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
    fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type ExtensionRangeMessageType<'this> = () where Self: 'this;
    type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
    fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type OneofDeclMessageType<'this> = () where Self: 'this;
    type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
    fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type OptionsMessageType<'this> = () where Self: 'this;
type ReservedRangeMessageType<'this> = &'this ScalarType where Self: 'this;

type ReservedRangeRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
    &self.reserved_range
}
    type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
    fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
}

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
for DescriptorProtoSingleField9<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    Self: super::_puroro_traits::DescriptorProtoTrait,
    for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::ReservedRangeMessageType<'a> :
        ::puroro::internal::se::SerMessageToIoWrite,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::DescriptorProtoTrait>::ReservedRangeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::DescriptorProtoTrait>::reserved_range(self),
            9,
            out,
            false,
        )?;
        ::std::result::Result::Ok(())
    }
}

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
for DescriptorProtoSingleField9<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    fn from(value: RepeatedType) -> Self {
        Self {
            reserved_range: value,
        }
    }
}

    impl<ScalarType, RepeatedType> ::std::clone::Clone
for DescriptorProtoSingleField9<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    RepeatedType: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self {
            reserved_range: ::std::clone::Clone::clone(&self.reserved_range),
        }
    }
}

    pub struct DescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub reserved_name: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::DescriptorProto>
        for DescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::DescriptorProtoTrait
        for DescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>> where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>> where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>> where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>> where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>> where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>> where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        type ReservedNameRepeatedType<'this> =
    ::puroro::AsRefRepeatedField<
        'this,
        RepeatedType,
        ScalarType,str,
    > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.reserved_name)
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for DescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::DescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::reserved_name(self),
                10,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for DescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                reserved_name: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for DescriptorProtoSingleField10<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                reserved_name: ::std::clone::Clone::clone(&self.reserved_name),
            }
        }
    }
    pub struct DescriptorProtoBumpalo<'bump> {
    _bump: &'bump ::puroro::bumpalo::Bump,
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (1 + 31) / 32],
    >,
    name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
    field: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>>,
    extension: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>>,
    nested_type: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'bump>>,
    enum_type: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'bump>>,
    extension_range: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ExtensionRangeBumpalo<'bump>>,
    oneof_decl: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_impls::OneofDescriptorProtoBumpalo<'bump>>,
    options: ::std::option::Option<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::MessageOptionsBumpalo<'bump>>>,
    reserved_range: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ReservedRangeBumpalo<'bump>>,
    reserved_name: ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
}

    pub type DescriptorProtoBumpaloOwned = ::puroro::BumpaloOwned<DescriptorProtoBumpalo<'static>>;
    impl<'bump> DescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                field: ::std::default::Default::default(),
                extension: ::std::default::Default::default(),
                nested_type: ::std::default::Default::default(),
                enum_type: ::std::default::Default::default(),
                extension_range: ::std::default::Default::default(),
                oneof_decl: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                reserved_range: ::std::default::Default::default(),
                reserved_name: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn field<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this>]{
            unsafe { self.field.cast_item_unchecked() }
        }
        pub fn extension<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this>]{
            unsafe { self.extension.cast_item_unchecked() }
        }
        pub fn nested_type<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'this>]{
            unsafe { self.nested_type.cast_item_unchecked() }
        }
        pub fn enum_type<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'this>]{
            unsafe { self.enum_type.cast_item_unchecked() }
        }
        pub fn extension_range<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ExtensionRangeBumpalo<'this>]{
            unsafe { self.extension_range.cast_item_unchecked() }
        }
        pub fn oneof_decl<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::OneofDescriptorProtoBumpalo<'this>]{
            unsafe { self.oneof_decl.cast_item_unchecked() }
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::MessageOptionsBumpalo<
                'this,
            >,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::MessageOptionsBumpalo<
                'this,
            >,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn reserved_range<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ReservedRangeBumpalo<'this>]{
            unsafe { self.reserved_range.cast_item_unchecked() }
        }
        pub fn reserved_name<'this>(&'this self) -> &'this [impl ::std::ops::Deref<Target = str>] {
            &self.reserved_name
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn field_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.field.as_mut_vec_in(self._bump) }
        }
        pub fn extension_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.extension.as_mut_vec_in(self._bump) }
        }
        pub fn nested_type_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.nested_type.as_mut_vec_in(self._bump) }
        }
        pub fn enum_type_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.enum_type.as_mut_vec_in(self._bump) }
        }
        pub fn extension_range_mut<'this>(&'this mut self) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ExtensionRangeBumpalo<'bump>>{
            unsafe { self.extension_range.as_mut_vec_in(self._bump) }
        }
        pub fn oneof_decl_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::OneofDescriptorProtoBumpalo<'bump>,
        > {
            unsafe { self.oneof_decl.as_mut_vec_in(self._bump) }
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::MessageOptionsBumpalo<'bump>{
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
        pub fn reserved_range_mut<'this>(&'this mut self) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ReservedRangeBumpalo<'bump>>{
            unsafe { self.reserved_range.as_mut_vec_in(self._bump) }
        }
        pub fn reserved_name_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::AddBumpVecView<'bump, 'this, ::puroro::internal::NoAllocBumpString>
        {
            unsafe { self.reserved_name.as_add_bump_vec_view_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::DescriptorProto>
        for DescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for DescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for DescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::DescriptorProtoTrait for DescriptorProtoBumpalo<'bump> {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        type FieldMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this> where Self: 'this;
        type FieldRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            unsafe { self.field.cast_item_unchecked() }
        }
        type ExtensionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this> where Self: 'this;
        type ExtensionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            unsafe { self.extension.cast_item_unchecked() }
        }
        type NestedTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'this> where Self: 'this;
        type NestedTypeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'this>] where Self: 'this;

        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            unsafe { self.nested_type.cast_item_unchecked() }
        }
        type EnumTypeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'this> where Self: 'this;
        type EnumTypeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            unsafe { self.enum_type.cast_item_unchecked() }
        }
        type ExtensionRangeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ExtensionRangeBumpalo<'this> where Self: 'this;
        type ExtensionRangeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ExtensionRangeBumpalo<'this>] where Self: 'this;

        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            unsafe { self.extension_range.cast_item_unchecked() }
        }
        type OneofDeclMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::OneofDescriptorProtoBumpalo<'this> where Self: 'this;
        type OneofDeclRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::OneofDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            unsafe { self.oneof_decl.cast_item_unchecked() }
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::MessageOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
        type ReservedRangeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ReservedRangeBumpalo<'this> where Self: 'this;
        type ReservedRangeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ReservedRangeBumpalo<'this>] where Self: 'this;

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            unsafe { self.reserved_range.cast_item_unchecked() }
        }
        type ReservedNameRepeatedType<'this> =
    ::puroro::AsRefRepeatedField<
        'this,
        ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
        ::puroro::internal::NoAllocBumpString,str,
    > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.reserved_name)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for DescriptorProtoBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.field, data, self._bump)
            }
            6 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::FieldDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.extension, data, self._bump)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::DescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.nested_type, data, self._bump)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::EnumDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.enum_type, data, self._bump)
            }
            5 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ExtensionRangeBumpalo<'bump>>
                >::deser_field(&mut self.extension_range, data, self._bump)
            }
            8 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::OneofDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.oneof_decl, data, self._bump)
            }
            7 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::MessageOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }
            9 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_impls::ReservedRangeBumpalo<'bump>>
                >::deser_field(&mut self.reserved_range, data, self._bump)
            }
            10 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::String
                >::deser_field(&mut self.reserved_name, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for DescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::DescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::FieldMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::NestedTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::EnumTypeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionRangeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::OneofDeclMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::DescriptorProtoTrait>::ReservedRangeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::FieldMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::field(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::extension(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::NestedTypeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::nested_type(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::EnumTypeMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::enum_type(self),
                4,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::DescriptorProtoTrait>::ExtensionRangeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::DescriptorProtoTrait>::extension_range(self),
            5,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::OneofDeclMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::oneof_decl(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::OptionsMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::options_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::DescriptorProtoTrait>::ReservedRangeMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::reserved_range(self),
                9,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::DescriptorProtoTrait>::reserved_name(self),
                10,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct DescriptorProtoBuilder<T>(T);

    impl<T> DescriptorProtoBuilder<T>
    where
        T: DescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            DescriptorProtoBuilder((self.0, DescriptorProtoSingleField1 { name: value }))
        }

        pub fn append_field<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField2<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            DescriptorProtoBuilder((self.0, DescriptorProtoSingleField2 { field: value }))
        }

        pub fn append_extension<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField6<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            DescriptorProtoBuilder((self.0, DescriptorProtoSingleField6 { extension: value }))
        }

        pub fn append_nested_type<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField3<ScalarType, RepeatedType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            DescriptorProtoBuilder((self.0, DescriptorProtoSingleField3 { nested_type: value }))
        }

        pub fn append_enum_type<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField4<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            DescriptorProtoBuilder((self.0, DescriptorProtoSingleField4 { enum_type: value }))
        }

    pub fn append_extension_range<ScalarType, RepeatedType>(self, value: RepeatedType)
        -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField5<ScalarType, RepeatedType>)>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> +
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
            DescriptorProtoBuilder((
                self.0,
                DescriptorProtoSingleField5 {
                    extension_range: value,
                },
            ))
        }

        pub fn append_oneof_decl<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField8<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            DescriptorProtoBuilder((self.0, DescriptorProtoSingleField8 { oneof_decl: value }))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField7<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait,
        {
            DescriptorProtoBuilder((self.0, DescriptorProtoSingleField7 { options: value }))
        }

    pub fn append_reserved_range<ScalarType, RepeatedType>(self, value: RepeatedType)
        -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField9<ScalarType, RepeatedType>)>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> +
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
            DescriptorProtoBuilder((
                self.0,
                DescriptorProtoSingleField9 {
                    reserved_range: value,
                },
            ))
        }

        pub fn append_reserved_name<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> DescriptorProtoBuilder<(T, DescriptorProtoSingleField10<ScalarType, RepeatedType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            DescriptorProtoBuilder((
                self.0,
                DescriptorProtoSingleField10 {
                    reserved_name: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl DescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct ExtensionRangeOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::ExtensionRangeOptions>
        for ExtensionRangeOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::ExtensionRangeOptionsTrait
        for ExtensionRangeOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for ExtensionRangeOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::ExtensionRangeOptionsTrait,
        for<'a> <Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<
            'a,
        >: ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for ExtensionRangeOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for ExtensionRangeOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct ExtensionRangeOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (0 + 31) / 32]>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type ExtensionRangeOptionsBumpaloOwned =
        ::puroro::BumpaloOwned<ExtensionRangeOptionsBumpalo<'static>>;
    impl<'bump> ExtensionRangeOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::ExtensionRangeOptions>
        for ExtensionRangeOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for ExtensionRangeOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for ExtensionRangeOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::ExtensionRangeOptionsTrait
        for ExtensionRangeOptionsBumpalo<'bump>
    {
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for ExtensionRangeOptionsBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for ExtensionRangeOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::ExtensionRangeOptionsTrait,
        for<'a> <Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<
            'a,
        >: ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ExtensionRangeOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct ExtensionRangeOptionsBuilder<T>(T);

    impl<T> ExtensionRangeOptionsBuilder<T>
    where
        T: ExtensionRangeOptionsTrait,
    {
        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> ExtensionRangeOptionsBuilder<(
            T,
            ExtensionRangeOptionsSingleField999<ScalarType, RepeatedType>,
        )>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            ExtensionRangeOptionsBuilder((
                self.0,
                ExtensionRangeOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl ExtensionRangeOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct FieldDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        pub number: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.number,
            )))
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::number_opt(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { number: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                number: ::std::clone::Clone::clone(&self.number),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
            > + ::std::clone::Clone,
    {
        pub label: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
            > + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
            > + ::std::clone::Clone,
    {
        fn label_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.label,
            )))
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
            > + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label>
        >::ser_field(
            <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::label_opt(self),
            4,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
            > + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { label: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
            > + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                label: ::std::clone::Clone::clone(&self.label),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
            > + ::std::clone::Clone,
    {
        pub r#type: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
            > + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
            > + ::std::clone::Clone,
    {
        fn type_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.r#type,
            )))
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
            > + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type>
        >::ser_field(
            <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::type_opt(self),
            5,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
            > + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { r#type: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
            > + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                r#type: ::std::clone::Clone::clone(&self.r#type),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub type_name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn type_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.type_name.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::type_name_opt(self),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { type_name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                type_name: ::std::clone::Clone::clone(&self.type_name),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub extendee: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn extendee_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.extendee.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::extendee_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { extendee: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                extendee: ::std::clone::Clone::clone(&self.extendee),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub default_value: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn default_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.default_value.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::default_value_opt(self),
                7,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                default_value: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                default_value: ::std::clone::Clone::clone(&self.default_value),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        pub oneof_index: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        fn oneof_index_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.oneof_index,
            )))
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::oneof_index_opt(self),
                9,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { oneof_index: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                oneof_index: ::std::clone::Clone::clone(&self.oneof_index),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub json_name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn json_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.json_name.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::json_name_opt(self),
                10,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { json_name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                json_name: ::std::clone::Clone::clone(&self.json_name),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait,
    {
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::options_opt(self),
                8,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField8<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    pub struct FieldDescriptorProtoSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub proto3_optional: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldDescriptorProto>
        for FieldDescriptorProtoSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        type OptionsMessageType<'this> = () where Self: 'this;

        fn proto3_optional_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.proto3_optional,
            )))
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldDescriptorProtoSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::proto3_optional_opt(
                    self,
                ),
                17,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldDescriptorProtoSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                proto3_optional: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldDescriptorProtoSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                proto3_optional: ::std::clone::Clone::clone(&self.proto3_optional),
            }
        }
    }
    pub struct FieldDescriptorProtoBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (10 + 31) / 32]>,
        name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        number: ::puroro::internal::Bare<i32>,
        label: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        >,
        r#type: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        >,
        type_name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        extendee: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        default_value: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        oneof_index: ::puroro::internal::Bare<i32>,
        json_name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        options: ::std::option::Option<
            ::puroro::internal::NoAllocBumpBox<
                self::_puroro_root::google::protobuf::_puroro_impls::FieldOptionsBumpalo<'bump>,
            >,
        >,
        proto3_optional: ::puroro::internal::Bare<bool>,
    }

    pub type FieldDescriptorProtoBumpaloOwned =
        ::puroro::BumpaloOwned<FieldDescriptorProtoBumpalo<'static>>;
    impl<'bump> FieldDescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                number: ::std::default::Default::default(),
                label: ::std::default::Default::default(),
                r#type: ::std::default::Default::default(),
                type_name: ::std::default::Default::default(),
                extendee: ::std::default::Default::default(),
                default_value: ::std::default::Default::default(),
                oneof_index: ::std::default::Default::default(),
                json_name: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                proto3_optional: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.number.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn number<'this>(&'this self) -> i32 {
            match self.number_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_number(&self) -> bool {
            self.number_opt().is_some()
        }
        pub fn label_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.label.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn label<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label
        {
            match self.label_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_label(&self) -> bool {
            self.label_opt().is_some()
        }
        pub fn type_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.r#type.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn r#type<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type
        {
            match self.type_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_type(&self) -> bool {
            self.type_opt().is_some()
        }
        pub fn type_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.type_name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn type_name<'this>(&'this self) -> &'this str {
            match self.type_name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_type_name(&self) -> bool {
            self.type_name_opt().is_some()
        }
        pub fn extendee_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.extendee)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn extendee<'this>(&'this self) -> &'this str {
            match self.extendee_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_extendee(&self) -> bool {
            self.extendee_opt().is_some()
        }
        pub fn default_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(6).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.default_value)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn default_value<'this>(&'this self) -> &'this str {
            match self.default_value_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_default_value(&self) -> bool {
            self.default_value_opt().is_some()
        }
        pub fn oneof_index_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            if self._bitfield.get(7).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.oneof_index.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn oneof_index<'this>(&'this self) -> i32 {
            match self.oneof_index_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_oneof_index(&self) -> bool {
            self.oneof_index_opt().is_some()
        }
        pub fn json_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(8).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.json_name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn json_name<'this>(&'this self) -> &'this str {
            match self.json_name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_json_name(&self) -> bool {
            self.json_name_opt().is_some()
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::FieldOptionsBumpalo<'this>,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::FieldOptionsBumpalo<'this>,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn proto3_optional_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(9).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.proto3_optional.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn proto3_optional<'this>(&'this self) -> bool {
            match self.proto3_optional_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_proto3_optional(&self) -> bool {
            self.proto3_optional_opt().is_some()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn clear_number(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn number_mut<'this>(&'this mut self) -> &'this mut i32 {
            if !self.has_number() {
                self.number = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.number
        }
        pub fn clear_label(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn label_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label{
            if !self.has_label() {
                self.label = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.label
        }
        pub fn clear_type(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn type_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type{
            if !self.has_type() {
                self.r#type = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.r#type
        }
        pub fn clear_type_name(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn type_name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_type_name() {
                self.type_name = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            unsafe { self.type_name.as_mut_string_in(self._bump) }
        }
        pub fn clear_extendee(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn extendee_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_extendee() {
                self.extendee = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            unsafe { self.extendee.as_mut_string_in(self._bump) }
        }
        pub fn clear_default_value(&mut self) {
            self._bitfield.set(6, false);
        }
        pub fn default_value_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_default_value() {
                self.default_value = ::std::default::Default::default();
                self._bitfield.set(6, true);
            }
            unsafe { self.default_value.as_mut_string_in(self._bump) }
        }
        pub fn clear_oneof_index(&mut self) {
            self._bitfield.set(7, false);
        }
        pub fn oneof_index_mut<'this>(&'this mut self) -> &'this mut i32 {
            if !self.has_oneof_index() {
                self.oneof_index = ::std::default::Default::default();
                self._bitfield.set(7, true);
            }
            &mut self.oneof_index
        }
        pub fn clear_json_name(&mut self) {
            self._bitfield.set(8, false);
        }
        pub fn json_name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_json_name() {
                self.json_name = ::std::default::Default::default();
                self._bitfield.set(8, true);
            }
            unsafe { self.json_name.as_mut_string_in(self._bump) }
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::FieldOptionsBumpalo<'bump>{
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
        pub fn clear_proto3_optional(&mut self) {
            self._bitfield.set(9, false);
        }
        pub fn proto3_optional_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_proto3_optional() {
                self.proto3_optional = ::std::default::Default::default();
                self._bitfield.set(9, true);
            }
            &mut self.proto3_optional
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::FieldDescriptorProto>
        for FieldDescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for FieldDescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for FieldDescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::FieldDescriptorProtoTrait
        for FieldDescriptorProtoBumpalo<'bump>
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        fn number_opt<'this>(&'this self) -> Option<i32> {
            <Self>::number_opt(self)
        }
        fn label_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            <Self>::label_opt(self)
        }
        fn type_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            <Self>::type_opt(self)
        }
        fn type_name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::type_name_opt(self)
        }
        fn extendee_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::extendee_opt(self)
        }
        fn default_value_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::default_value_opt(self)
        }
        fn oneof_index_opt<'this>(&'this self) -> Option<i32> {
            <Self>::oneof_index_opt(self)
        }
        fn json_name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::json_name_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::FieldOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
        fn proto3_optional_opt<'this>(&'this self) -> Option<bool> {
            <Self>::proto3_optional_opt(self)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for FieldDescriptorProtoBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            3 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int32
                >::deser_field(&mut self.number, data, self._bump)
            }
            4 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label>
                >::deser_field(&mut self.label, data, self._bump)
            }
            5 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type>
                >::deser_field(&mut self.r#type, data, self._bump)
            }
            6 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.type_name, data, self._bump)
            }
            2 => {
                self._bitfield.set(5, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.extendee, data, self._bump)
            }
            7 => {
                self._bitfield.set(6, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.default_value, data, self._bump)
            }
            9 => {
                self._bitfield.set(7, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int32
                >::deser_field(&mut self.oneof_index, data, self._bump)
            }
            10 => {
                self._bitfield.set(8, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.json_name, data, self._bump)
            }
            8 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::FieldOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }
            17 => {
                self._bitfield.set(9, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.proto3_optional, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for FieldDescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::FieldDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::number_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label>
        >::ser_field(
            <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::label_opt(self),
            4,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type>
        >::ser_field(
            <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::type_opt(self),
            5,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::type_name_opt(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::extendee_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::default_value_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::oneof_index_opt(self),
                9,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::json_name_opt(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::options_opt(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldDescriptorProtoTrait>::proto3_optional_opt(
                    self,
                ),
                17,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct FieldDescriptorProtoBuilder<T>(T);

    impl<T> FieldDescriptorProtoBuilder<T>
    where
        T: FieldDescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FieldDescriptorProtoBuilder((self.0, FieldDescriptorProtoSingleField1 { name: value }))
        }

        pub fn append_number<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField3<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField3 { number: value },
            ))
        }

    pub fn append_label<ScalarType>(self, value: ScalarType)
        -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField4<ScalarType>)>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label> + ::std::clone::Clone,
    {
            FieldDescriptorProtoBuilder((self.0, FieldDescriptorProtoSingleField4 { label: value }))
        }

    pub fn append_type<ScalarType>(self, value: ScalarType)
        -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField5<ScalarType>)>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type> + ::std::clone::Clone,
    {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField5 { r#type: value },
            ))
        }

        pub fn append_type_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField6<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField6 { type_name: value },
            ))
        }

        pub fn append_extendee<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField2<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField2 { extendee: value },
            ))
        }

        pub fn append_default_value<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField7<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField7 {
                    default_value: value,
                },
            ))
        }

        pub fn append_oneof_index<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField9<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField9 { oneof_index: value },
            ))
        }

        pub fn append_json_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField10<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField10 { json_name: value },
            ))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField8<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField8 { options: value },
            ))
        }

        pub fn append_proto3_optional<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldDescriptorProtoBuilder<(T, FieldDescriptorProtoSingleField17<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FieldDescriptorProtoBuilder((
                self.0,
                FieldDescriptorProtoSingleField17 {
                    proto3_optional: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl FieldDescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct OneofDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::OneofDescriptorProto>
        for OneofDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::OneofDescriptorProtoTrait
        for OneofDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for OneofDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::OneofDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for OneofDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for OneofDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct OneofDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::OneofDescriptorProto>
        for OneofDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::OneofDescriptorProtoTrait
        for OneofDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait,
    {
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for OneofDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait,
        Self: super::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::options_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for OneofDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for OneofDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }
    pub struct OneofDescriptorProtoBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        options: ::std::option::Option<
            ::puroro::internal::NoAllocBumpBox<
                self::_puroro_root::google::protobuf::_puroro_impls::OneofOptionsBumpalo<'bump>,
            >,
        >,
    }

    pub type OneofDescriptorProtoBumpaloOwned =
        ::puroro::BumpaloOwned<OneofDescriptorProtoBumpalo<'static>>;
    impl<'bump> OneofDescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::OneofOptionsBumpalo<'this>,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::OneofOptionsBumpalo<'this>,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::OneofOptionsBumpalo<'bump>{
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::OneofDescriptorProto>
        for OneofDescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for OneofDescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for OneofDescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::OneofDescriptorProtoTrait
        for OneofDescriptorProtoBumpalo<'bump>
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::OneofOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for OneofDescriptorProtoBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::OneofOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for OneofDescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::OneofDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::OneofDescriptorProtoTrait>::options_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct OneofDescriptorProtoBuilder<T>(T);

    impl<T> OneofDescriptorProtoBuilder<T>
    where
        T: OneofDescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> OneofDescriptorProtoBuilder<(T, OneofDescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            OneofDescriptorProtoBuilder((self.0, OneofDescriptorProtoSingleField1 { name: value }))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> OneofDescriptorProtoBuilder<(T, OneofDescriptorProtoSingleField2<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait,
        {
            OneofDescriptorProtoBuilder((
                self.0,
                OneofDescriptorProtoSingleField2 { options: value },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl OneofDescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct EnumDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumDescriptorProto>
        for EnumDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumDescriptorProtoTrait
        for EnumDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type ValueMessageType<'this> = () where Self: 'this;
        type ValueRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ValueMessageType<'this>> where Self: 'this;
        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::EnumDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for EnumDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct EnumDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub value: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::EnumDescriptorProto>
        for EnumDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::EnumDescriptorProtoTrait
        for EnumDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type ValueMessageType<'this> = &'this ScalarType where Self: 'this;

        type ValueRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            &self.value
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ValueMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ValueMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::value(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for EnumDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { value: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for EnumDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                value: ::std::clone::Clone::clone(&self.value),
            }
        }
    }

    pub struct EnumDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumDescriptorProto>
        for EnumDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumDescriptorProtoTrait
        for EnumDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait,
    {
        type ValueMessageType<'this> = () where Self: 'this;
        type ValueRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ValueMessageType<'this>> where Self: 'this;
        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait,
        Self: super::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::options_opt(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for EnumDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    pub struct EnumDescriptorProtoSingleField4<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    pub reserved_range: RepeatedType,
}

    impl<ScalarType, RepeatedType> ::puroro::Message<super::EnumDescriptorProto>
for EnumDescriptorProtoSingleField4<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{}

    impl<ScalarType, RepeatedType> super::_puroro_traits::EnumDescriptorProtoTrait
for EnumDescriptorProtoSingleField4<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    type ValueMessageType<'this> = () where Self: 'this;
    type ValueRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ValueMessageType<'this>> where Self: 'this;
    fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
    type OptionsMessageType<'this> = () where Self: 'this;
type ReservedRangeMessageType<'this> = &'this ScalarType where Self: 'this;

type ReservedRangeRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
    &self.reserved_range
}
    type ReservedNameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
    fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
}

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
for EnumDescriptorProtoSingleField4<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    Self: super::_puroro_traits::EnumDescriptorProtoTrait,
    for<'a> <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ReservedRangeMessageType<'a> :
        ::puroro::internal::se::SerMessageToIoWrite,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ReservedRangeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::reserved_range(self),
            4,
            out,
            false,
        )?;
        ::std::result::Result::Ok(())
    }
}

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
for EnumDescriptorProtoSingleField4<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    fn from(value: RepeatedType) -> Self {
        Self {
            reserved_range: value,
        }
    }
}

    impl<ScalarType, RepeatedType> ::std::clone::Clone
for EnumDescriptorProtoSingleField4<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    RepeatedType: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self {
            reserved_range: ::std::clone::Clone::clone(&self.reserved_range),
        }
    }
}

    pub struct EnumDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub reserved_name: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::EnumDescriptorProto>
        for EnumDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::EnumDescriptorProtoTrait
        for EnumDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type ValueMessageType<'this> = () where Self: 'this;
        type ValueRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ValueMessageType<'this>> where Self: 'this;
        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>> where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        type ReservedNameRepeatedType<'this> =
    ::puroro::AsRefRepeatedField<
        'this,
        RepeatedType,
        ScalarType,str,
    > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.reserved_name)
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::EnumDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::reserved_name(self),
                5,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for EnumDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                reserved_name: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for EnumDescriptorProtoSingleField5<ScalarType, RepeatedType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                reserved_name: ::std::clone::Clone::clone(&self.reserved_name),
            }
        }
    }
    pub struct EnumDescriptorProtoBumpalo<'bump> {
    _bump: &'bump ::puroro::bumpalo::Bump,
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (1 + 31) / 32],
    >,
    name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
    value: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_impls::EnumValueDescriptorProtoBumpalo<'bump>>,
    options: ::std::option::Option<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::EnumOptionsBumpalo<'bump>>>,
    reserved_range: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_impls::EnumReservedRangeBumpalo<'bump>>,
    reserved_name: ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
}

    pub type EnumDescriptorProtoBumpaloOwned =
        ::puroro::BumpaloOwned<EnumDescriptorProtoBumpalo<'static>>;
    impl<'bump> EnumDescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                value: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                reserved_range: ::std::default::Default::default(),
                reserved_name: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn value<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::EnumValueDescriptorProtoBumpalo<'this>]{
            unsafe { self.value.cast_item_unchecked() }
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumOptionsBumpalo<'this>,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumOptionsBumpalo<'this>,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn reserved_range<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_impls::EnumReservedRangeBumpalo<'this>]{
            unsafe { self.reserved_range.cast_item_unchecked() }
        }
        pub fn reserved_name<'this>(&'this self) -> &'this [impl ::std::ops::Deref<Target = str>] {
            &self.reserved_name
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn value_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::EnumValueDescriptorProtoBumpalo<
                'bump,
            >,
        > {
            unsafe { self.value.as_mut_vec_in(self._bump) }
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(
            &'this mut self,
        ) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::EnumOptionsBumpalo<'bump>
        {
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
        pub fn reserved_range_mut<'this>(&'this mut self) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_impls::EnumReservedRangeBumpalo<'bump>>{
            unsafe { self.reserved_range.as_mut_vec_in(self._bump) }
        }
        pub fn reserved_name_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::AddBumpVecView<'bump, 'this, ::puroro::internal::NoAllocBumpString>
        {
            unsafe { self.reserved_name.as_add_bump_vec_view_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::EnumDescriptorProto>
        for EnumDescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for EnumDescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for EnumDescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::EnumDescriptorProtoTrait for EnumDescriptorProtoBumpalo<'bump> {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        type ValueMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumValueDescriptorProtoBumpalo<'this> where Self: 'this;
        type ValueRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::EnumValueDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            unsafe { self.value.cast_item_unchecked() }
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
        type ReservedRangeMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_impls::EnumReservedRangeBumpalo<'this> where Self: 'this;
        type ReservedRangeRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_impls::EnumReservedRangeBumpalo<'this>] where Self: 'this;

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            unsafe { self.reserved_range.cast_item_unchecked() }
        }
        type ReservedNameRepeatedType<'this> =
    ::puroro::AsRefRepeatedField<
        'this,
        ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
        ::puroro::internal::NoAllocBumpString,str,
    > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::AsRefRepeatedField::new(&self.reserved_name)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for EnumDescriptorProtoBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::EnumValueDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.value, data, self._bump)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::EnumOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_impls::EnumReservedRangeBumpalo<'bump>>
                >::deser_field(&mut self.reserved_range, data, self._bump)
            }
            5 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::String
                >::deser_field(&mut self.reserved_name, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for EnumDescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::EnumDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ValueMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ReservedRangeMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ValueMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::value(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::options_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumDescriptorProtoTrait>::ReservedRangeMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::reserved_range(self),
            4,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumDescriptorProtoTrait>::reserved_name(self),
                5,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct EnumDescriptorProtoBuilder<T>(T);

    impl<T> EnumDescriptorProtoBuilder<T>
    where
        T: EnumDescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumDescriptorProtoBuilder<(T, EnumDescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            EnumDescriptorProtoBuilder((self.0, EnumDescriptorProtoSingleField1 { name: value }))
        }

        pub fn append_value<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> EnumDescriptorProtoBuilder<(
            T,
            EnumDescriptorProtoSingleField2<ScalarType, RepeatedType>,
        )>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            EnumDescriptorProtoBuilder((self.0, EnumDescriptorProtoSingleField2 { value: value }))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumDescriptorProtoBuilder<(T, EnumDescriptorProtoSingleField3<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait,
        {
            EnumDescriptorProtoBuilder((self.0, EnumDescriptorProtoSingleField3 { options: value }))
        }

    pub fn append_reserved_range<ScalarType, RepeatedType>(self, value: RepeatedType)
        -> EnumDescriptorProtoBuilder<(T, EnumDescriptorProtoSingleField4<ScalarType, RepeatedType>)>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> +
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
            EnumDescriptorProtoBuilder((
                self.0,
                EnumDescriptorProtoSingleField4 {
                    reserved_range: value,
                },
            ))
        }

        pub fn append_reserved_name<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> EnumDescriptorProtoBuilder<(
            T,
            EnumDescriptorProtoSingleField5<ScalarType, RepeatedType>,
        )>
        where
            ScalarType: ::std::convert::AsRef<str>,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            EnumDescriptorProtoBuilder((
                self.0,
                EnumDescriptorProtoSingleField5 {
                    reserved_name: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl EnumDescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct EnumValueDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumValueDescriptorProto>
        for EnumValueDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumValueDescriptorProtoTrait
        for EnumValueDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumValueDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::EnumValueDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType>
        for EnumValueDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumValueDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct EnumValueDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        pub number: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumValueDescriptorProto>
        for EnumValueDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumValueDescriptorProtoTrait
        for EnumValueDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.number,
            )))
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumValueDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        Self: super::_puroro_traits::EnumValueDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::number_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType>
        for EnumValueDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { number: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumValueDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                number: ::std::clone::Clone::clone(&self.number),
            }
        }
    }

    pub struct EnumValueDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumValueDescriptorProto>
        for EnumValueDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumValueDescriptorProtoTrait
        for EnumValueDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait,
    {
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumValueDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait,
        Self: super::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::OptionsMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::options_opt(self),
            3,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType>
        for EnumValueDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumValueDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }
    pub struct EnumValueDescriptorProtoBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (2 + 31) / 32]>,
        name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        number: ::puroro::internal::Bare<i32>,
        options: ::std::option::Option<
            ::puroro::internal::NoAllocBumpBox<
                self::_puroro_root::google::protobuf::_puroro_impls::EnumValueOptionsBumpalo<'bump>,
            >,
        >,
    }

    pub type EnumValueDescriptorProtoBumpaloOwned =
        ::puroro::BumpaloOwned<EnumValueDescriptorProtoBumpalo<'static>>;
    impl<'bump> EnumValueDescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                number: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.number.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn number<'this>(&'this self) -> i32 {
            match self.number_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_number(&self) -> bool {
            self.number_opt().is_some()
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumValueOptionsBumpalo<
                'this,
            >,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumValueOptionsBumpalo<
                'this,
            >,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn clear_number(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn number_mut<'this>(&'this mut self) -> &'this mut i32 {
            if !self.has_number() {
                self.number = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.number
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::EnumValueOptionsBumpalo<'bump>{
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::EnumValueDescriptorProto>
        for EnumValueDescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for EnumValueDescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for EnumValueDescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::EnumValueDescriptorProtoTrait
        for EnumValueDescriptorProtoBumpalo<'bump>
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        fn number_opt<'this>(&'this self) -> Option<i32> {
            <Self>::number_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::EnumValueOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for EnumValueDescriptorProtoBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int32
                >::deser_field(&mut self.number, data, self._bump)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::EnumValueOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for EnumValueDescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::EnumValueDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int32,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::number_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::OptionsMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumValueDescriptorProtoTrait>::options_opt(self),
            3,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct EnumValueDescriptorProtoBuilder<T>(T);

    impl<T> EnumValueDescriptorProtoBuilder<T>
    where
        T: EnumValueDescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumValueDescriptorProtoBuilder<(T, EnumValueDescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            EnumValueDescriptorProtoBuilder((
                self.0,
                EnumValueDescriptorProtoSingleField1 { name: value },
            ))
        }

        pub fn append_number<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumValueDescriptorProtoBuilder<(T, EnumValueDescriptorProtoSingleField2<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
        {
            EnumValueDescriptorProtoBuilder((
                self.0,
                EnumValueDescriptorProtoSingleField2 { number: value },
            ))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumValueDescriptorProtoBuilder<(T, EnumValueDescriptorProtoSingleField3<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait,
        {
            EnumValueDescriptorProtoBuilder((
                self.0,
                EnumValueDescriptorProtoSingleField3 { options: value },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl EnumValueDescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct ServiceDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::ServiceDescriptorProto>
        for ServiceDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::ServiceDescriptorProtoTrait
        for ServiceDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type MethodMessageType<'this> = () where Self: 'this;
        type MethodRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MethodMessageType<'this>> where Self: 'this;
        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for ServiceDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::ServiceDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for ServiceDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for ServiceDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct ServiceDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub method: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::ServiceDescriptorProto>
        for ServiceDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::ServiceDescriptorProtoTrait
        for ServiceDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type MethodMessageType<'this> = &'this ScalarType where Self: 'this;

        type MethodRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            &self.method
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for ServiceDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::MethodMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::MethodMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::method(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for ServiceDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self { method: value }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for ServiceDescriptorProtoSingleField2<ScalarType, RepeatedType>
    where
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                method: ::std::clone::Clone::clone(&self.method),
            }
        }
    }

    pub struct ServiceDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::ServiceDescriptorProto>
        for ServiceDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::ServiceDescriptorProtoTrait
        for ServiceDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait,
    {
        type MethodMessageType<'this> = () where Self: 'this;
        type MethodRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MethodMessageType<'this>> where Self: 'this;
        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for ServiceDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait,
        Self: super::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::OptionsMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::options_opt(self),
            3,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for ServiceDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for ServiceDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }
    pub struct ServiceDescriptorProtoBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        method: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::MethodDescriptorProtoBumpalo<
                'bump,
            >,
        >,
        options: ::std::option::Option<
            ::puroro::internal::NoAllocBumpBox<
                self::_puroro_root::google::protobuf::_puroro_impls::ServiceOptionsBumpalo<'bump>,
            >,
        >,
    }

    pub type ServiceDescriptorProtoBumpaloOwned =
        ::puroro::BumpaloOwned<ServiceDescriptorProtoBumpalo<'static>>;
    impl<'bump> ServiceDescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                method: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn method<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::MethodDescriptorProtoBumpalo<'this>]{
            unsafe { self.method.cast_item_unchecked() }
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::ServiceOptionsBumpalo<
                'this,
            >,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::ServiceOptionsBumpalo<
                'this,
            >,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn method_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::MethodDescriptorProtoBumpalo<
                'bump,
            >,
        > {
            unsafe { self.method.as_mut_vec_in(self._bump) }
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::ServiceOptionsBumpalo<'bump>{
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::ServiceDescriptorProto>
        for ServiceDescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for ServiceDescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for ServiceDescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::ServiceDescriptorProtoTrait
        for ServiceDescriptorProtoBumpalo<'bump>
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        type MethodMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::MethodDescriptorProtoBumpalo<'this> where Self: 'this;
        type MethodRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::MethodDescriptorProtoBumpalo<'this>] where Self: 'this;

        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            unsafe { self.method.cast_item_unchecked() }
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::ServiceOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for ServiceDescriptorProtoBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::MethodDescriptorProtoBumpalo<'bump>>
                >::deser_field(&mut self.method, data, self._bump)
            }
            3 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::ServiceOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for ServiceDescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::ServiceDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::MethodMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
        for<'a> <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::MethodMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::method(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::OptionsMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ServiceDescriptorProtoTrait>::options_opt(self),
            3,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct ServiceDescriptorProtoBuilder<T>(T);

    impl<T> ServiceDescriptorProtoBuilder<T>
    where
        T: ServiceDescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> ServiceDescriptorProtoBuilder<(T, ServiceDescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            ServiceDescriptorProtoBuilder((
                self.0,
                ServiceDescriptorProtoSingleField1 { name: value },
            ))
        }

        pub fn append_method<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> ServiceDescriptorProtoBuilder<(
            T,
            ServiceDescriptorProtoSingleField2<ScalarType, RepeatedType>,
        )>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            ServiceDescriptorProtoBuilder((
                self.0,
                ServiceDescriptorProtoSingleField2 { method: value },
            ))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> ServiceDescriptorProtoBuilder<(T, ServiceDescriptorProtoSingleField3<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait,
        {
            ServiceDescriptorProtoBuilder((
                self.0,
                ServiceDescriptorProtoSingleField3 { options: value },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl ServiceDescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct MethodDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub name: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MethodDescriptorProto>
        for MethodDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::MethodDescriptorProtoTrait
        for MethodDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.name.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MethodDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { name: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MethodDescriptorProtoSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                name: ::std::clone::Clone::clone(&self.name),
            }
        }
    }

    pub struct MethodDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub input_type: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MethodDescriptorProto>
        for MethodDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::MethodDescriptorProtoTrait
        for MethodDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn input_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.input_type.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::input_type_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MethodDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { input_type: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MethodDescriptorProtoSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                input_type: ::std::clone::Clone::clone(&self.input_type),
            }
        }
    }

    pub struct MethodDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub output_type: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MethodDescriptorProto>
        for MethodDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::MethodDescriptorProtoTrait
        for MethodDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn output_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.output_type.as_ref())
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::output_type_opt(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MethodDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { output_type: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MethodDescriptorProtoSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                output_type: ::std::clone::Clone::clone(&self.output_type),
            }
        }
    }

    pub struct MethodDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait,
    {
        pub options: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MethodDescriptorProto>
        for MethodDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait,
    {
    }

    impl<ScalarType> super::_puroro_traits::MethodDescriptorProtoTrait
        for MethodDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait,
    {
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait,
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::options_opt(self),
                4,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MethodDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait,
    {
        fn from(value: ScalarType) -> Self {
            Self { options: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MethodDescriptorProtoSingleField4<ScalarType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                options: ::std::clone::Clone::clone(&self.options),
            }
        }
    }

    pub struct MethodDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub client_streaming: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MethodDescriptorProto>
        for MethodDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::MethodDescriptorProtoTrait
        for MethodDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        type OptionsMessageType<'this> = () where Self: 'this;

        fn client_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.client_streaming,
            )))
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::client_streaming_opt(
                    self,
                ),
                5,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MethodDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                client_streaming: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MethodDescriptorProtoSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                client_streaming: ::std::clone::Clone::clone(&self.client_streaming),
            }
        }
    }

    pub struct MethodDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub server_streaming: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MethodDescriptorProto>
        for MethodDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::MethodDescriptorProtoTrait
        for MethodDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        type OptionsMessageType<'this> = () where Self: 'this;

        fn server_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.server_streaming,
            )))
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::server_streaming_opt(
                    self,
                ),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MethodDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                server_streaming: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MethodDescriptorProtoSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                server_streaming: ::std::clone::Clone::clone(&self.server_streaming),
            }
        }
    }
    pub struct MethodDescriptorProtoBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (5 + 31) / 32]>,
        name: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        input_type: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        output_type: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        options: ::std::option::Option<
            ::puroro::internal::NoAllocBumpBox<
                self::_puroro_root::google::protobuf::_puroro_impls::MethodOptionsBumpalo<'bump>,
            >,
        >,
        client_streaming: ::puroro::internal::Bare<bool>,
        server_streaming: ::puroro::internal::Bare<bool>,
    }

    pub type MethodDescriptorProtoBumpaloOwned =
        ::puroro::BumpaloOwned<MethodDescriptorProtoBumpalo<'static>>;
    impl<'bump> MethodDescriptorProtoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                input_type: ::std::default::Default::default(),
                output_type: ::std::default::Default::default(),
                options: ::std::default::Default::default(),
                client_streaming: ::std::default::Default::default(),
                server_streaming: ::std::default::Default::default(),
            }
        }
        pub fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.name)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn name<'this>(&'this self) -> &'this str {
            match self.name_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_name(&self) -> bool {
            self.name_opt().is_some()
        }
        pub fn input_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.input_type)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn input_type<'this>(&'this self) -> &'this str {
            match self.input_type_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_input_type(&self) -> bool {
            self.input_type_opt().is_some()
        }
        pub fn output_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.output_type)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn output_type<'this>(&'this self) -> &'this str {
            match self.output_type_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_output_type(&self) -> bool {
            self.output_type_opt().is_some()
        }
        pub fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::MethodOptionsBumpalo<'this>,
        > {
            self.options
                .as_ref()
                .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
        }
        pub fn options<'this>(
            &'this self,
        ) -> ::std::option::Option<
            &'this self::_puroro_root::google::protobuf::_puroro_impls::MethodOptionsBumpalo<'this>,
        > {
            self.options_opt()
        }

        pub fn has_options(&self) -> bool {
            self.options_opt().is_some()
        }
        pub fn client_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.client_streaming.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn client_streaming<'this>(&'this self) -> bool {
            match self.client_streaming_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_client_streaming(&self) -> bool {
            self.client_streaming_opt().is_some()
        }
        pub fn server_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.server_streaming.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn server_streaming<'this>(&'this self) -> bool {
            match self.server_streaming_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_server_streaming(&self) -> bool {
            self.server_streaming_opt().is_some()
        }
        pub fn clear_name(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn name_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_name() {
                self.name = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.name.as_mut_string_in(self._bump) }
        }
        pub fn clear_input_type(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn input_type_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_input_type() {
                self.input_type = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            unsafe { self.input_type.as_mut_string_in(self._bump) }
        }
        pub fn clear_output_type(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn output_type_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_output_type() {
                self.output_type = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            unsafe { self.output_type.as_mut_string_in(self._bump) }
        }
        pub fn clear_options(&mut self) {
            self.options = ::std::default::Default::default();
        }
        pub fn options_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::MethodOptionsBumpalo<'bump>{
            if !self.has_options() {
                self.options = ::std::default::Default::default();
            }
            let bump = self._bump;
            self.options.get_or_insert_with(|| {
                ::puroro::internal::NoAllocBumpBox::new_in(
                    ::puroro::internal::BumpDefault::default_in(bump),
                    bump,
                )
            })
        }
        pub fn clear_client_streaming(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn client_streaming_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_client_streaming() {
                self.client_streaming = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.client_streaming
        }
        pub fn clear_server_streaming(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn server_streaming_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_server_streaming() {
                self.server_streaming = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.server_streaming
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::MethodDescriptorProto>
        for MethodDescriptorProtoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for MethodDescriptorProtoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for MethodDescriptorProtoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::MethodDescriptorProtoTrait
        for MethodDescriptorProtoBumpalo<'bump>
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::name_opt(self)
        }
        fn input_type_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::input_type_opt(self)
        }
        fn output_type_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::output_type_opt(self)
        }
        type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::MethodOptionsBumpalo<'this> where Self: 'this;
        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            <Self>::options_opt(self)
        }
        fn client_streaming_opt<'this>(&'this self) -> Option<bool> {
            <Self>::client_streaming_opt(self)
        }
        fn server_streaming_opt<'this>(&'this self) -> Option<bool> {
            <Self>::server_streaming_opt(self)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for MethodDescriptorProtoBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.name, data, self._bump)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.input_type, data, self._bump)
            }
            3 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.output_type, data, self._bump)
            }
            4 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::MethodOptionsBumpalo<'bump>>>
                >::deser_field(&mut self.options, data, self._bump)
            }
            5 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.client_streaming, data, self._bump)
            }
            6 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.server_streaming, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for MethodDescriptorProtoBumpalo<'bump>
    where
        Self: super::_puroro_traits::MethodDescriptorProtoTrait,
        for<'a> <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::OptionsMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::name_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::input_type_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::output_type_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::OptionsMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::options_opt(self),
                4,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::client_streaming_opt(
                    self,
                ),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodDescriptorProtoTrait>::server_streaming_opt(
                    self,
                ),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct MethodDescriptorProtoBuilder<T>(T);

    impl<T> MethodDescriptorProtoBuilder<T>
    where
        T: MethodDescriptorProtoTrait,
    {
        pub fn append_name<ScalarType>(
            self,
            value: ScalarType,
        ) -> MethodDescriptorProtoBuilder<(T, MethodDescriptorProtoSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            MethodDescriptorProtoBuilder((
                self.0,
                MethodDescriptorProtoSingleField1 { name: value },
            ))
        }

        pub fn append_input_type<ScalarType>(
            self,
            value: ScalarType,
        ) -> MethodDescriptorProtoBuilder<(T, MethodDescriptorProtoSingleField2<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            MethodDescriptorProtoBuilder((
                self.0,
                MethodDescriptorProtoSingleField2 { input_type: value },
            ))
        }

        pub fn append_output_type<ScalarType>(
            self,
            value: ScalarType,
        ) -> MethodDescriptorProtoBuilder<(T, MethodDescriptorProtoSingleField3<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            MethodDescriptorProtoBuilder((
                self.0,
                MethodDescriptorProtoSingleField3 { output_type: value },
            ))
        }

        pub fn append_options<ScalarType>(
            self,
            value: ScalarType,
        ) -> MethodDescriptorProtoBuilder<(T, MethodDescriptorProtoSingleField4<ScalarType>)>
        where
            ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait,
        {
            MethodDescriptorProtoBuilder((
                self.0,
                MethodDescriptorProtoSingleField4 { options: value },
            ))
        }

        pub fn append_client_streaming<ScalarType>(
            self,
            value: ScalarType,
        ) -> MethodDescriptorProtoBuilder<(T, MethodDescriptorProtoSingleField5<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            MethodDescriptorProtoBuilder((
                self.0,
                MethodDescriptorProtoSingleField5 {
                    client_streaming: value,
                },
            ))
        }

        pub fn append_server_streaming<ScalarType>(
            self,
            value: ScalarType,
        ) -> MethodDescriptorProtoBuilder<(T, MethodDescriptorProtoSingleField6<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            MethodDescriptorProtoBuilder((
                self.0,
                MethodDescriptorProtoSingleField6 {
                    server_streaming: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl MethodDescriptorProtoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct FileOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub java_package: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField1<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn java_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.java_package.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for FileOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_package_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                java_package: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                java_package: ::std::clone::Clone::clone(&self.java_package),
            }
        }
    }

    pub struct FileOptionsSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub java_outer_classname: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField8<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn java_outer_classname_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.java_outer_classname.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for FileOptionsSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_outer_classname_opt(self),
                8,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                java_outer_classname: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                java_outer_classname: ::std::clone::Clone::clone(&self.java_outer_classname),
            }
        }
    }

    pub struct FileOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub java_multiple_files: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField10<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn java_multiple_files_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.java_multiple_files,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_multiple_files_opt(self),
                10,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                java_multiple_files: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                java_multiple_files: ::std::clone::Clone::clone(&self.java_multiple_files),
            }
        }
    }

    pub struct FileOptionsSingleField20<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub java_generate_equals_and_hash: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField20<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField20<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn java_generate_equals_and_hash_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.java_generate_equals_and_hash,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField20<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Bool
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::java_generate_equals_and_hash_opt(self),
            20,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField20<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                java_generate_equals_and_hash: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField20<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                java_generate_equals_and_hash: ::std::clone::Clone::clone(
                    &self.java_generate_equals_and_hash,
                ),
            }
        }
    }

    pub struct FileOptionsSingleField27<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub java_string_check_utf8: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField27<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField27<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn java_string_check_utf8_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.java_string_check_utf8,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField27<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_string_check_utf8_opt(self),
                27,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField27<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                java_string_check_utf8: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField27<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                java_string_check_utf8: ::std::clone::Clone::clone(&self.java_string_check_utf8),
            }
        }
    }

    pub struct FileOptionsSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
            > + ::std::clone::Clone,
    {
        pub optimize_for: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField9<ScalarType> where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
            > + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
            > + ::std::clone::Clone,
    {
        fn optimize_for_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        > {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.optimize_for,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for FileOptionsSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
            > + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::optimize_for_opt(self),
            9,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
            > + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                optimize_for: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField9<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
            > + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                optimize_for: ::std::clone::Clone::clone(&self.optimize_for),
            }
        }
    }

    pub struct FileOptionsSingleField11<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub go_package: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField11<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField11<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn go_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.go_package.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField11<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::go_package_opt(self),
                11,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField11<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self { go_package: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField11<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                go_package: ::std::clone::Clone::clone(&self.go_package),
            }
        }
    }

    pub struct FileOptionsSingleField16<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub cc_generic_services: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField16<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField16<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn cc_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.cc_generic_services,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField16<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::cc_generic_services_opt(self),
                16,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField16<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                cc_generic_services: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField16<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                cc_generic_services: ::std::clone::Clone::clone(&self.cc_generic_services),
            }
        }
    }

    pub struct FileOptionsSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub java_generic_services: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField17<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn java_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.java_generic_services,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_generic_services_opt(self),
                17,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                java_generic_services: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField17<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                java_generic_services: ::std::clone::Clone::clone(&self.java_generic_services),
            }
        }
    }

    pub struct FileOptionsSingleField18<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub py_generic_services: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField18<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField18<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn py_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.py_generic_services,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField18<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::py_generic_services_opt(self),
                18,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField18<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                py_generic_services: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField18<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                py_generic_services: ::std::clone::Clone::clone(&self.py_generic_services),
            }
        }
    }

    pub struct FileOptionsSingleField42<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub php_generic_services: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField42<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField42<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn php_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.php_generic_services,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField42<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_generic_services_opt(self),
                42,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField42<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                php_generic_services: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField42<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                php_generic_services: ::std::clone::Clone::clone(&self.php_generic_services),
            }
        }
    }

    pub struct FileOptionsSingleField23<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub deprecated: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField23<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField23<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.deprecated,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField23<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::deprecated_opt(self),
                23,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField23<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { deprecated: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField23<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
            }
        }
    }

    pub struct FileOptionsSingleField31<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub cc_enable_arenas: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField31<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField31<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn cc_enable_arenas_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.cc_enable_arenas,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField31<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::cc_enable_arenas_opt(self),
                31,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField31<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                cc_enable_arenas: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField31<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                cc_enable_arenas: ::std::clone::Clone::clone(&self.cc_enable_arenas),
            }
        }
    }

    pub struct FileOptionsSingleField36<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub objc_class_prefix: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField36<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField36<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn objc_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.objc_class_prefix.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField36<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::objc_class_prefix_opt(self),
                36,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField36<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                objc_class_prefix: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField36<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                objc_class_prefix: ::std::clone::Clone::clone(&self.objc_class_prefix),
            }
        }
    }

    pub struct FileOptionsSingleField37<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub csharp_namespace: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField37<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField37<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn csharp_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.csharp_namespace.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField37<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::csharp_namespace_opt(self),
                37,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField37<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                csharp_namespace: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField37<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                csharp_namespace: ::std::clone::Clone::clone(&self.csharp_namespace),
            }
        }
    }

    pub struct FileOptionsSingleField39<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub swift_prefix: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField39<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField39<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn swift_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.swift_prefix.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField39<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::swift_prefix_opt(self),
                39,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField39<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                swift_prefix: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField39<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                swift_prefix: ::std::clone::Clone::clone(&self.swift_prefix),
            }
        }
    }

    pub struct FileOptionsSingleField40<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub php_class_prefix: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField40<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField40<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn php_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.php_class_prefix.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField40<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_class_prefix_opt(self),
                40,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField40<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                php_class_prefix: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField40<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                php_class_prefix: ::std::clone::Clone::clone(&self.php_class_prefix),
            }
        }
    }

    pub struct FileOptionsSingleField41<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub php_namespace: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField41<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField41<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn php_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.php_namespace.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField41<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_namespace_opt(self),
                41,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField41<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                php_namespace: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField41<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                php_namespace: ::std::clone::Clone::clone(&self.php_namespace),
            }
        }
    }

    pub struct FileOptionsSingleField44<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub php_metadata_namespace: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField44<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField44<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn php_metadata_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.php_metadata_namespace.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField44<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_metadata_namespace_opt(self),
                44,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField44<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                php_metadata_namespace: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField44<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                php_metadata_namespace: ::std::clone::Clone::clone(&self.php_metadata_namespace),
            }
        }
    }

    pub struct FileOptionsSingleField45<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub ruby_package: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FileOptions> for FileOptionsSingleField45<ScalarType> where
        ScalarType: ::std::convert::AsRef<str>
    {
    }

    impl<ScalarType> super::_puroro_traits::FileOptionsTrait for FileOptionsSingleField45<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn ruby_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.ruby_package.as_ref())
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField45<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::FileOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::ruby_package_opt(self),
                45,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FileOptionsSingleField45<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                ruby_package: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FileOptionsSingleField45<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                ruby_package: ::std::clone::Clone::clone(&self.ruby_package),
            }
        }
    }

    pub struct FileOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FileOptions>
        for FileOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FileOptionsTrait
        for FileOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FileOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FileOptionsTrait,
        for<'a> <Self as super::_puroro_traits::FileOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FileOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FileOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FileOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct FileOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (20 + 31) / 32]>,
        java_package: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        java_outer_classname: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        java_multiple_files: ::puroro::internal::Bare<bool>,
        java_generate_equals_and_hash: ::puroro::internal::Bare<bool>,
        java_string_check_utf8: ::puroro::internal::Bare<bool>,
        optimize_for: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        >,
        go_package: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        cc_generic_services: ::puroro::internal::Bare<bool>,
        java_generic_services: ::puroro::internal::Bare<bool>,
        py_generic_services: ::puroro::internal::Bare<bool>,
        php_generic_services: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        cc_enable_arenas: ::puroro::internal::Bare<bool>,
        objc_class_prefix: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        csharp_namespace: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        swift_prefix: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        php_class_prefix: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        php_namespace: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        php_metadata_namespace: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        ruby_package: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type FileOptionsBumpaloOwned = ::puroro::BumpaloOwned<FileOptionsBumpalo<'static>>;
    impl<'bump> FileOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                java_package: ::std::default::Default::default(),
                java_outer_classname: ::std::default::Default::default(),
                java_multiple_files: ::std::default::Default::default(),
                java_generate_equals_and_hash: ::std::default::Default::default(),
                java_string_check_utf8: ::std::default::Default::default(),
                optimize_for: ::std::default::Default::default(),
                go_package: ::std::default::Default::default(),
                cc_generic_services: ::std::default::Default::default(),
                java_generic_services: ::std::default::Default::default(),
                py_generic_services: ::std::default::Default::default(),
                php_generic_services: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                cc_enable_arenas: ::std::default::Default::default(),
                objc_class_prefix: ::std::default::Default::default(),
                csharp_namespace: ::std::default::Default::default(),
                swift_prefix: ::std::default::Default::default(),
                php_class_prefix: ::std::default::Default::default(),
                php_namespace: ::std::default::Default::default(),
                php_metadata_namespace: ::std::default::Default::default(),
                ruby_package: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn java_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.java_package)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn java_package<'this>(&'this self) -> &'this str {
            match self.java_package_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_java_package(&self) -> bool {
            self.java_package_opt().is_some()
        }
        pub fn java_outer_classname_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.java_outer_classname)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn java_outer_classname<'this>(&'this self) -> &'this str {
            match self.java_outer_classname_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_java_outer_classname(&self) -> bool {
            self.java_outer_classname_opt().is_some()
        }
        pub fn java_multiple_files_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_multiple_files.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn java_multiple_files<'this>(&'this self) -> bool {
            match self.java_multiple_files_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_java_multiple_files(&self) -> bool {
            self.java_multiple_files_opt().is_some()
        }
        pub fn java_generate_equals_and_hash_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_generate_equals_and_hash.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn java_generate_equals_and_hash<'this>(&'this self) -> bool {
            match self.java_generate_equals_and_hash_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_java_generate_equals_and_hash(&self) -> bool {
            self.java_generate_equals_and_hash_opt().is_some()
        }
        pub fn java_string_check_utf8_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_string_check_utf8.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn java_string_check_utf8<'this>(&'this self) -> bool {
            match self.java_string_check_utf8_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_java_string_check_utf8(&self) -> bool {
            self.java_string_check_utf8_opt().is_some()
        }
        pub fn optimize_for_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        > {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.optimize_for.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn optimize_for<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode
        {
            match self.optimize_for_opt() {
            ::std::option::Option::Some(x) => x,
            _ => {
                self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode::Speed
            }
        }
        }

        pub fn has_optimize_for(&self) -> bool {
            self.optimize_for_opt().is_some()
        }
        pub fn go_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(6).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.go_package)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn go_package<'this>(&'this self) -> &'this str {
            match self.go_package_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_go_package(&self) -> bool {
            self.go_package_opt().is_some()
        }
        pub fn cc_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(7).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.cc_generic_services.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn cc_generic_services<'this>(&'this self) -> bool {
            match self.cc_generic_services_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_cc_generic_services(&self) -> bool {
            self.cc_generic_services_opt().is_some()
        }
        pub fn java_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(8).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.java_generic_services.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn java_generic_services<'this>(&'this self) -> bool {
            match self.java_generic_services_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_java_generic_services(&self) -> bool {
            self.java_generic_services_opt().is_some()
        }
        pub fn py_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(9).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.py_generic_services.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn py_generic_services<'this>(&'this self) -> bool {
            match self.py_generic_services_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_py_generic_services(&self) -> bool {
            self.py_generic_services_opt().is_some()
        }
        pub fn php_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(10).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.php_generic_services.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn php_generic_services<'this>(&'this self) -> bool {
            match self.php_generic_services_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_php_generic_services(&self) -> bool {
            self.php_generic_services_opt().is_some()
        }
        pub fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(11).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn deprecated<'this>(&'this self) -> bool {
            match self.deprecated_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_deprecated(&self) -> bool {
            self.deprecated_opt().is_some()
        }
        pub fn cc_enable_arenas_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(12).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.cc_enable_arenas.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn cc_enable_arenas<'this>(&'this self) -> bool {
            match self.cc_enable_arenas_opt() {
                ::std::option::Option::Some(x) => x,
                _ => true,
            }
        }

        pub fn has_cc_enable_arenas(&self) -> bool {
            self.cc_enable_arenas_opt().is_some()
        }
        pub fn objc_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(13).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.objc_class_prefix)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn objc_class_prefix<'this>(&'this self) -> &'this str {
            match self.objc_class_prefix_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_objc_class_prefix(&self) -> bool {
            self.objc_class_prefix_opt().is_some()
        }
        pub fn csharp_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(14).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.csharp_namespace)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn csharp_namespace<'this>(&'this self) -> &'this str {
            match self.csharp_namespace_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_csharp_namespace(&self) -> bool {
            self.csharp_namespace_opt().is_some()
        }
        pub fn swift_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(15).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.swift_prefix)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn swift_prefix<'this>(&'this self) -> &'this str {
            match self.swift_prefix_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_swift_prefix(&self) -> bool {
            self.swift_prefix_opt().is_some()
        }
        pub fn php_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(16).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.php_class_prefix)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn php_class_prefix<'this>(&'this self) -> &'this str {
            match self.php_class_prefix_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_php_class_prefix(&self) -> bool {
            self.php_class_prefix_opt().is_some()
        }
        pub fn php_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(17).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.php_namespace)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn php_namespace<'this>(&'this self) -> &'this str {
            match self.php_namespace_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_php_namespace(&self) -> bool {
            self.php_namespace_opt().is_some()
        }
        pub fn php_metadata_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(18).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.php_metadata_namespace)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn php_metadata_namespace<'this>(&'this self) -> &'this str {
            match self.php_metadata_namespace_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_php_metadata_namespace(&self) -> bool {
            self.php_metadata_namespace_opt().is_some()
        }
        pub fn ruby_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(19).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.ruby_package)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn ruby_package<'this>(&'this self) -> &'this str {
            match self.ruby_package_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_ruby_package(&self) -> bool {
            self.ruby_package_opt().is_some()
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn clear_java_package(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn java_package_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_java_package() {
                self.java_package = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.java_package.as_mut_string_in(self._bump) }
        }
        pub fn clear_java_outer_classname(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn java_outer_classname_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_java_outer_classname() {
                self.java_outer_classname = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            unsafe { self.java_outer_classname.as_mut_string_in(self._bump) }
        }
        pub fn clear_java_multiple_files(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn java_multiple_files_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_java_multiple_files() {
                self.java_multiple_files = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.java_multiple_files
        }
        pub fn clear_java_generate_equals_and_hash(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn java_generate_equals_and_hash_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_java_generate_equals_and_hash() {
                self.java_generate_equals_and_hash = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.java_generate_equals_and_hash
        }
        pub fn clear_java_string_check_utf8(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn java_string_check_utf8_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_java_string_check_utf8() {
                self.java_string_check_utf8 = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.java_string_check_utf8
        }
        pub fn clear_optimize_for(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn optimize_for_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode{
            if !self.has_optimize_for() {
                self.optimize_for = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            &mut self.optimize_for
        }
        pub fn clear_go_package(&mut self) {
            self._bitfield.set(6, false);
        }
        pub fn go_package_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_go_package() {
                self.go_package = ::std::default::Default::default();
                self._bitfield.set(6, true);
            }
            unsafe { self.go_package.as_mut_string_in(self._bump) }
        }
        pub fn clear_cc_generic_services(&mut self) {
            self._bitfield.set(7, false);
        }
        pub fn cc_generic_services_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_cc_generic_services() {
                self.cc_generic_services = ::std::default::Default::default();
                self._bitfield.set(7, true);
            }
            &mut self.cc_generic_services
        }
        pub fn clear_java_generic_services(&mut self) {
            self._bitfield.set(8, false);
        }
        pub fn java_generic_services_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_java_generic_services() {
                self.java_generic_services = ::std::default::Default::default();
                self._bitfield.set(8, true);
            }
            &mut self.java_generic_services
        }
        pub fn clear_py_generic_services(&mut self) {
            self._bitfield.set(9, false);
        }
        pub fn py_generic_services_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_py_generic_services() {
                self.py_generic_services = ::std::default::Default::default();
                self._bitfield.set(9, true);
            }
            &mut self.py_generic_services
        }
        pub fn clear_php_generic_services(&mut self) {
            self._bitfield.set(10, false);
        }
        pub fn php_generic_services_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_php_generic_services() {
                self.php_generic_services = ::std::default::Default::default();
                self._bitfield.set(10, true);
            }
            &mut self.php_generic_services
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(11, false);
        }
        pub fn deprecated_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(11, true);
            }
            &mut self.deprecated
        }
        pub fn clear_cc_enable_arenas(&mut self) {
            self._bitfield.set(12, false);
        }
        pub fn cc_enable_arenas_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_cc_enable_arenas() {
                self.cc_enable_arenas = ::std::default::Default::default();
                self._bitfield.set(12, true);
            }
            &mut self.cc_enable_arenas
        }
        pub fn clear_objc_class_prefix(&mut self) {
            self._bitfield.set(13, false);
        }
        pub fn objc_class_prefix_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_objc_class_prefix() {
                self.objc_class_prefix = ::std::default::Default::default();
                self._bitfield.set(13, true);
            }
            unsafe { self.objc_class_prefix.as_mut_string_in(self._bump) }
        }
        pub fn clear_csharp_namespace(&mut self) {
            self._bitfield.set(14, false);
        }
        pub fn csharp_namespace_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_csharp_namespace() {
                self.csharp_namespace = ::std::default::Default::default();
                self._bitfield.set(14, true);
            }
            unsafe { self.csharp_namespace.as_mut_string_in(self._bump) }
        }
        pub fn clear_swift_prefix(&mut self) {
            self._bitfield.set(15, false);
        }
        pub fn swift_prefix_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_swift_prefix() {
                self.swift_prefix = ::std::default::Default::default();
                self._bitfield.set(15, true);
            }
            unsafe { self.swift_prefix.as_mut_string_in(self._bump) }
        }
        pub fn clear_php_class_prefix(&mut self) {
            self._bitfield.set(16, false);
        }
        pub fn php_class_prefix_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_php_class_prefix() {
                self.php_class_prefix = ::std::default::Default::default();
                self._bitfield.set(16, true);
            }
            unsafe { self.php_class_prefix.as_mut_string_in(self._bump) }
        }
        pub fn clear_php_namespace(&mut self) {
            self._bitfield.set(17, false);
        }
        pub fn php_namespace_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_php_namespace() {
                self.php_namespace = ::std::default::Default::default();
                self._bitfield.set(17, true);
            }
            unsafe { self.php_namespace.as_mut_string_in(self._bump) }
        }
        pub fn clear_php_metadata_namespace(&mut self) {
            self._bitfield.set(18, false);
        }
        pub fn php_metadata_namespace_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_php_metadata_namespace() {
                self.php_metadata_namespace = ::std::default::Default::default();
                self._bitfield.set(18, true);
            }
            unsafe { self.php_metadata_namespace.as_mut_string_in(self._bump) }
        }
        pub fn clear_ruby_package(&mut self) {
            self._bitfield.set(19, false);
        }
        pub fn ruby_package_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_ruby_package() {
                self.ruby_package = ::std::default::Default::default();
                self._bitfield.set(19, true);
            }
            unsafe { self.ruby_package.as_mut_string_in(self._bump) }
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::FileOptions>
        for FileOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for FileOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for FileOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::FileOptionsTrait for FileOptionsBumpalo<'bump> {
        fn java_package_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::java_package_opt(self)
        }
        fn java_outer_classname_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::java_outer_classname_opt(self)
        }
        fn java_multiple_files_opt<'this>(&'this self) -> Option<bool> {
            <Self>::java_multiple_files_opt(self)
        }
        fn java_generate_equals_and_hash_opt<'this>(&'this self) -> Option<bool> {
            <Self>::java_generate_equals_and_hash_opt(self)
        }
        fn java_string_check_utf8_opt<'this>(&'this self) -> Option<bool> {
            <Self>::java_string_check_utf8_opt(self)
        }
        fn optimize_for_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
        {
            <Self>::optimize_for_opt(self)
        }
        fn go_package_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::go_package_opt(self)
        }
        fn cc_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <Self>::cc_generic_services_opt(self)
        }
        fn java_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <Self>::java_generic_services_opt(self)
        }
        fn py_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <Self>::py_generic_services_opt(self)
        }
        fn php_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <Self>::php_generic_services_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <Self>::deprecated_opt(self)
        }
        fn cc_enable_arenas_opt<'this>(&'this self) -> Option<bool> {
            <Self>::cc_enable_arenas_opt(self)
        }
        fn objc_class_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::objc_class_prefix_opt(self)
        }
        fn csharp_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::csharp_namespace_opt(self)
        }
        fn swift_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::swift_prefix_opt(self)
        }
        fn php_class_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::php_class_prefix_opt(self)
        }
        fn php_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::php_namespace_opt(self)
        }
        fn php_metadata_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::php_metadata_namespace_opt(self)
        }
        fn ruby_package_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::ruby_package_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for FileOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.java_package, data, self._bump)
            }
            8 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.java_outer_classname, data, self._bump)
            }
            10 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_multiple_files, data, self._bump)
            }
            20 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_generate_equals_and_hash, data, self._bump)
            }
            27 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_string_check_utf8, data, self._bump)
            }
            9 => {
                self._bitfield.set(5, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
                >::deser_field(&mut self.optimize_for, data, self._bump)
            }
            11 => {
                self._bitfield.set(6, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.go_package, data, self._bump)
            }
            16 => {
                self._bitfield.set(7, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.cc_generic_services, data, self._bump)
            }
            17 => {
                self._bitfield.set(8, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.java_generic_services, data, self._bump)
            }
            18 => {
                self._bitfield.set(9, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.py_generic_services, data, self._bump)
            }
            42 => {
                self._bitfield.set(10, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.php_generic_services, data, self._bump)
            }
            23 => {
                self._bitfield.set(11, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data, self._bump)
            }
            31 => {
                self._bitfield.set(12, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.cc_enable_arenas, data, self._bump)
            }
            36 => {
                self._bitfield.set(13, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.objc_class_prefix, data, self._bump)
            }
            37 => {
                self._bitfield.set(14, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.csharp_namespace, data, self._bump)
            }
            39 => {
                self._bitfield.set(15, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.swift_prefix, data, self._bump)
            }
            40 => {
                self._bitfield.set(16, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.php_class_prefix, data, self._bump)
            }
            41 => {
                self._bitfield.set(17, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.php_namespace, data, self._bump)
            }
            44 => {
                self._bitfield.set(18, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.php_metadata_namespace, data, self._bump)
            }
            45 => {
                self._bitfield.set(19, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.ruby_package, data, self._bump)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for FileOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::FileOptionsTrait,
        for<'a> <Self as super::_puroro_traits::FileOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_package_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_outer_classname_opt(self),
                8,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_multiple_files_opt(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Bool
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::java_generate_equals_and_hash_opt(self),
            20,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_string_check_utf8_opt(self),
                27,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::optimize_for_opt(self),
            9,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::go_package_opt(self),
                11,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::cc_generic_services_opt(self),
                16,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::java_generic_services_opt(self),
                17,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::py_generic_services_opt(self),
                18,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_generic_services_opt(self),
                42,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::deprecated_opt(self),
                23,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::cc_enable_arenas_opt(self),
                31,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::objc_class_prefix_opt(self),
                36,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::csharp_namespace_opt(self),
                37,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::swift_prefix_opt(self),
                39,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_class_prefix_opt(self),
                40,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_namespace_opt(self),
                41,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::php_metadata_namespace_opt(self),
                44,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::FileOptionsTrait>::ruby_package_opt(self),
                45,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FileOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FileOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct FileOptionsBuilder<T>(T);

    impl<T> FileOptionsBuilder<T>
    where
        T: FileOptionsTrait,
    {
        pub fn append_java_package<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField1 {
                    java_package: value,
                },
            ))
        }

        pub fn append_java_outer_classname<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField8<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField8 {
                    java_outer_classname: value,
                },
            ))
        }

        pub fn append_java_multiple_files<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField10<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField10 {
                    java_multiple_files: value,
                },
            ))
        }

        pub fn append_java_generate_equals_and_hash<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField20<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField20 {
                    java_generate_equals_and_hash: value,
                },
            ))
        }

        pub fn append_java_string_check_utf8<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField27<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField27 {
                    java_string_check_utf8: value,
                },
            ))
        }

    pub fn append_optimize_for<ScalarType>(self, value: ScalarType)
        -> FileOptionsBuilder<(T, FileOptionsSingleField9<ScalarType>)>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode> + ::std::clone::Clone,
    {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField9 {
                    optimize_for: value,
                },
            ))
        }

        pub fn append_go_package<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField11<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((self.0, FileOptionsSingleField11 { go_package: value }))
        }

        pub fn append_cc_generic_services<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField16<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField16 {
                    cc_generic_services: value,
                },
            ))
        }

        pub fn append_java_generic_services<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField17<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField17 {
                    java_generic_services: value,
                },
            ))
        }

        pub fn append_py_generic_services<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField18<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField18 {
                    py_generic_services: value,
                },
            ))
        }

        pub fn append_php_generic_services<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField42<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField42 {
                    php_generic_services: value,
                },
            ))
        }

        pub fn append_deprecated<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField23<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((self.0, FileOptionsSingleField23 { deprecated: value }))
        }

        pub fn append_cc_enable_arenas<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField31<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField31 {
                    cc_enable_arenas: value,
                },
            ))
        }

        pub fn append_objc_class_prefix<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField36<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField36 {
                    objc_class_prefix: value,
                },
            ))
        }

        pub fn append_csharp_namespace<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField37<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField37 {
                    csharp_namespace: value,
                },
            ))
        }

        pub fn append_swift_prefix<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField39<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField39 {
                    swift_prefix: value,
                },
            ))
        }

        pub fn append_php_class_prefix<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField40<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField40 {
                    php_class_prefix: value,
                },
            ))
        }

        pub fn append_php_namespace<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField41<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField41 {
                    php_namespace: value,
                },
            ))
        }

        pub fn append_php_metadata_namespace<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField44<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField44 {
                    php_metadata_namespace: value,
                },
            ))
        }

        pub fn append_ruby_package<ScalarType>(
            self,
            value: ScalarType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField45<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField45 {
                    ruby_package: value,
                },
            ))
        }

        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FileOptionsBuilder<(T, FileOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FileOptionsBuilder((
                self.0,
                FileOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl FileOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct MessageOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub message_set_wire_format: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MessageOptions> for MessageOptionsSingleField1<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::MessageOptionsTrait
        for MessageOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn message_set_wire_format_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.message_set_wire_format,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MessageOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::MessageOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::message_set_wire_format_opt(
                    self,
                ),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MessageOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                message_set_wire_format: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MessageOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                message_set_wire_format: ::std::clone::Clone::clone(&self.message_set_wire_format),
            }
        }
    }

    pub struct MessageOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub no_standard_descriptor_accessor: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MessageOptions> for MessageOptionsSingleField2<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::MessageOptionsTrait
        for MessageOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.no_standard_descriptor_accessor,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MessageOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::MessageOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Bool
        >::ser_field(
            <Self as super::_puroro_traits::MessageOptionsTrait>::no_standard_descriptor_accessor_opt(self),
            2,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MessageOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                no_standard_descriptor_accessor: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MessageOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                no_standard_descriptor_accessor: ::std::clone::Clone::clone(
                    &self.no_standard_descriptor_accessor,
                ),
            }
        }
    }

    pub struct MessageOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub deprecated: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MessageOptions> for MessageOptionsSingleField3<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::MessageOptionsTrait
        for MessageOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.deprecated,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MessageOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::MessageOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MessageOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { deprecated: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MessageOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
            }
        }
    }

    pub struct MessageOptionsSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub map_entry: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MessageOptions> for MessageOptionsSingleField7<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::MessageOptionsTrait
        for MessageOptionsSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn map_entry_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.map_entry,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MessageOptionsSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::MessageOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::map_entry_opt(self),
                7,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MessageOptionsSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { map_entry: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MessageOptionsSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                map_entry: ::std::clone::Clone::clone(&self.map_entry),
            }
        }
    }

    pub struct MessageOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::MessageOptions>
        for MessageOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::MessageOptionsTrait
        for MessageOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for MessageOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::MessageOptionsTrait,
        for<'a> <Self as super::_puroro_traits::MessageOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::MessageOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::MessageOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for MessageOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for MessageOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct MessageOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (4 + 31) / 32]>,
        message_set_wire_format: ::puroro::internal::Bare<bool>,
        no_standard_descriptor_accessor: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        map_entry: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type MessageOptionsBumpaloOwned = ::puroro::BumpaloOwned<MessageOptionsBumpalo<'static>>;
    impl<'bump> MessageOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                message_set_wire_format: ::std::default::Default::default(),
                no_standard_descriptor_accessor: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                map_entry: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn message_set_wire_format_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.message_set_wire_format.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn message_set_wire_format<'this>(&'this self) -> bool {
            match self.message_set_wire_format_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_message_set_wire_format(&self) -> bool {
            self.message_set_wire_format_opt().is_some()
        }
        pub fn no_standard_descriptor_accessor_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<bool> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.no_standard_descriptor_accessor.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn no_standard_descriptor_accessor<'this>(&'this self) -> bool {
            match self.no_standard_descriptor_accessor_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_no_standard_descriptor_accessor(&self) -> bool {
            self.no_standard_descriptor_accessor_opt().is_some()
        }
        pub fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn deprecated<'this>(&'this self) -> bool {
            match self.deprecated_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_deprecated(&self) -> bool {
            self.deprecated_opt().is_some()
        }
        pub fn map_entry_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.map_entry.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn map_entry<'this>(&'this self) -> bool {
            match self.map_entry_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_map_entry(&self) -> bool {
            self.map_entry_opt().is_some()
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn clear_message_set_wire_format(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn message_set_wire_format_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_message_set_wire_format() {
                self.message_set_wire_format = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.message_set_wire_format
        }
        pub fn clear_no_standard_descriptor_accessor(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn no_standard_descriptor_accessor_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_no_standard_descriptor_accessor() {
                self.no_standard_descriptor_accessor = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.no_standard_descriptor_accessor
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn deprecated_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.deprecated
        }
        pub fn clear_map_entry(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn map_entry_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_map_entry() {
                self.map_entry = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.map_entry
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::MessageOptions>
        for MessageOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for MessageOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for MessageOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::MessageOptionsTrait for MessageOptionsBumpalo<'bump> {
        fn message_set_wire_format_opt<'this>(&'this self) -> Option<bool> {
            <Self>::message_set_wire_format_opt(self)
        }
        fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> Option<bool> {
            <Self>::no_standard_descriptor_accessor_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <Self>::deprecated_opt(self)
        }
        fn map_entry_opt<'this>(&'this self) -> Option<bool> {
            <Self>::map_entry_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for MessageOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.message_set_wire_format, data, self._bump)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.no_standard_descriptor_accessor, data, self._bump)
            }
            3 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data, self._bump)
            }
            7 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.map_entry, data, self._bump)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for MessageOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::MessageOptionsTrait,
        for<'a> <Self as super::_puroro_traits::MessageOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::message_set_wire_format_opt(
                    self,
                ),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Bool
        >::ser_field(
            <Self as super::_puroro_traits::MessageOptionsTrait>::no_standard_descriptor_accessor_opt(self),
            2,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MessageOptionsTrait>::map_entry_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::MessageOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::MessageOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct MessageOptionsBuilder<T>(T);

    impl<T> MessageOptionsBuilder<T>
    where
        T: MessageOptionsTrait,
    {
        pub fn append_message_set_wire_format<ScalarType>(
            self,
            value: ScalarType,
        ) -> MessageOptionsBuilder<(T, MessageOptionsSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            MessageOptionsBuilder((
                self.0,
                MessageOptionsSingleField1 {
                    message_set_wire_format: value,
                },
            ))
        }

        pub fn append_no_standard_descriptor_accessor<ScalarType>(
            self,
            value: ScalarType,
        ) -> MessageOptionsBuilder<(T, MessageOptionsSingleField2<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            MessageOptionsBuilder((
                self.0,
                MessageOptionsSingleField2 {
                    no_standard_descriptor_accessor: value,
                },
            ))
        }

        pub fn append_deprecated<ScalarType>(
            self,
            value: ScalarType,
        ) -> MessageOptionsBuilder<(T, MessageOptionsSingleField3<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            MessageOptionsBuilder((self.0, MessageOptionsSingleField3 { deprecated: value }))
        }

        pub fn append_map_entry<ScalarType>(
            self,
            value: ScalarType,
        ) -> MessageOptionsBuilder<(T, MessageOptionsSingleField7<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            MessageOptionsBuilder((self.0, MessageOptionsSingleField7 { map_entry: value }))
        }

        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> MessageOptionsBuilder<(T, MessageOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            MessageOptionsBuilder((
                self.0,
                MessageOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl MessageOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct FieldOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
            > + ::std::clone::Clone,
    {
        pub ctype: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldOptions> for FieldOptionsSingleField1<ScalarType> where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
            > + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldOptionsTrait for FieldOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
            > + ::std::clone::Clone,
    {
        fn ctype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        > {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.ctype,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
            > + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Enum2<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::ctype_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
            > + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { ctype: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
            > + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                ctype: ::std::clone::Clone::clone(&self.ctype),
            }
        }
    }

    pub struct FieldOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub packed: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldOptions> for FieldOptionsSingleField2<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldOptionsTrait for FieldOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn packed_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.packed,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::packed_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { packed: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                packed: ::std::clone::Clone::clone(&self.packed),
            }
        }
    }

    pub struct FieldOptionsSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
            > + ::std::clone::Clone,
    {
        pub jstype: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldOptions> for FieldOptionsSingleField6<ScalarType> where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
            > + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldOptionsTrait for FieldOptionsSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
            > + ::std::clone::Clone,
    {
        fn jstype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        > {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.jstype,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldOptionsSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
            > + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Enum2<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::jstype_opt(self),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldOptionsSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
            > + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { jstype: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldOptionsSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
            > + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                jstype: ::std::clone::Clone::clone(&self.jstype),
            }
        }
    }

    pub struct FieldOptionsSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub lazy: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldOptions> for FieldOptionsSingleField5<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldOptionsTrait for FieldOptionsSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn lazy_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.lazy,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldOptionsSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::lazy_opt(self),
                5,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldOptionsSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { lazy: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldOptionsSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                lazy: ::std::clone::Clone::clone(&self.lazy),
            }
        }
    }

    pub struct FieldOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub deprecated: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldOptions> for FieldOptionsSingleField3<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldOptionsTrait for FieldOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.deprecated,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { deprecated: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
            }
        }
    }

    pub struct FieldOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub weak: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::FieldOptions> for FieldOptionsSingleField10<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::FieldOptionsTrait for FieldOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn weak_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.weak,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::FieldOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::weak_opt(self),
                10,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for FieldOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { weak: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for FieldOptionsSingleField10<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                weak: ::std::clone::Clone::clone(&self.weak),
            }
        }
    }

    pub struct FieldOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::FieldOptions>
        for FieldOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::FieldOptionsTrait
        for FieldOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for FieldOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::FieldOptionsTrait,
        for<'a> <Self as super::_puroro_traits::FieldOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FieldOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FieldOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for FieldOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for FieldOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct FieldOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (6 + 31) / 32]>,
        ctype: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        >,
        packed: ::puroro::internal::Bare<bool>,
        jstype: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        >,
        lazy: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        weak: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type FieldOptionsBumpaloOwned = ::puroro::BumpaloOwned<FieldOptionsBumpalo<'static>>;
    impl<'bump> FieldOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                ctype: ::std::default::Default::default(),
                packed: ::std::default::Default::default(),
                jstype: ::std::default::Default::default(),
                lazy: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                weak: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn ctype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        > {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.ctype.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn ctype<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype {
            match self.ctype_opt() {
            ::std::option::Option::Some(x) => x,
            _ => {
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype::String
            }
        }
        }

        pub fn has_ctype(&self) -> bool {
            self.ctype_opt().is_some()
        }
        pub fn packed_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.packed.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn packed<'this>(&'this self) -> bool {
            match self.packed_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_packed(&self) -> bool {
            self.packed_opt().is_some()
        }
        pub fn jstype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        > {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.jstype.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn jstype<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype {
            match self.jstype_opt() {
            ::std::option::Option::Some(x) => x,
            _ => {
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype::JsNormal
            }
        }
        }

        pub fn has_jstype(&self) -> bool {
            self.jstype_opt().is_some()
        }
        pub fn lazy_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.lazy.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn lazy<'this>(&'this self) -> bool {
            match self.lazy_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_lazy(&self) -> bool {
            self.lazy_opt().is_some()
        }
        pub fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn deprecated<'this>(&'this self) -> bool {
            match self.deprecated_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_deprecated(&self) -> bool {
            self.deprecated_opt().is_some()
        }
        pub fn weak_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.weak.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn weak<'this>(&'this self) -> bool {
            match self.weak_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_weak(&self) -> bool {
            self.weak_opt().is_some()
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn clear_ctype(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn ctype_mut<'this>(
            &'this mut self,
        ) -> &'this mut self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype
        {
            if !self.has_ctype() {
                self.ctype = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.ctype
        }
        pub fn clear_packed(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn packed_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_packed() {
                self.packed = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.packed
        }
        pub fn clear_jstype(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn jstype_mut<'this>(
            &'this mut self,
        ) -> &'this mut self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype
        {
            if !self.has_jstype() {
                self.jstype = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.jstype
        }
        pub fn clear_lazy(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn lazy_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_lazy() {
                self.lazy = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.lazy
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn deprecated_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            &mut self.deprecated
        }
        pub fn clear_weak(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn weak_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_weak() {
                self.weak = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            &mut self.weak
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::FieldOptions>
        for FieldOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for FieldOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for FieldOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::FieldOptionsTrait for FieldOptionsBumpalo<'bump> {
        fn ctype_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype>
        {
            <Self>::ctype_opt(self)
        }
        fn packed_opt<'this>(&'this self) -> Option<bool> {
            <Self>::packed_opt(self)
        }
        fn jstype_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype>
        {
            <Self>::jstype_opt(self)
        }
        fn lazy_opt<'this>(&'this self) -> Option<bool> {
            <Self>::lazy_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <Self>::deprecated_opt(self)
        }
        fn weak_opt<'this>(&'this self) -> Option<bool> {
            <Self>::weak_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for FieldOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype>
                >::deser_field(&mut self.ctype, data, self._bump)
            }
            2 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.packed, data, self._bump)
            }
            6 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype>
                >::deser_field(&mut self.jstype, data, self._bump)
            }
            5 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.lazy, data, self._bump)
            }
            3 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data, self._bump)
            }
            10 => {
                self._bitfield.set(5, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.weak, data, self._bump)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for FieldOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::FieldOptionsTrait,
        for<'a> <Self as super::_puroro_traits::FieldOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Enum2<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::ctype_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::packed_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Enum2<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::jstype_opt(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::lazy_opt(self),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::FieldOptionsTrait>::weak_opt(self),
                10,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::FieldOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::FieldOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct FieldOptionsBuilder<T>(T);

    impl<T> FieldOptionsBuilder<T>
    where
        T: FieldOptionsTrait,
    {
        pub fn append_ctype<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldOptionsBuilder<(T, FieldOptionsSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
                > + ::std::clone::Clone,
        {
            FieldOptionsBuilder((self.0, FieldOptionsSingleField1 { ctype: value }))
        }

        pub fn append_packed<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldOptionsBuilder<(T, FieldOptionsSingleField2<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FieldOptionsBuilder((self.0, FieldOptionsSingleField2 { packed: value }))
        }

        pub fn append_jstype<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldOptionsBuilder<(T, FieldOptionsSingleField6<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<
                    self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
                > + ::std::clone::Clone,
        {
            FieldOptionsBuilder((self.0, FieldOptionsSingleField6 { jstype: value }))
        }

        pub fn append_lazy<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldOptionsBuilder<(T, FieldOptionsSingleField5<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FieldOptionsBuilder((self.0, FieldOptionsSingleField5 { lazy: value }))
        }

        pub fn append_deprecated<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldOptionsBuilder<(T, FieldOptionsSingleField3<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FieldOptionsBuilder((self.0, FieldOptionsSingleField3 { deprecated: value }))
        }

        pub fn append_weak<ScalarType>(
            self,
            value: ScalarType,
        ) -> FieldOptionsBuilder<(T, FieldOptionsSingleField10<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            FieldOptionsBuilder((self.0, FieldOptionsSingleField10 { weak: value }))
        }

        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> FieldOptionsBuilder<(T, FieldOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            FieldOptionsBuilder((
                self.0,
                FieldOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl FieldOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct OneofOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::OneofOptions>
        for OneofOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::OneofOptionsTrait
        for OneofOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for OneofOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::OneofOptionsTrait,
        for<'a> <Self as super::_puroro_traits::OneofOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::OneofOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::OneofOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for OneofOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for OneofOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct OneofOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (0 + 31) / 32]>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type OneofOptionsBumpaloOwned = ::puroro::BumpaloOwned<OneofOptionsBumpalo<'static>>;
    impl<'bump> OneofOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::OneofOptions>
        for OneofOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for OneofOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for OneofOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::OneofOptionsTrait for OneofOptionsBumpalo<'bump> {
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for OneofOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for OneofOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::OneofOptionsTrait,
        for<'a> <Self as super::_puroro_traits::OneofOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::OneofOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::OneofOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct OneofOptionsBuilder<T>(T);

    impl<T> OneofOptionsBuilder<T>
    where
        T: OneofOptionsTrait,
    {
        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> OneofOptionsBuilder<(T, OneofOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            OneofOptionsBuilder((
                self.0,
                OneofOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl OneofOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct EnumOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub allow_alias: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumOptions> for EnumOptionsSingleField2<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumOptionsTrait for EnumOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn allow_alias_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.allow_alias,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for EnumOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::EnumOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumOptionsTrait>::allow_alias_opt(self),
                2,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for EnumOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { allow_alias: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumOptionsSingleField2<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                allow_alias: ::std::clone::Clone::clone(&self.allow_alias),
            }
        }
    }

    pub struct EnumOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub deprecated: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumOptions> for EnumOptionsSingleField3<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumOptionsTrait for EnumOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.deprecated,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for EnumOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::EnumOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for EnumOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { deprecated: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumOptionsSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
            }
        }
    }

    pub struct EnumOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::EnumOptions>
        for EnumOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::EnumOptionsTrait
        for EnumOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::EnumOptionsTrait,
        for<'a> <Self as super::_puroro_traits::EnumOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for EnumOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for EnumOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct EnumOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (2 + 31) / 32]>,
        allow_alias: ::puroro::internal::Bare<bool>,
        deprecated: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type EnumOptionsBumpaloOwned = ::puroro::BumpaloOwned<EnumOptionsBumpalo<'static>>;
    impl<'bump> EnumOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                allow_alias: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn allow_alias_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.allow_alias.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn allow_alias<'this>(&'this self) -> bool {
            match self.allow_alias_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_allow_alias(&self) -> bool {
            self.allow_alias_opt().is_some()
        }
        pub fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn deprecated<'this>(&'this self) -> bool {
            match self.deprecated_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_deprecated(&self) -> bool {
            self.deprecated_opt().is_some()
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn clear_allow_alias(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn allow_alias_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_allow_alias() {
                self.allow_alias = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.allow_alias
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn deprecated_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.deprecated
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::EnumOptions>
        for EnumOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for EnumOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for EnumOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::EnumOptionsTrait for EnumOptionsBumpalo<'bump> {
        fn allow_alias_opt<'this>(&'this self) -> Option<bool> {
            <Self>::allow_alias_opt(self)
        }
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <Self>::deprecated_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for EnumOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            2 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.allow_alias, data, self._bump)
            }
            3 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data, self._bump)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for EnumOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::EnumOptionsTrait,
        for<'a> <Self as super::_puroro_traits::EnumOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumOptionsTrait>::allow_alias_opt(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumOptionsTrait>::deprecated_opt(self),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct EnumOptionsBuilder<T>(T);

    impl<T> EnumOptionsBuilder<T>
    where
        T: EnumOptionsTrait,
    {
        pub fn append_allow_alias<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumOptionsBuilder<(T, EnumOptionsSingleField2<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            EnumOptionsBuilder((self.0, EnumOptionsSingleField2 { allow_alias: value }))
        }

        pub fn append_deprecated<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumOptionsBuilder<(T, EnumOptionsSingleField3<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            EnumOptionsBuilder((self.0, EnumOptionsSingleField3 { deprecated: value }))
        }

        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> EnumOptionsBuilder<(T, EnumOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            EnumOptionsBuilder((
                self.0,
                EnumOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl EnumOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct EnumValueOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub deprecated: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::EnumValueOptions>
        for EnumValueOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::EnumValueOptionsTrait
        for EnumValueOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.deprecated,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumValueOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::EnumValueOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueOptionsTrait>::deprecated_opt(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for EnumValueOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { deprecated: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for EnumValueOptionsSingleField1<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
            }
        }
    }

    pub struct EnumValueOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::EnumValueOptions>
        for EnumValueOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::EnumValueOptionsTrait
        for EnumValueOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for EnumValueOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::EnumValueOptionsTrait,
        for<'a> <Self as super::_puroro_traits::EnumValueOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumValueOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumValueOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for EnumValueOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for EnumValueOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct EnumValueOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        deprecated: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type EnumValueOptionsBumpaloOwned =
        ::puroro::BumpaloOwned<EnumValueOptionsBumpalo<'static>>;
    impl<'bump> EnumValueOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn deprecated<'this>(&'this self) -> bool {
            match self.deprecated_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_deprecated(&self) -> bool {
            self.deprecated_opt().is_some()
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn deprecated_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.deprecated
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::EnumValueOptions>
        for EnumValueOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for EnumValueOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for EnumValueOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::EnumValueOptionsTrait for EnumValueOptionsBumpalo<'bump> {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <Self>::deprecated_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for EnumValueOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data, self._bump)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for EnumValueOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::EnumValueOptionsTrait,
        for<'a> <Self as super::_puroro_traits::EnumValueOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::EnumValueOptionsTrait>::deprecated_opt(self),
                1,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::EnumValueOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::EnumValueOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct EnumValueOptionsBuilder<T>(T);

    impl<T> EnumValueOptionsBuilder<T>
    where
        T: EnumValueOptionsTrait,
    {
        pub fn append_deprecated<ScalarType>(
            self,
            value: ScalarType,
        ) -> EnumValueOptionsBuilder<(T, EnumValueOptionsSingleField1<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            EnumValueOptionsBuilder((self.0, EnumValueOptionsSingleField1 { deprecated: value }))
        }

        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> EnumValueOptionsBuilder<(T, EnumValueOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            EnumValueOptionsBuilder((
                self.0,
                EnumValueOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl EnumValueOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct ServiceOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub deprecated: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::ServiceOptions>
        for ServiceOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::ServiceOptionsTrait
        for ServiceOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.deprecated,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for ServiceOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::ServiceOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceOptionsTrait>::deprecated_opt(self),
                33,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for ServiceOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { deprecated: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for ServiceOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
            }
        }
    }

    pub struct ServiceOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::ServiceOptions>
        for ServiceOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::ServiceOptionsTrait
        for ServiceOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for ServiceOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::ServiceOptionsTrait,
        for<'a> <Self as super::_puroro_traits::ServiceOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::ServiceOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ServiceOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for ServiceOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for ServiceOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct ServiceOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (1 + 31) / 32]>,
        deprecated: ::puroro::internal::Bare<bool>,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type ServiceOptionsBumpaloOwned = ::puroro::BumpaloOwned<ServiceOptionsBumpalo<'static>>;
    impl<'bump> ServiceOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn deprecated<'this>(&'this self) -> bool {
            match self.deprecated_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_deprecated(&self) -> bool {
            self.deprecated_opt().is_some()
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn deprecated_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.deprecated
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::ServiceOptions>
        for ServiceOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for ServiceOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for ServiceOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::ServiceOptionsTrait for ServiceOptionsBumpalo<'bump> {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <Self>::deprecated_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for ServiceOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            33 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data, self._bump)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for ServiceOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::ServiceOptionsTrait,
        for<'a> <Self as super::_puroro_traits::ServiceOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::ServiceOptionsTrait>::deprecated_opt(self),
                33,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::ServiceOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::ServiceOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct ServiceOptionsBuilder<T>(T);

    impl<T> ServiceOptionsBuilder<T>
    where
        T: ServiceOptionsTrait,
    {
        pub fn append_deprecated<ScalarType>(
            self,
            value: ScalarType,
        ) -> ServiceOptionsBuilder<(T, ServiceOptionsSingleField33<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            ServiceOptionsBuilder((self.0, ServiceOptionsSingleField33 { deprecated: value }))
        }

        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> ServiceOptionsBuilder<(T, ServiceOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            ServiceOptionsBuilder((
                self.0,
                ServiceOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl ServiceOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct MethodOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        pub deprecated: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::MethodOptions> for MethodOptionsSingleField33<ScalarType> where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
    {
    }

    impl<ScalarType> super::_puroro_traits::MethodOptionsTrait
        for MethodOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.deprecated,
            )))
        }
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        Self: super::_puroro_traits::MethodOptionsTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodOptionsTrait>::deprecated_opt(self),
                33,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for MethodOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self { deprecated: value }
        }
    }

    impl<ScalarType> ::std::clone::Clone for MethodOptionsSingleField33<ScalarType>
    where
        ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                deprecated: ::std::clone::Clone::clone(&self.deprecated),
            }
        }
    }

    pub struct MethodOptionsSingleField34<ScalarType>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> + ::std::clone::Clone,
{
    pub idempotency_level: ScalarType,
}

    impl<ScalarType> ::puroro::Message<super::MethodOptions>
for MethodOptionsSingleField34<ScalarType>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> + ::std::clone::Clone,
{}

    impl<ScalarType> super::_puroro_traits::MethodOptionsTrait
for MethodOptionsSingleField34<ScalarType>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> + ::std::clone::Clone,
{

fn idempotency_level_opt<'this>(&'this self) -> ::std::option::Option<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> {
    ::std::option::Option::Some(
        ::std::convert::Into::into(::std::clone::Clone::clone(&self.idempotency_level))
    )
}
    type UninterpretedOptionMessageType<'this> = () where Self: 'this;
    type UninterpretedOptionRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>> where Self: 'this;
    fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
        ::puroro::internal::impls::empty::EmptyRepeatedField::new()
    }
}

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
for MethodOptionsSingleField34<ScalarType>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> + ::std::clone::Clone,
    Self: super::_puroro_traits::MethodOptionsTrait,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel>
        >::ser_field(
            <Self as super::_puroro_traits::MethodOptionsTrait>::idempotency_level_opt(self),
            34,
            out,
            false,
        )?;
        ::std::result::Result::Ok(())
    }
}

    impl<ScalarType> ::std::convert::From<ScalarType>
for MethodOptionsSingleField34<ScalarType>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> + ::std::clone::Clone,
{
    fn from(value: ScalarType) -> Self {
        Self {
            idempotency_level: value,
        }
    }
}

    impl<ScalarType> ::std::clone::Clone
for MethodOptionsSingleField34<ScalarType>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> + ::std::clone::Clone,
    ScalarType: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self {
            idempotency_level: ::std::clone::Clone::clone(&self.idempotency_level),
        }
    }
}

    pub struct MethodOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        pub uninterpreted_option: RepeatedType,
    }

    impl<ScalarType, RepeatedType> ::puroro::Message<super::MethodOptions>
        for MethodOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
    }

    impl<ScalarType, RepeatedType> super::_puroro_traits::MethodOptionsTrait
        for MethodOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        type UninterpretedOptionMessageType<'this> = &'this ScalarType where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            &self.uninterpreted_option
        }
    }

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
        for MethodOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        Self: super::_puroro_traits::MethodOptionsTrait,
        for<'a> <Self as super::_puroro_traits::MethodOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::MethodOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::MethodOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
        for MethodOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
        fn from(value: RepeatedType) -> Self {
            Self {
                uninterpreted_option: value,
            }
        }
    }

    impl<ScalarType, RepeatedType> ::std::clone::Clone
        for MethodOptionsSingleField999<ScalarType, RepeatedType>
    where
        ScalarType: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
        for<'a> &'a RepeatedType:
            ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        RepeatedType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                uninterpreted_option: ::std::clone::Clone::clone(&self.uninterpreted_option),
            }
        }
    }
    pub struct MethodOptionsBumpalo<'bump> {
        _bump: &'bump ::puroro::bumpalo::Bump,
        _bitfield:
            ::puroro::bitvec::array::BitArray<::puroro::bitvec::order::Lsb0, [u32; (2 + 31) / 32]>,
        deprecated: ::puroro::internal::Bare<bool>,
        idempotency_level: ::puroro::internal::Bare<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        >,
        uninterpreted_option: ::puroro::internal::NoAllocBumpVec<
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        >,
    }

    pub type MethodOptionsBumpaloOwned = ::puroro::BumpaloOwned<MethodOptionsBumpalo<'static>>;
    impl<'bump> MethodOptionsBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                deprecated: ::std::default::Default::default(),
                idempotency_level: ::std::default::Default::default(),
                uninterpreted_option: ::std::default::Default::default(),
            }
        }
        pub fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.deprecated.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn deprecated<'this>(&'this self) -> bool {
            match self.deprecated_opt() {
                ::std::option::Option::Some(x) => x,
                _ => false,
            }
        }

        pub fn has_deprecated(&self) -> bool {
            self.deprecated_opt().is_some()
        }
        pub fn idempotency_level_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.idempotency_level.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn idempotency_level<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel
        {
            match self.idempotency_level_opt() {
            ::std::option::Option::Some(x) => x,
            _ => {
                self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel::IdempotencyUnknown
            }
        }
        }

        pub fn has_idempotency_level(&self) -> bool {
            self.idempotency_level_opt().is_some()
        }
        pub fn uninterpreted_option<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>]{
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
        pub fn clear_deprecated(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn deprecated_mut<'this>(&'this mut self) -> &'this mut bool {
            if !self.has_deprecated() {
                self.deprecated = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            &mut self.deprecated
        }
        pub fn clear_idempotency_level(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn idempotency_level_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel{
            if !self.has_idempotency_level() {
                self.idempotency_level = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.idempotency_level
        }
        pub fn uninterpreted_option_mut<'this>(
            &'this mut self,
        ) -> ::puroro::internal::RefMutBumpVec<
            'bump,
            'this,
            self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>,
        > {
            unsafe { self.uninterpreted_option.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::MethodOptions>
        for MethodOptionsBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for MethodOptionsBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for MethodOptionsBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::MethodOptionsTrait for MethodOptionsBumpalo<'bump> {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <Self>::deprecated_opt(self)
        }
        fn idempotency_level_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            <Self>::idempotency_level_opt(self)
        }
        type UninterpretedOptionMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this> where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'this>] where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            unsafe { self.uninterpreted_option.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for MethodOptionsBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            33 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bool
                >::deser_field(&mut self.deprecated, data, self._bump)
            }
            34 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel>
                >::deser_field(&mut self.idempotency_level, data, self._bump)
            }
            999 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_impls::UninterpretedOptionBumpalo<'bump>>
                >::deser_field(&mut self.uninterpreted_option, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for MethodOptionsBumpalo<'bump>
    where
        Self: super::_puroro_traits::MethodOptionsTrait,
        for<'a> <Self as super::_puroro_traits::MethodOptionsTrait>::UninterpretedOptionMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bool,
            >::ser_field(
                <Self as super::_puroro_traits::MethodOptionsTrait>::deprecated_opt(self),
                33,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Optional, ::puroro::tags::Enum2<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel>
        >::ser_field(
            <Self as super::_puroro_traits::MethodOptionsTrait>::idempotency_level_opt(self),
            34,
            out,
            false,
        )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::MethodOptionsTrait>::UninterpretedOptionMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::MethodOptionsTrait>::uninterpreted_option(self),
            999,
            out,
            false,
        )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct MethodOptionsBuilder<T>(T);

    impl<T> MethodOptionsBuilder<T>
    where
        T: MethodOptionsTrait,
    {
        pub fn append_deprecated<ScalarType>(
            self,
            value: ScalarType,
        ) -> MethodOptionsBuilder<(T, MethodOptionsSingleField33<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
        {
            MethodOptionsBuilder((self.0, MethodOptionsSingleField33 { deprecated: value }))
        }

    pub fn append_idempotency_level<ScalarType>(self, value: ScalarType)
        -> MethodOptionsBuilder<(T, MethodOptionsSingleField34<ScalarType>)>
where

ScalarType:
    ::std::convert::Into<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> + ::std::clone::Clone,
    {
            MethodOptionsBuilder((
                self.0,
                MethodOptionsSingleField34 {
                    idempotency_level: value,
                },
            ))
        }

        pub fn append_uninterpreted_option<ScalarType, RepeatedType>(
            self,
            value: RepeatedType,
        ) -> MethodOptionsBuilder<(T, MethodOptionsSingleField999<ScalarType, RepeatedType>)>
        where
            ScalarType:
                self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait,
            for<'a> &'a RepeatedType:
                ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
        {
            MethodOptionsBuilder((
                self.0,
                MethodOptionsSingleField999 {
                    uninterpreted_option: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl MethodOptionsBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct UninterpretedOptionSingleField2<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    pub name: RepeatedType,
}

    impl<ScalarType, RepeatedType> ::puroro::Message<super::UninterpretedOption>
for UninterpretedOptionSingleField2<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{}

    impl<ScalarType, RepeatedType> super::_puroro_traits::UninterpretedOptionTrait
for UninterpretedOptionSingleField2<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
type NameMessageType<'this> = &'this ScalarType where Self: 'this;

type NameRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
    &self.name
}
}

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
for UninterpretedOptionSingleField2<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    Self: super::_puroro_traits::UninterpretedOptionTrait,
    for<'a> <Self as super::_puroro_traits::UninterpretedOptionTrait>::NameMessageType<'a> :
        ::puroro::internal::se::SerMessageToIoWrite,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::UninterpretedOptionTrait>::NameMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::UninterpretedOptionTrait>::name(self),
            2,
            out,
            false,
        )?;
        ::std::result::Result::Ok(())
    }
}

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
for UninterpretedOptionSingleField2<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    fn from(value: RepeatedType) -> Self {
        Self {
            name: value,
        }
    }
}

    impl<ScalarType, RepeatedType> ::std::clone::Clone
for UninterpretedOptionSingleField2<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    RepeatedType: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self {
            name: ::std::clone::Clone::clone(&self.name),
        }
    }
}

    pub struct UninterpretedOptionSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub identifier_value: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::UninterpretedOption>
        for UninterpretedOptionSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::UninterpretedOptionTrait
        for UninterpretedOptionSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        type NameMessageType<'this> = () where Self: 'this;
        type NameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NameMessageType<'this>> where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        fn identifier_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.identifier_value.as_ref())
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for UninterpretedOptionSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::identifier_value_opt(
                    self,
                ),
                3,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for UninterpretedOptionSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                identifier_value: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for UninterpretedOptionSingleField3<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                identifier_value: ::std::clone::Clone::clone(&self.identifier_value),
            }
        }
    }

    pub struct UninterpretedOptionSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<u64> + ::std::clone::Clone,
    {
        pub positive_int_value: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::UninterpretedOption>
        for UninterpretedOptionSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<u64> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::UninterpretedOptionTrait
        for UninterpretedOptionSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<u64> + ::std::clone::Clone,
    {
        type NameMessageType<'this> = () where Self: 'this;
        type NameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NameMessageType<'this>> where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        fn positive_int_value_opt<'this>(&'this self) -> ::std::option::Option<u64> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.positive_int_value,
            )))
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for UninterpretedOptionSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<u64> + ::std::clone::Clone,
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::UInt64,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::positive_int_value_opt(
                    self,
                ),
                4,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for UninterpretedOptionSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<u64> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                positive_int_value: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for UninterpretedOptionSingleField4<ScalarType>
    where
        ScalarType: ::std::convert::Into<u64> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                positive_int_value: ::std::clone::Clone::clone(&self.positive_int_value),
            }
        }
    }

    pub struct UninterpretedOptionSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<i64> + ::std::clone::Clone,
    {
        pub negative_int_value: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::UninterpretedOption>
        for UninterpretedOptionSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<i64> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::UninterpretedOptionTrait
        for UninterpretedOptionSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<i64> + ::std::clone::Clone,
    {
        type NameMessageType<'this> = () where Self: 'this;
        type NameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NameMessageType<'this>> where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        fn negative_int_value_opt<'this>(&'this self) -> ::std::option::Option<i64> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.negative_int_value,
            )))
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for UninterpretedOptionSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<i64> + ::std::clone::Clone,
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int64,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::negative_int_value_opt(
                    self,
                ),
                5,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for UninterpretedOptionSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<i64> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                negative_int_value: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for UninterpretedOptionSingleField5<ScalarType>
    where
        ScalarType: ::std::convert::Into<i64> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                negative_int_value: ::std::clone::Clone::clone(&self.negative_int_value),
            }
        }
    }

    pub struct UninterpretedOptionSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<f64> + ::std::clone::Clone,
    {
        pub double_value: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::UninterpretedOption>
        for UninterpretedOptionSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<f64> + ::std::clone::Clone,
    {
    }

    impl<ScalarType> super::_puroro_traits::UninterpretedOptionTrait
        for UninterpretedOptionSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<f64> + ::std::clone::Clone,
    {
        type NameMessageType<'this> = () where Self: 'this;
        type NameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NameMessageType<'this>> where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        fn double_value_opt<'this>(&'this self) -> ::std::option::Option<f64> {
            ::std::option::Option::Some(::std::convert::Into::into(::std::clone::Clone::clone(
                &self.double_value,
            )))
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for UninterpretedOptionSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<f64> + ::std::clone::Clone,
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Double,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::double_value_opt(self),
                6,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for UninterpretedOptionSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<f64> + ::std::clone::Clone,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                double_value: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for UninterpretedOptionSingleField6<ScalarType>
    where
        ScalarType: ::std::convert::Into<f64> + ::std::clone::Clone,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                double_value: ::std::clone::Clone::clone(&self.double_value),
            }
        }
    }

    pub struct UninterpretedOptionSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<[u8]>,
    {
        pub string_value: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::UninterpretedOption>
        for UninterpretedOptionSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<[u8]>,
    {
    }

    impl<ScalarType> super::_puroro_traits::UninterpretedOptionTrait
        for UninterpretedOptionSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<[u8]>,
    {
        type NameMessageType<'this> = () where Self: 'this;
        type NameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NameMessageType<'this>> where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        fn string_value_opt<'this>(&'this self) -> ::std::option::Option<&'this [u8]> {
            ::std::option::Option::Some(self.string_value.as_ref())
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for UninterpretedOptionSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<[u8]>,
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bytes,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::string_value_opt(self),
                7,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for UninterpretedOptionSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<[u8]>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                string_value: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for UninterpretedOptionSingleField7<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<[u8]>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                string_value: ::std::clone::Clone::clone(&self.string_value),
            }
        }
    }

    pub struct UninterpretedOptionSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        pub aggregate_value: ScalarType,
    }

    impl<ScalarType> ::puroro::Message<super::UninterpretedOption>
        for UninterpretedOptionSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
    }

    impl<ScalarType> super::_puroro_traits::UninterpretedOptionTrait
        for UninterpretedOptionSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        type NameMessageType<'this> = () where Self: 'this;
        type NameRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NameMessageType<'this>> where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }

        fn aggregate_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::Some(self.aggregate_value.as_ref())
        }
    }

    impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for UninterpretedOptionSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        Self: super::_puroro_traits::UninterpretedOptionTrait,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::aggregate_value_opt(
                    self,
                ),
                8,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }

    impl<ScalarType> ::std::convert::From<ScalarType> for UninterpretedOptionSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
    {
        fn from(value: ScalarType) -> Self {
            Self {
                aggregate_value: value,
            }
        }
    }

    impl<ScalarType> ::std::clone::Clone for UninterpretedOptionSingleField8<ScalarType>
    where
        ScalarType: ::std::convert::AsRef<str>,
        ScalarType: ::std::clone::Clone,
    {
        fn clone(&self) -> Self {
            Self {
                aggregate_value: ::std::clone::Clone::clone(&self.aggregate_value),
            }
        }
    }
    pub struct UninterpretedOptionBumpalo<'bump> {
    _bump: &'bump ::puroro::bumpalo::Bump,
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (6 + 31) / 32],
    >,
    name: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_impls::NamePartBumpalo<'bump>>,
    identifier_value: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
    positive_int_value: ::puroro::internal::Bare<u64>,
    negative_int_value: ::puroro::internal::Bare<i64>,
    double_value: ::puroro::internal::Bare<f64>,
    string_value: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpVec<u8>>,
    aggregate_value: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
}

    pub type UninterpretedOptionBumpaloOwned =
        ::puroro::BumpaloOwned<UninterpretedOptionBumpalo<'static>>;
    impl<'bump> UninterpretedOptionBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                name: ::std::default::Default::default(),
                identifier_value: ::std::default::Default::default(),
                positive_int_value: ::std::default::Default::default(),
                negative_int_value: ::std::default::Default::default(),
                double_value: ::std::default::Default::default(),
                string_value: ::std::default::Default::default(),
                aggregate_value: ::std::default::Default::default(),
            }
        }
        pub fn name<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_impls::NamePartBumpalo<'this>]{
            unsafe { self.name.cast_item_unchecked() }
        }
        pub fn identifier_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(0).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.identifier_value)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn identifier_value<'this>(&'this self) -> &'this str {
            match self.identifier_value_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_identifier_value(&self) -> bool {
            self.identifier_value_opt().is_some()
        }
        pub fn positive_int_value_opt<'this>(&'this self) -> ::std::option::Option<u64> {
            if self._bitfield.get(1).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.positive_int_value.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn positive_int_value<'this>(&'this self) -> u64 {
            match self.positive_int_value_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_positive_int_value(&self) -> bool {
            self.positive_int_value_opt().is_some()
        }
        pub fn negative_int_value_opt<'this>(&'this self) -> ::std::option::Option<i64> {
            if self._bitfield.get(2).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.negative_int_value.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn negative_int_value<'this>(&'this self) -> i64 {
            match self.negative_int_value_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_negative_int_value(&self) -> bool {
            self.negative_int_value_opt().is_some()
        }
        pub fn double_value_opt<'this>(&'this self) -> ::std::option::Option<f64> {
            if self._bitfield.get(3).map_or(false, |v| *v) {
                ::std::option::Option::Some(self.double_value.inner())
            } else {
                ::std::option::Option::None
            }
        }
        pub fn double_value<'this>(&'this self) -> f64 {
            match self.double_value_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_double_value(&self) -> bool {
            self.double_value_opt().is_some()
        }
        pub fn string_value_opt<'this>(&'this self) -> ::std::option::Option<&'this [u8]> {
            if self._bitfield.get(4).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.string_value)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn string_value<'this>(&'this self) -> &'this [u8] {
            match self.string_value_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_string_value(&self) -> bool {
            self.string_value_opt().is_some()
        }
        pub fn aggregate_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            if self._bitfield.get(5).map_or(false, |v| *v) {
                ::std::option::Option::Some(&self.aggregate_value)
            } else {
                ::std::option::Option::None
            }
        }
        pub fn aggregate_value<'this>(&'this self) -> &'this str {
            match self.aggregate_value_opt() {
                ::std::option::Option::Some(x) => x,
                _ => ::std::default::Default::default(),
            }
        }

        pub fn has_aggregate_value(&self) -> bool {
            self.aggregate_value_opt().is_some()
        }
        pub fn name_mut<'this>(&'this mut self) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_impls::NamePartBumpalo<'bump>>{
            unsafe { self.name.as_mut_vec_in(self._bump) }
        }
        pub fn clear_identifier_value(&mut self) {
            self._bitfield.set(0, false);
        }
        pub fn identifier_value_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_identifier_value() {
                self.identifier_value = ::std::default::Default::default();
                self._bitfield.set(0, true);
            }
            unsafe { self.identifier_value.as_mut_string_in(self._bump) }
        }
        pub fn clear_positive_int_value(&mut self) {
            self._bitfield.set(1, false);
        }
        pub fn positive_int_value_mut<'this>(&'this mut self) -> &'this mut u64 {
            if !self.has_positive_int_value() {
                self.positive_int_value = ::std::default::Default::default();
                self._bitfield.set(1, true);
            }
            &mut self.positive_int_value
        }
        pub fn clear_negative_int_value(&mut self) {
            self._bitfield.set(2, false);
        }
        pub fn negative_int_value_mut<'this>(&'this mut self) -> &'this mut i64 {
            if !self.has_negative_int_value() {
                self.negative_int_value = ::std::default::Default::default();
                self._bitfield.set(2, true);
            }
            &mut self.negative_int_value
        }
        pub fn clear_double_value(&mut self) {
            self._bitfield.set(3, false);
        }
        pub fn double_value_mut<'this>(&'this mut self) -> &'this mut f64 {
            if !self.has_double_value() {
                self.double_value = ::std::default::Default::default();
                self._bitfield.set(3, true);
            }
            &mut self.double_value
        }
        pub fn clear_string_value(&mut self) {
            self._bitfield.set(4, false);
        }
        pub fn string_value_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::Vec<'bump, u8>>
        {
            if !self.has_string_value() {
                self.string_value = ::std::default::Default::default();
                self._bitfield.set(4, true);
            }
            unsafe { self.string_value.as_mut_vec_in(self._bump) }
        }
        pub fn clear_aggregate_value(&mut self) {
            self._bitfield.set(5, false);
        }
        pub fn aggregate_value_mut<'this>(
            &'this mut self,
        ) -> impl 'this + ::std::ops::DerefMut<Target = ::puroro::bumpalo::collections::String<'bump>>
        {
            if !self.has_aggregate_value() {
                self.aggregate_value = ::std::default::Default::default();
                self._bitfield.set(5, true);
            }
            unsafe { self.aggregate_value.as_mut_string_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::UninterpretedOption>
        for UninterpretedOptionBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for UninterpretedOptionBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for UninterpretedOptionBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::UninterpretedOptionTrait for UninterpretedOptionBumpalo<'bump> {
        type NameMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_impls::NamePartBumpalo<'this> where Self: 'this;
        type NameRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_impls::NamePartBumpalo<'this>] where Self: 'this;

        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            unsafe { self.name.cast_item_unchecked() }
        }
        fn identifier_value_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::identifier_value_opt(self)
        }
        fn positive_int_value_opt<'this>(&'this self) -> Option<u64> {
            <Self>::positive_int_value_opt(self)
        }
        fn negative_int_value_opt<'this>(&'this self) -> Option<i64> {
            <Self>::negative_int_value_opt(self)
        }
        fn double_value_opt<'this>(&'this self) -> Option<f64> {
            <Self>::double_value_opt(self)
        }
        fn string_value_opt<'this>(&'this self) -> Option<&'this [u8]> {
            <Self>::string_value_opt(self)
        }
        fn aggregate_value_opt<'this>(&'this self) -> Option<&'this str> {
            <Self>::aggregate_value_opt(self)
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter
        for UninterpretedOptionBumpalo<'bump>
    {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            2 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_impls::NamePartBumpalo<'bump>>
                >::deser_field(&mut self.name, data, self._bump)
            }
            3 => {
                self._bitfield.set(0, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.identifier_value, data, self._bump)
            }
            4 => {
                self._bitfield.set(1, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::UInt64
                >::deser_field(&mut self.positive_int_value, data, self._bump)
            }
            5 => {
                self._bitfield.set(2, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Int64
                >::deser_field(&mut self.negative_int_value, data, self._bump)
            }
            6 => {
                self._bitfield.set(3, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Double
                >::deser_field(&mut self.double_value, data, self._bump)
            }
            7 => {
                self._bitfield.set(4, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::Bytes
                >::deser_field(&mut self.string_value, data, self._bump)
            }
            8 => {
                self._bitfield.set(5, true);
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Optional, ::puroro::tags::String
                >::deser_field(&mut self.aggregate_value, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for UninterpretedOptionBumpalo<'bump>
    where
        Self: super::_puroro_traits::UninterpretedOptionTrait,
        for<'a> <Self as super::_puroro_traits::UninterpretedOptionTrait>::NameMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::UninterpretedOptionTrait>::NameMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::name(self),
                2,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::identifier_value_opt(
                    self,
                ),
                3,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::UInt64,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::positive_int_value_opt(
                    self,
                ),
                4,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Int64,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::negative_int_value_opt(
                    self,
                ),
                5,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Double,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::double_value_opt(self),
                6,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::Bytes,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::string_value_opt(self),
                7,
                out,
                false,
            )?;
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Optional,
                ::puroro::tags::String,
            >::ser_field(
                <Self as super::_puroro_traits::UninterpretedOptionTrait>::aggregate_value_opt(
                    self,
                ),
                8,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct UninterpretedOptionBuilder<T>(T);

    impl<T> UninterpretedOptionBuilder<T>
    where
        T: UninterpretedOptionTrait,
    {
        pub fn append_name<ScalarType, RepeatedType>(self, value: RepeatedType)
        -> UninterpretedOptionBuilder<(T, UninterpretedOptionSingleField2<ScalarType, RepeatedType>)>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> +
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
            UninterpretedOptionBuilder((self.0, UninterpretedOptionSingleField2 { name: value }))
        }

        pub fn append_identifier_value<ScalarType>(
            self,
            value: ScalarType,
        ) -> UninterpretedOptionBuilder<(T, UninterpretedOptionSingleField3<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            UninterpretedOptionBuilder((
                self.0,
                UninterpretedOptionSingleField3 {
                    identifier_value: value,
                },
            ))
        }

        pub fn append_positive_int_value<ScalarType>(
            self,
            value: ScalarType,
        ) -> UninterpretedOptionBuilder<(T, UninterpretedOptionSingleField4<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<u64> + ::std::clone::Clone,
        {
            UninterpretedOptionBuilder((
                self.0,
                UninterpretedOptionSingleField4 {
                    positive_int_value: value,
                },
            ))
        }

        pub fn append_negative_int_value<ScalarType>(
            self,
            value: ScalarType,
        ) -> UninterpretedOptionBuilder<(T, UninterpretedOptionSingleField5<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<i64> + ::std::clone::Clone,
        {
            UninterpretedOptionBuilder((
                self.0,
                UninterpretedOptionSingleField5 {
                    negative_int_value: value,
                },
            ))
        }

        pub fn append_double_value<ScalarType>(
            self,
            value: ScalarType,
        ) -> UninterpretedOptionBuilder<(T, UninterpretedOptionSingleField6<ScalarType>)>
        where
            ScalarType: ::std::convert::Into<f64> + ::std::clone::Clone,
        {
            UninterpretedOptionBuilder((
                self.0,
                UninterpretedOptionSingleField6 {
                    double_value: value,
                },
            ))
        }

        pub fn append_string_value<ScalarType>(
            self,
            value: ScalarType,
        ) -> UninterpretedOptionBuilder<(T, UninterpretedOptionSingleField7<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<[u8]>,
        {
            UninterpretedOptionBuilder((
                self.0,
                UninterpretedOptionSingleField7 {
                    string_value: value,
                },
            ))
        }

        pub fn append_aggregate_value<ScalarType>(
            self,
            value: ScalarType,
        ) -> UninterpretedOptionBuilder<(T, UninterpretedOptionSingleField8<ScalarType>)>
        where
            ScalarType: ::std::convert::AsRef<str>,
        {
            UninterpretedOptionBuilder((
                self.0,
                UninterpretedOptionSingleField8 {
                    aggregate_value: value,
                },
            ))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl UninterpretedOptionBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct SourceCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    pub location: RepeatedType,
}

    impl<ScalarType, RepeatedType> ::puroro::Message<super::SourceCodeInfo>
for SourceCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{}

    impl<ScalarType, RepeatedType> super::_puroro_traits::SourceCodeInfoTrait
for SourceCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
type LocationMessageType<'this> = &'this ScalarType where Self: 'this;

type LocationRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
    &self.location
}
}

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
for SourceCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    Self: super::_puroro_traits::SourceCodeInfoTrait,
    for<'a> <Self as super::_puroro_traits::SourceCodeInfoTrait>::LocationMessageType<'a> :
        ::puroro::internal::se::SerMessageToIoWrite,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::SourceCodeInfoTrait>::LocationMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::SourceCodeInfoTrait>::location(self),
            1,
            out,
            false,
        )?;
        ::std::result::Result::Ok(())
    }
}

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
for SourceCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    fn from(value: RepeatedType) -> Self {
        Self {
            location: value,
        }
    }
}

    impl<ScalarType, RepeatedType> ::std::clone::Clone
for SourceCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    RepeatedType: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self {
            location: ::std::clone::Clone::clone(&self.location),
        }
    }
}
    pub struct SourceCodeInfoBumpalo<'bump> {
    _bump: &'bump ::puroro::bumpalo::Bump,
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (0 + 31) / 32],
    >,
    location: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_impls::LocationBumpalo<'bump>>,
}

    pub type SourceCodeInfoBumpaloOwned = ::puroro::BumpaloOwned<SourceCodeInfoBumpalo<'static>>;
    impl<'bump> SourceCodeInfoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                location: ::std::default::Default::default(),
            }
        }
        pub fn location<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_impls::LocationBumpalo<'this>]{
            unsafe { self.location.cast_item_unchecked() }
        }
        pub fn location_mut<'this>(&'this mut self) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_impls::LocationBumpalo<'bump>>{
            unsafe { self.location.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::SourceCodeInfo>
        for SourceCodeInfoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for SourceCodeInfoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for SourceCodeInfoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::SourceCodeInfoTrait for SourceCodeInfoBumpalo<'bump> {
        type LocationMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_impls::LocationBumpalo<'this> where Self: 'this;
        type LocationRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_impls::LocationBumpalo<'this>] where Self: 'this;

        fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
            unsafe { self.location.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for SourceCodeInfoBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_impls::LocationBumpalo<'bump>>
                >::deser_field(&mut self.location, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for SourceCodeInfoBumpalo<'bump>
    where
        Self: super::_puroro_traits::SourceCodeInfoTrait,
        for<'a> <Self as super::_puroro_traits::SourceCodeInfoTrait>::LocationMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::SourceCodeInfoTrait>::LocationMessageType<'_>,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::SourceCodeInfoTrait>::location(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct SourceCodeInfoBuilder<T>(T);

    impl<T> SourceCodeInfoBuilder<T>
    where
        T: SourceCodeInfoTrait,
    {
        pub fn append_location<ScalarType, RepeatedType>(self, value: RepeatedType)
        -> SourceCodeInfoBuilder<(T, SourceCodeInfoSingleField1<ScalarType, RepeatedType>)>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> +
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
            SourceCodeInfoBuilder((self.0, SourceCodeInfoSingleField1 { location: value }))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl SourceCodeInfoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }

    pub struct GeneratedCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    pub annotation: RepeatedType,
}

    impl<ScalarType, RepeatedType> ::puroro::Message<super::GeneratedCodeInfo>
for GeneratedCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{}

    impl<ScalarType, RepeatedType> super::_puroro_traits::GeneratedCodeInfoTrait
for GeneratedCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
type AnnotationMessageType<'this> = &'this ScalarType where Self: 'this;

type AnnotationRepeatedType<'this> =
    &'this RepeatedType where Self: 'this;

fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
    &self.annotation
}
}

    impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
for GeneratedCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    Self: super::_puroro_traits::GeneratedCodeInfoTrait,
    for<'a> <Self as super::_puroro_traits::GeneratedCodeInfoTrait>::AnnotationMessageType<'a> :
        ::puroro::internal::se::SerMessageToIoWrite,
{
    fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
    where
        W: ::std::io::Write,
    {
        ::puroro::internal::se::SerFieldToIoWrite::<
            ::puroro::tags::Repeated, ::puroro::tags::Message<<Self as super::_puroro_traits::GeneratedCodeInfoTrait>::AnnotationMessageType<'_>>
        >::ser_field(
            <Self as super::_puroro_traits::GeneratedCodeInfoTrait>::annotation(self),
            1,
            out,
            false,
        )?;
        ::std::result::Result::Ok(())
    }
}

    impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
for GeneratedCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
{
    fn from(value: RepeatedType) -> Self {
        Self {
            annotation: value,
        }
    }
}

    impl<ScalarType, RepeatedType> ::std::clone::Clone
for GeneratedCodeInfoSingleField1<ScalarType, RepeatedType>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> + 
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    RepeatedType: ::std::clone::Clone,
{
    fn clone(&self) -> Self {
        Self {
            annotation: ::std::clone::Clone::clone(&self.annotation),
        }
    }
}
    pub struct GeneratedCodeInfoBumpalo<'bump> {
    _bump: &'bump ::puroro::bumpalo::Bump,
    _bitfield: ::puroro::bitvec::array::BitArray<
        ::puroro::bitvec::order::Lsb0,
        [u32; (0 + 31) / 32],
    >,
    annotation: ::puroro::internal::NoAllocBumpVec<self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_impls::AnnotationBumpalo<'bump>>,
}

    pub type GeneratedCodeInfoBumpaloOwned =
        ::puroro::BumpaloOwned<GeneratedCodeInfoBumpalo<'static>>;
    impl<'bump> GeneratedCodeInfoBumpalo<'bump> {
        pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            #[allow(unused)]
            let bump_ref: &::puroro::bumpalo::Bump =
                unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

            Self {
                _bump: bump,
                _bitfield: ::std::default::Default::default(),
                annotation: ::std::default::Default::default(),
            }
        }
        pub fn annotation<'this>(&'this self) -> &'this[self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_impls::AnnotationBumpalo<'this>]{
            unsafe { self.annotation.cast_item_unchecked() }
        }
        pub fn annotation_mut<'this>(&'this mut self) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_impls::AnnotationBumpalo<'bump>>{
            unsafe { self.annotation.as_mut_vec_in(self._bump) }
        }
    }
    impl<'bump> ::puroro::Message<super::_puroro_simple_impl::GeneratedCodeInfo>
        for GeneratedCodeInfoBumpalo<'bump>
    {
    }

    impl<'bump> ::puroro::BumpaloMessage<'bump> for GeneratedCodeInfoBumpalo<'bump> {
        fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> ::puroro::internal::BumpDefault<'bump> for GeneratedCodeInfoBumpalo<'bump> {
        fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
            Self::new_in(bump)
        }
    }

    impl<'bump> super::_puroro_traits::GeneratedCodeInfoTrait for GeneratedCodeInfoBumpalo<'bump> {
        type AnnotationMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_impls::AnnotationBumpalo<'this> where Self: 'this;
        type AnnotationRepeatedType<'this> =
    &'this [self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_impls::AnnotationBumpalo<'this>] where Self: 'this;

        fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
            unsafe { self.annotation.cast_item_unchecked() }
        }
    }

    impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for GeneratedCodeInfoBumpalo<'bump> {
        fn deser_field<'this, I>(
            &'this mut self,
            field_number: i32,
            data: ::puroro::internal::types::FieldData<
                &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
            >,
        ) -> ::puroro::Result<()>
        where
            I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
        {
            use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
            match field_number {
            1 => {
                DeserFieldFromBytesIter::<
                    ::puroro::tags::Repeated, ::puroro::tags::Message<self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_impls::AnnotationBumpalo<'bump>>
                >::deser_field(&mut self.annotation, data, self._bump)
            }

            _ => unimplemented!("TODO: This case should be handled properly..."),
        }
        }
    }

    impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for GeneratedCodeInfoBumpalo<'bump>
    where
        Self: super::_puroro_traits::GeneratedCodeInfoTrait,
        for<'a> <Self as super::_puroro_traits::GeneratedCodeInfoTrait>::AnnotationMessageType<'a>:
            ::puroro::internal::se::SerMessageToIoWrite,
    {
        fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
        where
            W: ::std::io::Write,
        {
            ::puroro::internal::se::SerFieldToIoWrite::<
                ::puroro::tags::Repeated,
                ::puroro::tags::Message<
                    <Self as super::_puroro_traits::GeneratedCodeInfoTrait>::AnnotationMessageType<
                        '_,
                    >,
                >,
            >::ser_field(
                <Self as super::_puroro_traits::GeneratedCodeInfoTrait>::annotation(self),
                1,
                out,
                false,
            )?;
            ::std::result::Result::Ok(())
        }
    }
    pub struct GeneratedCodeInfoBuilder<T>(T);

    impl<T> GeneratedCodeInfoBuilder<T>
    where
        T: GeneratedCodeInfoTrait,
    {
        pub fn append_annotation<ScalarType, RepeatedType>(self, value: RepeatedType)
        -> GeneratedCodeInfoBuilder<(T, GeneratedCodeInfoSingleField1<ScalarType, RepeatedType>)>
where

ScalarType:
    self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait,
for <'a> &'a RepeatedType: ::puroro::RepeatedField<'a> +
    ::std::iter::IntoIterator<Item = &'a ScalarType>,
    {
            GeneratedCodeInfoBuilder((self.0, GeneratedCodeInfoSingleField1 { annotation: value }))
        }

        pub fn build(self) -> T {
            self.0
        }
    }

    impl GeneratedCodeInfoBuilder<()> {
        pub fn new() -> Self {
            Self(())
        }
    }
}
pub use _puroro_traits::*;
pub mod _puroro_traits {
    mod _puroro_root {
        pub use super::super::_puroro_root::*;
    }

    pub trait FileDescriptorSetTrait {
        type FileMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::FileDescriptorProtoTrait
            where Self: 'this;

        type FileRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::FileMessageType<'this>>
        where
            Self: 'this;
        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this>;
    }

    macro_rules! file_descriptor_set_delegate {
        ($ty:ty) => {
            type FileMessageType<'this> = <$ty>::FileMessageType<'this> where Self: 'this;

            type FileRepeatedType<'this> = <$ty>::FileRepeatedType<'this> where Self: 'this;
            fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
                (**self).file()
            }
        };
    }

    impl<T> FileDescriptorSetTrait for &'_ T
    where
        T: FileDescriptorSetTrait,
    {
        file_descriptor_set_delegate!(T);
    }

    impl<T> FileDescriptorSetTrait for &'_ mut T
    where
        T: FileDescriptorSetTrait,
    {
        file_descriptor_set_delegate!(T);
    }

    impl<T> FileDescriptorSetTrait for ::std::boxed::Box<T>
    where
        T: FileDescriptorSetTrait,
    {
        file_descriptor_set_delegate!(T);
    }

    impl<'bump, T> FileDescriptorSetTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: FileDescriptorSetTrait,
    {
        file_descriptor_set_delegate!(T);
    }

    impl<T> FileDescriptorSetTrait for ::puroro::BumpaloOwned<T>
    where
        T: FileDescriptorSetTrait,
    {
        file_descriptor_set_delegate!(T);
    }
    impl FileDescriptorSetTrait for () {
        type FileMessageType<'this> = () where Self: 'this;
        type FileRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FileMessageType<'this>>
            where Self: 'this;
        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> FileDescriptorSetTrait for (T, U)
    where
        T: FileDescriptorSetTrait,
        U: FileDescriptorSetTrait,
    {
        type FileMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorSetTrait>::FileMessageType<'this>,
            <U as FileDescriptorSetTrait>::FileMessageType<'this>,
        > where Self: 'this;
        type FileRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as FileDescriptorSetTrait>::FileRepeatedType<'this>,
                <U as FileDescriptorSetTrait>::FileRepeatedType<'this>,
            > where Self: 'this;

        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as FileDescriptorSetTrait>::file(&self.0),
                <U as FileDescriptorSetTrait>::file(&self.1),
            )
        }
    }
    impl<T, U> FileDescriptorSetTrait for ::puroro::Either<T, U>
    where
        T: FileDescriptorSetTrait,
        U: FileDescriptorSetTrait,
    {
        type FileMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorSetTrait>::FileMessageType<'this>,
            <U as FileDescriptorSetTrait>::FileMessageType<'this>,
        > where Self: 'this;
        type FileRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as FileDescriptorSetTrait>::FileRepeatedType<'this>,
                <U as FileDescriptorSetTrait>::FileRepeatedType<'this>,
            > where Self: 'this;

        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorSetTrait>::file(t))
                    .map_right(|u| <U as FileDescriptorSetTrait>::file(u)),
            )
        }
    }
    impl<T> FileDescriptorSetTrait for ::std::option::Option<T>
    where
        T: FileDescriptorSetTrait,
    {
        type FileMessageType<'this> = T::FileMessageType<'this> where Self: 'this;

        type FileRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::FileRepeatedType<'this>
            > where Self: 'this;
        fn file<'this>(&'this self) -> Self::FileRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.file()),
            )
        }
    }

    pub trait FileDescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn package<'this>(&'this self) -> &'this str {
            self.package_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_package<'this>(&'this self) -> bool {
            self.package_opt().is_some()
        }

        fn package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }

        type DependencyRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = &'this str>
        where
            Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this>;

        type PublicDependencyRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = i32>
        where
            Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this>;

        type WeakDependencyRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = i32>
        where
            Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this>;
        type MessageTypeMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait
            where Self: 'this;

        type MessageTypeRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::MessageTypeMessageType<'this>>
        where
            Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this>;
        type EnumTypeMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait
            where Self: 'this;

        type EnumTypeRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::EnumTypeMessageType<'this>>
        where
            Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this>;
        type ServiceMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::ServiceDescriptorProtoTrait
            where Self: 'this;

        type ServiceRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::ServiceMessageType<'this>>
        where
            Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this>;
        type ExtensionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait
            where Self: 'this;

        type ExtensionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::ExtensionMessageType<'this>>
        where
            Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this>;
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::FileOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
        type SourceCodeInfoMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::SourceCodeInfoTrait
            where Self: 'this;
        fn source_code_info<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::SourceCodeInfoMessageType<'this>> {
            self.source_code_info_opt()
        }
        fn has_source_code_info<'this>(&'this self) -> bool {
            self.source_code_info_opt().is_some()
        }

        fn source_code_info_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::SourceCodeInfoMessageType<'this>> {
            ::std::option::Option::None
        }
        fn syntax<'this>(&'this self) -> &'this str {
            self.syntax_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_syntax<'this>(&'this self) -> bool {
            self.syntax_opt().is_some()
        }

        fn syntax_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
    }

    macro_rules! file_descriptor_proto_delegate {
        ($ty:ty) => {

            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }

            fn package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).package_opt()
            }

            type DependencyRepeatedType<'this> = <$ty>::DependencyRepeatedType<'this> where Self: 'this;
            fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
                (**self).dependency()
            }

            type PublicDependencyRepeatedType<'this> = <$ty>::PublicDependencyRepeatedType<'this> where Self: 'this;
            fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
                (**self).public_dependency()
            }

            type WeakDependencyRepeatedType<'this> = <$ty>::WeakDependencyRepeatedType<'this> where Self: 'this;
            fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
                (**self).weak_dependency()
            }
            type MessageTypeMessageType<'this> = <$ty>::MessageTypeMessageType<'this> where Self: 'this;

            type MessageTypeRepeatedType<'this> = <$ty>::MessageTypeRepeatedType<'this> where Self: 'this;
            fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
                (**self).message_type()
            }
            type EnumTypeMessageType<'this> = <$ty>::EnumTypeMessageType<'this> where Self: 'this;

            type EnumTypeRepeatedType<'this> = <$ty>::EnumTypeRepeatedType<'this> where Self: 'this;
            fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
                (**self).enum_type()
            }
            type ServiceMessageType<'this> = <$ty>::ServiceMessageType<'this> where Self: 'this;

            type ServiceRepeatedType<'this> = <$ty>::ServiceRepeatedType<'this> where Self: 'this;
            fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
                (**self).service()
            }
            type ExtensionMessageType<'this> = <$ty>::ExtensionMessageType<'this> where Self: 'this;

            type ExtensionRepeatedType<'this> = <$ty>::ExtensionRepeatedType<'this> where Self: 'this;
            fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
                (**self).extension()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }
            type SourceCodeInfoMessageType<'this> = <$ty>::SourceCodeInfoMessageType<'this> where Self: 'this;

            fn source_code_info_opt<'this>(&'this self) -> ::std::option::Option<Self::SourceCodeInfoMessageType<'this>> {
                (**self).source_code_info_opt()
            }

            fn syntax_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).syntax_opt()
            }
        };
    }

    impl<T> FileDescriptorProtoTrait for &'_ T
    where
        T: FileDescriptorProtoTrait,
    {
        file_descriptor_proto_delegate!(T);
    }

    impl<T> FileDescriptorProtoTrait for &'_ mut T
    where
        T: FileDescriptorProtoTrait,
    {
        file_descriptor_proto_delegate!(T);
    }

    impl<T> FileDescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: FileDescriptorProtoTrait,
    {
        file_descriptor_proto_delegate!(T);
    }

    impl<'bump, T> FileDescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: FileDescriptorProtoTrait,
    {
        file_descriptor_proto_delegate!(T);
    }

    impl<T> FileDescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: FileDescriptorProtoTrait,
    {
        file_descriptor_proto_delegate!(T);
    }
    impl FileDescriptorProtoTrait for () {
        type DependencyRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str>
            where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type PublicDependencyRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<i32>
            where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type WeakDependencyRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<i32>
            where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type MessageTypeMessageType<'this> = () where Self: 'this;
        type MessageTypeRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MessageTypeMessageType<'this>>
            where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>>
            where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ServiceMessageType<'this> = () where Self: 'this;
        type ServiceRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ServiceMessageType<'this>>
            where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>>
            where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type SourceCodeInfoMessageType<'this> = () where Self: 'this;
    }
    impl<T, U> FileDescriptorProtoTrait for (T, U)
    where
        T: FileDescriptorProtoTrait,
        U: FileDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileDescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as FileDescriptorProtoTrait>::name_opt(&self.0))
        }

        fn package_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileDescriptorProtoTrait>::package_opt(&self.1)
                .or_else(|| <T as FileDescriptorProtoTrait>::package_opt(&self.0))
        }
        type DependencyRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedField<
                <T as FileDescriptorProtoTrait>::DependencyRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::DependencyRepeatedType<'this>,
            > where Self: 'this;

        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedField::new(
                <T as FileDescriptorProtoTrait>::dependency(&self.0),
                <U as FileDescriptorProtoTrait>::dependency(&self.1),
            )
        }
        type PublicDependencyRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedField<
                <T as FileDescriptorProtoTrait>::PublicDependencyRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::PublicDependencyRepeatedType<'this>,
            > where Self: 'this;

        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedField::new(
                <T as FileDescriptorProtoTrait>::public_dependency(&self.0),
                <U as FileDescriptorProtoTrait>::public_dependency(&self.1),
            )
        }
        type WeakDependencyRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedField<
                <T as FileDescriptorProtoTrait>::WeakDependencyRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::WeakDependencyRepeatedType<'this>,
            > where Self: 'this;

        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedField::new(
                <T as FileDescriptorProtoTrait>::weak_dependency(&self.0),
                <U as FileDescriptorProtoTrait>::weak_dependency(&self.1),
            )
        }
        type MessageTypeMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::MessageTypeMessageType<'this>,
            <U as FileDescriptorProtoTrait>::MessageTypeMessageType<'this>,
        > where Self: 'this;
        type MessageTypeRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::MessageTypeRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::MessageTypeRepeatedType<'this>,
            > where Self: 'this;

        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as FileDescriptorProtoTrait>::message_type(&self.0),
                <U as FileDescriptorProtoTrait>::message_type(&self.1),
            )
        }
        type EnumTypeMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::EnumTypeMessageType<'this>,
            <U as FileDescriptorProtoTrait>::EnumTypeMessageType<'this>,
        > where Self: 'this;
        type EnumTypeRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
            > where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as FileDescriptorProtoTrait>::enum_type(&self.0),
                <U as FileDescriptorProtoTrait>::enum_type(&self.1),
            )
        }
        type ServiceMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::ServiceMessageType<'this>,
            <U as FileDescriptorProtoTrait>::ServiceMessageType<'this>,
        > where Self: 'this;
        type ServiceRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::ServiceRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::ServiceRepeatedType<'this>,
            > where Self: 'this;

        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as FileDescriptorProtoTrait>::service(&self.0),
                <U as FileDescriptorProtoTrait>::service(&self.1),
            )
        }
        type ExtensionMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::ExtensionMessageType<'this>,
            <U as FileDescriptorProtoTrait>::ExtensionMessageType<'this>,
        > where Self: 'this;
        type ExtensionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::ExtensionRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::ExtensionRepeatedType<'this>,
            > where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as FileDescriptorProtoTrait>::extension(&self.0),
                <U as FileDescriptorProtoTrait>::extension(&self.1),
            )
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as FileDescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as FileDescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as FileDescriptorProtoTrait>::options_opt(&self.0),
                <U as FileDescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }
        type SourceCodeInfoMessageType<'this> = (
            ::std::option::Option<<T as FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'this>>,
            ::std::option::Option<<U as FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'this>>,
        ) where Self: 'this;

        fn source_code_info_opt<'this>(
            &'this self,
        ) -> Option<Self::SourceCodeInfoMessageType<'this>> {
            match (
                <T as FileDescriptorProtoTrait>::source_code_info_opt(&self.0),
                <U as FileDescriptorProtoTrait>::source_code_info_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }

        fn syntax_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileDescriptorProtoTrait>::syntax_opt(&self.1)
                .or_else(|| <T as FileDescriptorProtoTrait>::syntax_opt(&self.0))
        }
    }
    impl<T, U> FileDescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: FileDescriptorProtoTrait,
        U: FileDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileDescriptorProtoTrait>::name_opt(t),
                |u| <U as FileDescriptorProtoTrait>::name_opt(u),
            )
        }
        fn package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileDescriptorProtoTrait>::package_opt(t),
                |u| <U as FileDescriptorProtoTrait>::package_opt(u),
            )
        }
        type DependencyRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedField<
                <T as FileDescriptorProtoTrait>::DependencyRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::DependencyRepeatedType<'this>,
            > where Self: 'this;

        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorProtoTrait>::dependency(t))
                    .map_right(|u| <U as FileDescriptorProtoTrait>::dependency(u)),
            )
        }
        type PublicDependencyRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedField<
                <T as FileDescriptorProtoTrait>::PublicDependencyRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::PublicDependencyRepeatedType<'this>,
            > where Self: 'this;

        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorProtoTrait>::public_dependency(t))
                    .map_right(|u| <U as FileDescriptorProtoTrait>::public_dependency(u)),
            )
        }
        type WeakDependencyRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedField<
                <T as FileDescriptorProtoTrait>::WeakDependencyRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::WeakDependencyRepeatedType<'this>,
            > where Self: 'this;

        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorProtoTrait>::weak_dependency(t))
                    .map_right(|u| <U as FileDescriptorProtoTrait>::weak_dependency(u)),
            )
        }
        type MessageTypeMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::MessageTypeMessageType<'this>,
            <U as FileDescriptorProtoTrait>::MessageTypeMessageType<'this>,
        > where Self: 'this;
        type MessageTypeRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::MessageTypeRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::MessageTypeRepeatedType<'this>,
            > where Self: 'this;

        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorProtoTrait>::message_type(t))
                    .map_right(|u| <U as FileDescriptorProtoTrait>::message_type(u)),
            )
        }
        type EnumTypeMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::EnumTypeMessageType<'this>,
            <U as FileDescriptorProtoTrait>::EnumTypeMessageType<'this>,
        > where Self: 'this;
        type EnumTypeRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
            > where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorProtoTrait>::enum_type(t))
                    .map_right(|u| <U as FileDescriptorProtoTrait>::enum_type(u)),
            )
        }
        type ServiceMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::ServiceMessageType<'this>,
            <U as FileDescriptorProtoTrait>::ServiceMessageType<'this>,
        > where Self: 'this;
        type ServiceRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::ServiceRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::ServiceRepeatedType<'this>,
            > where Self: 'this;

        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorProtoTrait>::service(t))
                    .map_right(|u| <U as FileDescriptorProtoTrait>::service(u)),
            )
        }
        type ExtensionMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::ExtensionMessageType<'this>,
            <U as FileDescriptorProtoTrait>::ExtensionMessageType<'this>,
        > where Self: 'this;
        type ExtensionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as FileDescriptorProtoTrait>::ExtensionRepeatedType<'this>,
                <U as FileDescriptorProtoTrait>::ExtensionRepeatedType<'this>,
            > where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as FileDescriptorProtoTrait>::extension(t))
                    .map_right(|u| <U as FileDescriptorProtoTrait>::extension(u)),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as FileDescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as FileDescriptorProtoTrait>::options_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as FileDescriptorProtoTrait>::options_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
        type SourceCodeInfoMessageType<'this> = ::puroro::Either<
            <T as FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'this>,
            <U as FileDescriptorProtoTrait>::SourceCodeInfoMessageType<'this>,
        > where Self: 'this;
        fn source_code_info_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::SourceCodeInfoMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as FileDescriptorProtoTrait>::source_code_info_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as FileDescriptorProtoTrait>::source_code_info_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
        fn syntax_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileDescriptorProtoTrait>::syntax_opt(t),
                |u| <U as FileDescriptorProtoTrait>::syntax_opt(u),
            )
        }
    }
    impl<T> FileDescriptorProtoTrait for ::std::option::Option<T>
    where
        T: FileDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        fn package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.package_opt())
        }

        type DependencyRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::DependencyRepeatedType<'this>
            > where Self: 'this;
        fn dependency<'this>(&'this self) -> Self::DependencyRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.dependency()),
            )
        }

        type PublicDependencyRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::PublicDependencyRepeatedType<'this>
            > where Self: 'this;
        fn public_dependency<'this>(&'this self) -> Self::PublicDependencyRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.public_dependency()),
            )
        }

        type WeakDependencyRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::WeakDependencyRepeatedType<'this>
            > where Self: 'this;
        fn weak_dependency<'this>(&'this self) -> Self::WeakDependencyRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.weak_dependency()),
            )
        }
        type MessageTypeMessageType<'this> = T::MessageTypeMessageType<'this> where Self: 'this;

        type MessageTypeRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::MessageTypeRepeatedType<'this>
            > where Self: 'this;
        fn message_type<'this>(&'this self) -> Self::MessageTypeRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.message_type()),
            )
        }
        type EnumTypeMessageType<'this> = T::EnumTypeMessageType<'this> where Self: 'this;

        type EnumTypeRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::EnumTypeRepeatedType<'this>
            > where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.enum_type()),
            )
        }
        type ServiceMessageType<'this> = T::ServiceMessageType<'this> where Self: 'this;

        type ServiceRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ServiceRepeatedType<'this>
            > where Self: 'this;
        fn service<'this>(&'this self) -> Self::ServiceRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.service()),
            )
        }
        type ExtensionMessageType<'this> = T::ExtensionMessageType<'this> where Self: 'this;

        type ExtensionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ExtensionRepeatedType<'this>
            > where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.extension()),
            )
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
        type SourceCodeInfoMessageType<'this> = T::SourceCodeInfoMessageType<'this> where Self: 'this;
        fn source_code_info_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::SourceCodeInfoMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.source_code_info_opt())
        }
        fn syntax_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.syntax_opt())
        }
    }

    pub trait DescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        type FieldMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait
            where Self: 'this;

        type FieldRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::FieldMessageType<'this>>
        where
            Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this>;
        type ExtensionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::FieldDescriptorProtoTrait
            where Self: 'this;

        type ExtensionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::ExtensionMessageType<'this>>
        where
            Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this>;
        type NestedTypeMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::DescriptorProtoTrait
            where Self: 'this;

        type NestedTypeRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::NestedTypeMessageType<'this>>
        where
            Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this>;
        type EnumTypeMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::EnumDescriptorProtoTrait
            where Self: 'this;

        type EnumTypeRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::EnumTypeMessageType<'this>>
        where
            Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this>;
        type ExtensionRangeMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ExtensionRangeTrait
            where Self: 'this;

        type ExtensionRangeRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::ExtensionRangeMessageType<'this>>
        where
            Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this>;
        type OneofDeclMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::OneofDescriptorProtoTrait
            where Self: 'this;

        type OneofDeclRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::OneofDeclMessageType<'this>>
        where
            Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this>;
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::MessageOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
        type ReservedRangeMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_nested::descriptor_proto::_puroro_traits::ReservedRangeTrait
            where Self: 'this;

        type ReservedRangeRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::ReservedRangeMessageType<'this>>
        where
            Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this>;

        type ReservedNameRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = &'this str>
        where
            Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this>;
    }

    macro_rules! descriptor_proto_delegate {
        ($ty:ty) => {

            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }
            type FieldMessageType<'this> = <$ty>::FieldMessageType<'this> where Self: 'this;

            type FieldRepeatedType<'this> = <$ty>::FieldRepeatedType<'this> where Self: 'this;
            fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
                (**self).field()
            }
            type ExtensionMessageType<'this> = <$ty>::ExtensionMessageType<'this> where Self: 'this;

            type ExtensionRepeatedType<'this> = <$ty>::ExtensionRepeatedType<'this> where Self: 'this;
            fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
                (**self).extension()
            }
            type NestedTypeMessageType<'this> = <$ty>::NestedTypeMessageType<'this> where Self: 'this;

            type NestedTypeRepeatedType<'this> = <$ty>::NestedTypeRepeatedType<'this> where Self: 'this;
            fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
                (**self).nested_type()
            }
            type EnumTypeMessageType<'this> = <$ty>::EnumTypeMessageType<'this> where Self: 'this;

            type EnumTypeRepeatedType<'this> = <$ty>::EnumTypeRepeatedType<'this> where Self: 'this;
            fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
                (**self).enum_type()
            }
            type ExtensionRangeMessageType<'this> = <$ty>::ExtensionRangeMessageType<'this> where Self: 'this;

            type ExtensionRangeRepeatedType<'this> = <$ty>::ExtensionRangeRepeatedType<'this> where Self: 'this;
            fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
                (**self).extension_range()
            }
            type OneofDeclMessageType<'this> = <$ty>::OneofDeclMessageType<'this> where Self: 'this;

            type OneofDeclRepeatedType<'this> = <$ty>::OneofDeclRepeatedType<'this> where Self: 'this;
            fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
                (**self).oneof_decl()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }
            type ReservedRangeMessageType<'this> = <$ty>::ReservedRangeMessageType<'this> where Self: 'this;

            type ReservedRangeRepeatedType<'this> = <$ty>::ReservedRangeRepeatedType<'this> where Self: 'this;
            fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
                (**self).reserved_range()
            }

            type ReservedNameRepeatedType<'this> = <$ty>::ReservedNameRepeatedType<'this> where Self: 'this;
            fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
                (**self).reserved_name()
            }
        };
    }

    impl<T> DescriptorProtoTrait for &'_ T
    where
        T: DescriptorProtoTrait,
    {
        descriptor_proto_delegate!(T);
    }

    impl<T> DescriptorProtoTrait for &'_ mut T
    where
        T: DescriptorProtoTrait,
    {
        descriptor_proto_delegate!(T);
    }

    impl<T> DescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: DescriptorProtoTrait,
    {
        descriptor_proto_delegate!(T);
    }

    impl<'bump, T> DescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: DescriptorProtoTrait,
    {
        descriptor_proto_delegate!(T);
    }

    impl<T> DescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: DescriptorProtoTrait,
    {
        descriptor_proto_delegate!(T);
    }
    impl DescriptorProtoTrait for () {
        type FieldMessageType<'this> = () where Self: 'this;
        type FieldRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::FieldMessageType<'this>>
            where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionMessageType<'this> = () where Self: 'this;
        type ExtensionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionMessageType<'this>>
            where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type NestedTypeMessageType<'this> = () where Self: 'this;
        type NestedTypeRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NestedTypeMessageType<'this>>
            where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type EnumTypeMessageType<'this> = () where Self: 'this;
        type EnumTypeRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::EnumTypeMessageType<'this>>
            where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ExtensionRangeMessageType<'this> = () where Self: 'this;
        type ExtensionRangeRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ExtensionRangeMessageType<'this>>
            where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OneofDeclMessageType<'this> = () where Self: 'this;
        type OneofDeclRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::OneofDeclMessageType<'this>>
            where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>>
            where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str>
            where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> DescriptorProtoTrait for (T, U)
    where
        T: DescriptorProtoTrait,
        U: DescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as DescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as DescriptorProtoTrait>::name_opt(&self.0))
        }
        type FieldMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::FieldMessageType<'this>,
            <U as DescriptorProtoTrait>::FieldMessageType<'this>,
        > where Self: 'this;
        type FieldRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as DescriptorProtoTrait>::FieldRepeatedType<'this>,
                <U as DescriptorProtoTrait>::FieldRepeatedType<'this>,
            > where Self: 'this;

        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as DescriptorProtoTrait>::field(&self.0),
                <U as DescriptorProtoTrait>::field(&self.1),
            )
        }
        type ExtensionMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::ExtensionMessageType<'this>,
            <U as DescriptorProtoTrait>::ExtensionMessageType<'this>,
        > where Self: 'this;
        type ExtensionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as DescriptorProtoTrait>::ExtensionRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ExtensionRepeatedType<'this>,
            > where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as DescriptorProtoTrait>::extension(&self.0),
                <U as DescriptorProtoTrait>::extension(&self.1),
            )
        }
        type NestedTypeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::NestedTypeMessageType<'this>,
            <U as DescriptorProtoTrait>::NestedTypeMessageType<'this>,
        > where Self: 'this;
        type NestedTypeRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as DescriptorProtoTrait>::NestedTypeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::NestedTypeRepeatedType<'this>,
            > where Self: 'this;

        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as DescriptorProtoTrait>::nested_type(&self.0),
                <U as DescriptorProtoTrait>::nested_type(&self.1),
            )
        }
        type EnumTypeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::EnumTypeMessageType<'this>,
            <U as DescriptorProtoTrait>::EnumTypeMessageType<'this>,
        > where Self: 'this;
        type EnumTypeRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as DescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
            > where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as DescriptorProtoTrait>::enum_type(&self.0),
                <U as DescriptorProtoTrait>::enum_type(&self.1),
            )
        }
        type ExtensionRangeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::ExtensionRangeMessageType<'this>,
            <U as DescriptorProtoTrait>::ExtensionRangeMessageType<'this>,
        > where Self: 'this;
        type ExtensionRangeRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as DescriptorProtoTrait>::ExtensionRangeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ExtensionRangeRepeatedType<'this>,
            > where Self: 'this;

        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as DescriptorProtoTrait>::extension_range(&self.0),
                <U as DescriptorProtoTrait>::extension_range(&self.1),
            )
        }
        type OneofDeclMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::OneofDeclMessageType<'this>,
            <U as DescriptorProtoTrait>::OneofDeclMessageType<'this>,
        > where Self: 'this;
        type OneofDeclRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as DescriptorProtoTrait>::OneofDeclRepeatedType<'this>,
                <U as DescriptorProtoTrait>::OneofDeclRepeatedType<'this>,
            > where Self: 'this;

        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as DescriptorProtoTrait>::oneof_decl(&self.0),
                <U as DescriptorProtoTrait>::oneof_decl(&self.1),
            )
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as DescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as DescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as DescriptorProtoTrait>::options_opt(&self.0),
                <U as DescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }
        type ReservedRangeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::ReservedRangeMessageType<'this>,
            <U as DescriptorProtoTrait>::ReservedRangeMessageType<'this>,
        > where Self: 'this;
        type ReservedRangeRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as DescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as DescriptorProtoTrait>::reserved_range(&self.0),
                <U as DescriptorProtoTrait>::reserved_range(&self.1),
            )
        }
        type ReservedNameRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedField<
                <T as DescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedField::new(
                <T as DescriptorProtoTrait>::reserved_name(&self.0),
                <U as DescriptorProtoTrait>::reserved_name(&self.1),
            )
        }
    }
    impl<T, U> DescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: DescriptorProtoTrait,
        U: DescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as DescriptorProtoTrait>::name_opt(t),
                |u| <U as DescriptorProtoTrait>::name_opt(u),
            )
        }
        type FieldMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::FieldMessageType<'this>,
            <U as DescriptorProtoTrait>::FieldMessageType<'this>,
        > where Self: 'this;
        type FieldRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as DescriptorProtoTrait>::FieldRepeatedType<'this>,
                <U as DescriptorProtoTrait>::FieldRepeatedType<'this>,
            > where Self: 'this;

        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::field(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::field(u)),
            )
        }
        type ExtensionMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::ExtensionMessageType<'this>,
            <U as DescriptorProtoTrait>::ExtensionMessageType<'this>,
        > where Self: 'this;
        type ExtensionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as DescriptorProtoTrait>::ExtensionRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ExtensionRepeatedType<'this>,
            > where Self: 'this;

        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::extension(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::extension(u)),
            )
        }
        type NestedTypeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::NestedTypeMessageType<'this>,
            <U as DescriptorProtoTrait>::NestedTypeMessageType<'this>,
        > where Self: 'this;
        type NestedTypeRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as DescriptorProtoTrait>::NestedTypeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::NestedTypeRepeatedType<'this>,
            > where Self: 'this;

        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::nested_type(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::nested_type(u)),
            )
        }
        type EnumTypeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::EnumTypeMessageType<'this>,
            <U as DescriptorProtoTrait>::EnumTypeMessageType<'this>,
        > where Self: 'this;
        type EnumTypeRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as DescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::EnumTypeRepeatedType<'this>,
            > where Self: 'this;

        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::enum_type(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::enum_type(u)),
            )
        }
        type ExtensionRangeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::ExtensionRangeMessageType<'this>,
            <U as DescriptorProtoTrait>::ExtensionRangeMessageType<'this>,
        > where Self: 'this;
        type ExtensionRangeRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as DescriptorProtoTrait>::ExtensionRangeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ExtensionRangeRepeatedType<'this>,
            > where Self: 'this;

        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::extension_range(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::extension_range(u)),
            )
        }
        type OneofDeclMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::OneofDeclMessageType<'this>,
            <U as DescriptorProtoTrait>::OneofDeclMessageType<'this>,
        > where Self: 'this;
        type OneofDeclRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as DescriptorProtoTrait>::OneofDeclRepeatedType<'this>,
                <U as DescriptorProtoTrait>::OneofDeclRepeatedType<'this>,
            > where Self: 'this;

        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::oneof_decl(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::oneof_decl(u)),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as DescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| <T as DescriptorProtoTrait>::options_opt(t).map(|t| ::puroro::Either::Left(t)),
                |u| <U as DescriptorProtoTrait>::options_opt(u).map(|u| ::puroro::Either::Right(u)),
            )
        }
        type ReservedRangeMessageType<'this> = ::puroro::Either<
            <T as DescriptorProtoTrait>::ReservedRangeMessageType<'this>,
            <U as DescriptorProtoTrait>::ReservedRangeMessageType<'this>,
        > where Self: 'this;
        type ReservedRangeRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as DescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::reserved_range(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::reserved_range(u)),
            )
        }
        type ReservedNameRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedField<
                <T as DescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
                <U as DescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedField::new(
                self.as_ref()
                    .map_left(|t| <T as DescriptorProtoTrait>::reserved_name(t))
                    .map_right(|u| <U as DescriptorProtoTrait>::reserved_name(u)),
            )
        }
    }
    impl<T> DescriptorProtoTrait for ::std::option::Option<T>
    where
        T: DescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        type FieldMessageType<'this> = T::FieldMessageType<'this> where Self: 'this;

        type FieldRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::FieldRepeatedType<'this>
            > where Self: 'this;
        fn field<'this>(&'this self) -> Self::FieldRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.field()),
            )
        }
        type ExtensionMessageType<'this> = T::ExtensionMessageType<'this> where Self: 'this;

        type ExtensionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ExtensionRepeatedType<'this>
            > where Self: 'this;
        fn extension<'this>(&'this self) -> Self::ExtensionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.extension()),
            )
        }
        type NestedTypeMessageType<'this> = T::NestedTypeMessageType<'this> where Self: 'this;

        type NestedTypeRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::NestedTypeRepeatedType<'this>
            > where Self: 'this;
        fn nested_type<'this>(&'this self) -> Self::NestedTypeRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.nested_type()),
            )
        }
        type EnumTypeMessageType<'this> = T::EnumTypeMessageType<'this> where Self: 'this;

        type EnumTypeRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::EnumTypeRepeatedType<'this>
            > where Self: 'this;
        fn enum_type<'this>(&'this self) -> Self::EnumTypeRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.enum_type()),
            )
        }
        type ExtensionRangeMessageType<'this> = T::ExtensionRangeMessageType<'this> where Self: 'this;

        type ExtensionRangeRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ExtensionRangeRepeatedType<'this>
            > where Self: 'this;
        fn extension_range<'this>(&'this self) -> Self::ExtensionRangeRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.extension_range()),
            )
        }
        type OneofDeclMessageType<'this> = T::OneofDeclMessageType<'this> where Self: 'this;

        type OneofDeclRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::OneofDeclRepeatedType<'this>
            > where Self: 'this;
        fn oneof_decl<'this>(&'this self) -> Self::OneofDeclRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.oneof_decl()),
            )
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
        type ReservedRangeMessageType<'this> = T::ReservedRangeMessageType<'this> where Self: 'this;

        type ReservedRangeRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ReservedRangeRepeatedType<'this>
            > where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.reserved_range()),
            )
        }

        type ReservedNameRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ReservedNameRepeatedType<'this>
            > where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.reserved_name()),
            )
        }
    }

    pub trait ExtensionRangeOptionsTrait {
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! extension_range_options_delegate {
        ($ty:ty) => {
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> ExtensionRangeOptionsTrait for &'_ T
    where
        T: ExtensionRangeOptionsTrait,
    {
        extension_range_options_delegate!(T);
    }

    impl<T> ExtensionRangeOptionsTrait for &'_ mut T
    where
        T: ExtensionRangeOptionsTrait,
    {
        extension_range_options_delegate!(T);
    }

    impl<T> ExtensionRangeOptionsTrait for ::std::boxed::Box<T>
    where
        T: ExtensionRangeOptionsTrait,
    {
        extension_range_options_delegate!(T);
    }

    impl<'bump, T> ExtensionRangeOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: ExtensionRangeOptionsTrait,
    {
        extension_range_options_delegate!(T);
    }

    impl<T> ExtensionRangeOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: ExtensionRangeOptionsTrait,
    {
        extension_range_options_delegate!(T);
    }
    impl ExtensionRangeOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> ExtensionRangeOptionsTrait for (T, U)
    where
        T: ExtensionRangeOptionsTrait,
        U: ExtensionRangeOptionsTrait,
    {
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as ExtensionRangeOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as ExtensionRangeOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as ExtensionRangeOptionsTrait>::uninterpreted_option(&self.0),
                <U as ExtensionRangeOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> ExtensionRangeOptionsTrait for ::puroro::Either<T, U>
    where
        T: ExtensionRangeOptionsTrait,
        U: ExtensionRangeOptionsTrait,
    {
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as ExtensionRangeOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as ExtensionRangeOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as ExtensionRangeOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as ExtensionRangeOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as ExtensionRangeOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> ExtensionRangeOptionsTrait for ::std::option::Option<T>
    where
        T: ExtensionRangeOptionsTrait,
    {
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait FieldDescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn number<'this>(&'this self) -> i32 {
            self.number_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_number<'this>(&'this self) -> bool {
            self.number_opt().is_some()
        }

        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            ::std::option::Option::None
        }
        fn label<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label
        {
            self.label_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_label<'this>(&'this self) -> bool {
            self.label_opt().is_some()
        }

        fn label_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            ::std::option::Option::None
        }
        fn r#type<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type
        {
            self.type_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_type<'this>(&'this self) -> bool {
            self.type_opt().is_some()
        }

        fn type_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            ::std::option::Option::None
        }
        fn type_name<'this>(&'this self) -> &'this str {
            self.type_name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_type_name<'this>(&'this self) -> bool {
            self.type_name_opt().is_some()
        }

        fn type_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn extendee<'this>(&'this self) -> &'this str {
            self.extendee_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_extendee<'this>(&'this self) -> bool {
            self.extendee_opt().is_some()
        }

        fn extendee_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn default_value<'this>(&'this self) -> &'this str {
            self.default_value_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_default_value<'this>(&'this self) -> bool {
            self.default_value_opt().is_some()
        }

        fn default_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn oneof_index<'this>(&'this self) -> i32 {
            self.oneof_index_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_oneof_index<'this>(&'this self) -> bool {
            self.oneof_index_opt().is_some()
        }

        fn oneof_index_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            ::std::option::Option::None
        }
        fn json_name<'this>(&'this self) -> &'this str {
            self.json_name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_json_name<'this>(&'this self) -> bool {
            self.json_name_opt().is_some()
        }

        fn json_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::FieldOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
        fn proto3_optional<'this>(&'this self) -> bool {
            self.proto3_optional_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_proto3_optional<'this>(&'this self) -> bool {
            self.proto3_optional_opt().is_some()
        }

        fn proto3_optional_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
    }

    macro_rules! field_descriptor_proto_delegate {
        ($ty:ty) => {
            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }

            fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                (**self).number_opt()
            }

            fn label_opt<'this>(
                &'this self,
            ) -> ::std::option::Option<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
            > {
                (**self).label_opt()
            }

            fn type_opt<'this>(
                &'this self,
            ) -> ::std::option::Option<
                self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
            > {
                (**self).type_opt()
            }

            fn type_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).type_name_opt()
            }

            fn extendee_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).extendee_opt()
            }

            fn default_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).default_value_opt()
            }

            fn oneof_index_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                (**self).oneof_index_opt()
            }

            fn json_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).json_name_opt()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(
                &'this self,
            ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }

            fn proto3_optional_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).proto3_optional_opt()
            }
        };
    }

    impl<T> FieldDescriptorProtoTrait for &'_ T
    where
        T: FieldDescriptorProtoTrait,
    {
        field_descriptor_proto_delegate!(T);
    }

    impl<T> FieldDescriptorProtoTrait for &'_ mut T
    where
        T: FieldDescriptorProtoTrait,
    {
        field_descriptor_proto_delegate!(T);
    }

    impl<T> FieldDescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: FieldDescriptorProtoTrait,
    {
        field_descriptor_proto_delegate!(T);
    }

    impl<'bump, T> FieldDescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: FieldDescriptorProtoTrait,
    {
        field_descriptor_proto_delegate!(T);
    }

    impl<T> FieldDescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: FieldDescriptorProtoTrait,
    {
        field_descriptor_proto_delegate!(T);
    }
    impl FieldDescriptorProtoTrait for () {
        type OptionsMessageType<'this> = () where Self: 'this;
    }
    impl<T, U> FieldDescriptorProtoTrait for (T, U)
    where
        T: FieldDescriptorProtoTrait,
        U: FieldDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FieldDescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::name_opt(&self.0))
        }

        fn number_opt<'this>(&'this self) -> Option<i32> {
            <U as FieldDescriptorProtoTrait>::number_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::number_opt(&self.0))
        }

        fn label_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            <U as FieldDescriptorProtoTrait>::label_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::label_opt(&self.0))
        }

        fn type_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            <U as FieldDescriptorProtoTrait>::type_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::type_opt(&self.0))
        }

        fn type_name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FieldDescriptorProtoTrait>::type_name_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::type_name_opt(&self.0))
        }

        fn extendee_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FieldDescriptorProtoTrait>::extendee_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::extendee_opt(&self.0))
        }

        fn default_value_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FieldDescriptorProtoTrait>::default_value_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::default_value_opt(&self.0))
        }

        fn oneof_index_opt<'this>(&'this self) -> Option<i32> {
            <U as FieldDescriptorProtoTrait>::oneof_index_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::oneof_index_opt(&self.0))
        }

        fn json_name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FieldDescriptorProtoTrait>::json_name_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::json_name_opt(&self.0))
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as FieldDescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as FieldDescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as FieldDescriptorProtoTrait>::options_opt(&self.0),
                <U as FieldDescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }

        fn proto3_optional_opt<'this>(&'this self) -> Option<bool> {
            <U as FieldDescriptorProtoTrait>::proto3_optional_opt(&self.1)
                .or_else(|| <T as FieldDescriptorProtoTrait>::proto3_optional_opt(&self.0))
        }
    }
    impl<T, U> FieldDescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: FieldDescriptorProtoTrait,
        U: FieldDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::name_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::name_opt(u),
            )
        }
        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::number_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::number_opt(u),
            )
        }
        fn label_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::label_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::label_opt(u),
            )
        }
        fn type_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::type_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::type_opt(u),
            )
        }
        fn type_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::type_name_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::type_name_opt(u),
            )
        }
        fn extendee_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::extendee_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::extendee_opt(u),
            )
        }
        fn default_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::default_value_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::default_value_opt(u),
            )
        }
        fn oneof_index_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::oneof_index_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::oneof_index_opt(u),
            )
        }
        fn json_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::json_name_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::json_name_opt(u),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as FieldDescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as FieldDescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as FieldDescriptorProtoTrait>::options_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as FieldDescriptorProtoTrait>::options_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
        fn proto3_optional_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FieldDescriptorProtoTrait>::proto3_optional_opt(t),
                |u| <U as FieldDescriptorProtoTrait>::proto3_optional_opt(u),
            )
        }
    }
    impl<T> FieldDescriptorProtoTrait for ::std::option::Option<T>
    where
        T: FieldDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            self.as_ref().and_then(|msg| msg.number_opt())
        }
        fn label_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Label,
        > {
            self.as_ref().and_then(|msg| msg.label_opt())
        }
        fn type_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_descriptor_proto::Type,
        > {
            self.as_ref().and_then(|msg| msg.type_opt())
        }
        fn type_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.type_name_opt())
        }
        fn extendee_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.extendee_opt())
        }
        fn default_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.default_value_opt())
        }
        fn oneof_index_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            self.as_ref().and_then(|msg| msg.oneof_index_opt())
        }
        fn json_name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.json_name_opt())
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
        fn proto3_optional_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.proto3_optional_opt())
        }
    }

    pub trait OneofDescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::OneofOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
    }

    macro_rules! oneof_descriptor_proto_delegate {
        ($ty:ty) => {
            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(
                &'this self,
            ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }
        };
    }

    impl<T> OneofDescriptorProtoTrait for &'_ T
    where
        T: OneofDescriptorProtoTrait,
    {
        oneof_descriptor_proto_delegate!(T);
    }

    impl<T> OneofDescriptorProtoTrait for &'_ mut T
    where
        T: OneofDescriptorProtoTrait,
    {
        oneof_descriptor_proto_delegate!(T);
    }

    impl<T> OneofDescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: OneofDescriptorProtoTrait,
    {
        oneof_descriptor_proto_delegate!(T);
    }

    impl<'bump, T> OneofDescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: OneofDescriptorProtoTrait,
    {
        oneof_descriptor_proto_delegate!(T);
    }

    impl<T> OneofDescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: OneofDescriptorProtoTrait,
    {
        oneof_descriptor_proto_delegate!(T);
    }
    impl OneofDescriptorProtoTrait for () {
        type OptionsMessageType<'this> = () where Self: 'this;
    }
    impl<T, U> OneofDescriptorProtoTrait for (T, U)
    where
        T: OneofDescriptorProtoTrait,
        U: OneofDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as OneofDescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as OneofDescriptorProtoTrait>::name_opt(&self.0))
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as OneofDescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as OneofDescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as OneofDescriptorProtoTrait>::options_opt(&self.0),
                <U as OneofDescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }
    }
    impl<T, U> OneofDescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: OneofDescriptorProtoTrait,
        U: OneofDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as OneofDescriptorProtoTrait>::name_opt(t),
                |u| <U as OneofDescriptorProtoTrait>::name_opt(u),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as OneofDescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as OneofDescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as OneofDescriptorProtoTrait>::options_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as OneofDescriptorProtoTrait>::options_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
    }
    impl<T> OneofDescriptorProtoTrait for ::std::option::Option<T>
    where
        T: OneofDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
    }

    pub trait EnumDescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        type ValueMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueDescriptorProtoTrait
            where Self: 'this;

        type ValueRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::ValueMessageType<'this>>
        where
            Self: 'this;
        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this>;
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::EnumOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
        type ReservedRangeMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_nested::enum_descriptor_proto::_puroro_traits::EnumReservedRangeTrait
            where Self: 'this;

        type ReservedRangeRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::ReservedRangeMessageType<'this>>
        where
            Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this>;

        type ReservedNameRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = &'this str>
        where
            Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this>;
    }

    macro_rules! enum_descriptor_proto_delegate {
        ($ty:ty) => {

            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }
            type ValueMessageType<'this> = <$ty>::ValueMessageType<'this> where Self: 'this;

            type ValueRepeatedType<'this> = <$ty>::ValueRepeatedType<'this> where Self: 'this;
            fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
                (**self).value()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }
            type ReservedRangeMessageType<'this> = <$ty>::ReservedRangeMessageType<'this> where Self: 'this;

            type ReservedRangeRepeatedType<'this> = <$ty>::ReservedRangeRepeatedType<'this> where Self: 'this;
            fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
                (**self).reserved_range()
            }

            type ReservedNameRepeatedType<'this> = <$ty>::ReservedNameRepeatedType<'this> where Self: 'this;
            fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
                (**self).reserved_name()
            }
        };
    }

    impl<T> EnumDescriptorProtoTrait for &'_ T
    where
        T: EnumDescriptorProtoTrait,
    {
        enum_descriptor_proto_delegate!(T);
    }

    impl<T> EnumDescriptorProtoTrait for &'_ mut T
    where
        T: EnumDescriptorProtoTrait,
    {
        enum_descriptor_proto_delegate!(T);
    }

    impl<T> EnumDescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: EnumDescriptorProtoTrait,
    {
        enum_descriptor_proto_delegate!(T);
    }

    impl<'bump, T> EnumDescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: EnumDescriptorProtoTrait,
    {
        enum_descriptor_proto_delegate!(T);
    }

    impl<T> EnumDescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: EnumDescriptorProtoTrait,
    {
        enum_descriptor_proto_delegate!(T);
    }
    impl EnumDescriptorProtoTrait for () {
        type ValueMessageType<'this> = () where Self: 'this;
        type ValueRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ValueMessageType<'this>>
            where Self: 'this;
        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
        type ReservedRangeMessageType<'this> = () where Self: 'this;
        type ReservedRangeRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::ReservedRangeMessageType<'this>>
            where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type ReservedNameRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str>
            where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> EnumDescriptorProtoTrait for (T, U)
    where
        T: EnumDescriptorProtoTrait,
        U: EnumDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as EnumDescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as EnumDescriptorProtoTrait>::name_opt(&self.0))
        }
        type ValueMessageType<'this> = ::puroro::Either<
            <T as EnumDescriptorProtoTrait>::ValueMessageType<'this>,
            <U as EnumDescriptorProtoTrait>::ValueMessageType<'this>,
        > where Self: 'this;
        type ValueRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as EnumDescriptorProtoTrait>::ValueRepeatedType<'this>,
                <U as EnumDescriptorProtoTrait>::ValueRepeatedType<'this>,
            > where Self: 'this;

        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as EnumDescriptorProtoTrait>::value(&self.0),
                <U as EnumDescriptorProtoTrait>::value(&self.1),
            )
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as EnumDescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as EnumDescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as EnumDescriptorProtoTrait>::options_opt(&self.0),
                <U as EnumDescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }
        type ReservedRangeMessageType<'this> = ::puroro::Either<
            <T as EnumDescriptorProtoTrait>::ReservedRangeMessageType<'this>,
            <U as EnumDescriptorProtoTrait>::ReservedRangeMessageType<'this>,
        > where Self: 'this;
        type ReservedRangeRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as EnumDescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
                <U as EnumDescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as EnumDescriptorProtoTrait>::reserved_range(&self.0),
                <U as EnumDescriptorProtoTrait>::reserved_range(&self.1),
            )
        }
        type ReservedNameRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedField<
                <T as EnumDescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
                <U as EnumDescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedField::new(
                <T as EnumDescriptorProtoTrait>::reserved_name(&self.0),
                <U as EnumDescriptorProtoTrait>::reserved_name(&self.1),
            )
        }
    }
    impl<T, U> EnumDescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: EnumDescriptorProtoTrait,
        U: EnumDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as EnumDescriptorProtoTrait>::name_opt(t),
                |u| <U as EnumDescriptorProtoTrait>::name_opt(u),
            )
        }
        type ValueMessageType<'this> = ::puroro::Either<
            <T as EnumDescriptorProtoTrait>::ValueMessageType<'this>,
            <U as EnumDescriptorProtoTrait>::ValueMessageType<'this>,
        > where Self: 'this;
        type ValueRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as EnumDescriptorProtoTrait>::ValueRepeatedType<'this>,
                <U as EnumDescriptorProtoTrait>::ValueRepeatedType<'this>,
            > where Self: 'this;

        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as EnumDescriptorProtoTrait>::value(t))
                    .map_right(|u| <U as EnumDescriptorProtoTrait>::value(u)),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as EnumDescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as EnumDescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as EnumDescriptorProtoTrait>::options_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as EnumDescriptorProtoTrait>::options_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
        type ReservedRangeMessageType<'this> = ::puroro::Either<
            <T as EnumDescriptorProtoTrait>::ReservedRangeMessageType<'this>,
            <U as EnumDescriptorProtoTrait>::ReservedRangeMessageType<'this>,
        > where Self: 'this;
        type ReservedRangeRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as EnumDescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
                <U as EnumDescriptorProtoTrait>::ReservedRangeRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as EnumDescriptorProtoTrait>::reserved_range(t))
                    .map_right(|u| <U as EnumDescriptorProtoTrait>::reserved_range(u)),
            )
        }
        type ReservedNameRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedField<
                <T as EnumDescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
                <U as EnumDescriptorProtoTrait>::ReservedNameRepeatedType<'this>,
            > where Self: 'this;

        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedField::new(
                self.as_ref()
                    .map_left(|t| <T as EnumDescriptorProtoTrait>::reserved_name(t))
                    .map_right(|u| <U as EnumDescriptorProtoTrait>::reserved_name(u)),
            )
        }
    }
    impl<T> EnumDescriptorProtoTrait for ::std::option::Option<T>
    where
        T: EnumDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        type ValueMessageType<'this> = T::ValueMessageType<'this> where Self: 'this;

        type ValueRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ValueRepeatedType<'this>
            > where Self: 'this;
        fn value<'this>(&'this self) -> Self::ValueRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.value()),
            )
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
        type ReservedRangeMessageType<'this> = T::ReservedRangeMessageType<'this> where Self: 'this;

        type ReservedRangeRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ReservedRangeRepeatedType<'this>
            > where Self: 'this;
        fn reserved_range<'this>(&'this self) -> Self::ReservedRangeRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.reserved_range()),
            )
        }

        type ReservedNameRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::ReservedNameRepeatedType<'this>
            > where Self: 'this;
        fn reserved_name<'this>(&'this self) -> Self::ReservedNameRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.reserved_name()),
            )
        }
    }

    pub trait EnumValueDescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn number<'this>(&'this self) -> i32 {
            self.number_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_number<'this>(&'this self) -> bool {
            self.number_opt().is_some()
        }

        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            ::std::option::Option::None
        }
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::EnumValueOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
    }

    macro_rules! enum_value_descriptor_proto_delegate {
        ($ty:ty) => {
            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }

            fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                (**self).number_opt()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(
                &'this self,
            ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }
        };
    }

    impl<T> EnumValueDescriptorProtoTrait for &'_ T
    where
        T: EnumValueDescriptorProtoTrait,
    {
        enum_value_descriptor_proto_delegate!(T);
    }

    impl<T> EnumValueDescriptorProtoTrait for &'_ mut T
    where
        T: EnumValueDescriptorProtoTrait,
    {
        enum_value_descriptor_proto_delegate!(T);
    }

    impl<T> EnumValueDescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: EnumValueDescriptorProtoTrait,
    {
        enum_value_descriptor_proto_delegate!(T);
    }

    impl<'bump, T> EnumValueDescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: EnumValueDescriptorProtoTrait,
    {
        enum_value_descriptor_proto_delegate!(T);
    }

    impl<T> EnumValueDescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: EnumValueDescriptorProtoTrait,
    {
        enum_value_descriptor_proto_delegate!(T);
    }
    impl EnumValueDescriptorProtoTrait for () {
        type OptionsMessageType<'this> = () where Self: 'this;
    }
    impl<T, U> EnumValueDescriptorProtoTrait for (T, U)
    where
        T: EnumValueDescriptorProtoTrait,
        U: EnumValueDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as EnumValueDescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as EnumValueDescriptorProtoTrait>::name_opt(&self.0))
        }

        fn number_opt<'this>(&'this self) -> Option<i32> {
            <U as EnumValueDescriptorProtoTrait>::number_opt(&self.1)
                .or_else(|| <T as EnumValueDescriptorProtoTrait>::number_opt(&self.0))
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as EnumValueDescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as EnumValueDescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as EnumValueDescriptorProtoTrait>::options_opt(&self.0),
                <U as EnumValueDescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }
    }
    impl<T, U> EnumValueDescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: EnumValueDescriptorProtoTrait,
        U: EnumValueDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as EnumValueDescriptorProtoTrait>::name_opt(t),
                |u| <U as EnumValueDescriptorProtoTrait>::name_opt(u),
            )
        }
        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            self.as_ref().either(
                |t| <T as EnumValueDescriptorProtoTrait>::number_opt(t),
                |u| <U as EnumValueDescriptorProtoTrait>::number_opt(u),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as EnumValueDescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as EnumValueDescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as EnumValueDescriptorProtoTrait>::options_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as EnumValueDescriptorProtoTrait>::options_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
    }
    impl<T> EnumValueDescriptorProtoTrait for ::std::option::Option<T>
    where
        T: EnumValueDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        fn number_opt<'this>(&'this self) -> ::std::option::Option<i32> {
            self.as_ref().and_then(|msg| msg.number_opt())
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
    }

    pub trait ServiceDescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        type MethodMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::MethodDescriptorProtoTrait
            where Self: 'this;

        type MethodRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::MethodMessageType<'this>>
        where
            Self: 'this;
        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this>;
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::ServiceOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
    }

    macro_rules! service_descriptor_proto_delegate {
        ($ty:ty) => {
            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }
            type MethodMessageType<'this> = <$ty>::MethodMessageType<'this> where Self: 'this;

            type MethodRepeatedType<'this> = <$ty>::MethodRepeatedType<'this> where Self: 'this;
            fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
                (**self).method()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(
                &'this self,
            ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }
        };
    }

    impl<T> ServiceDescriptorProtoTrait for &'_ T
    where
        T: ServiceDescriptorProtoTrait,
    {
        service_descriptor_proto_delegate!(T);
    }

    impl<T> ServiceDescriptorProtoTrait for &'_ mut T
    where
        T: ServiceDescriptorProtoTrait,
    {
        service_descriptor_proto_delegate!(T);
    }

    impl<T> ServiceDescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: ServiceDescriptorProtoTrait,
    {
        service_descriptor_proto_delegate!(T);
    }

    impl<'bump, T> ServiceDescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: ServiceDescriptorProtoTrait,
    {
        service_descriptor_proto_delegate!(T);
    }

    impl<T> ServiceDescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: ServiceDescriptorProtoTrait,
    {
        service_descriptor_proto_delegate!(T);
    }
    impl ServiceDescriptorProtoTrait for () {
        type MethodMessageType<'this> = () where Self: 'this;
        type MethodRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::MethodMessageType<'this>>
            where Self: 'this;
        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
        type OptionsMessageType<'this> = () where Self: 'this;
    }
    impl<T, U> ServiceDescriptorProtoTrait for (T, U)
    where
        T: ServiceDescriptorProtoTrait,
        U: ServiceDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as ServiceDescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as ServiceDescriptorProtoTrait>::name_opt(&self.0))
        }
        type MethodMessageType<'this> = ::puroro::Either<
            <T as ServiceDescriptorProtoTrait>::MethodMessageType<'this>,
            <U as ServiceDescriptorProtoTrait>::MethodMessageType<'this>,
        > where Self: 'this;
        type MethodRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as ServiceDescriptorProtoTrait>::MethodRepeatedType<'this>,
                <U as ServiceDescriptorProtoTrait>::MethodRepeatedType<'this>,
            > where Self: 'this;

        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as ServiceDescriptorProtoTrait>::method(&self.0),
                <U as ServiceDescriptorProtoTrait>::method(&self.1),
            )
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as ServiceDescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as ServiceDescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as ServiceDescriptorProtoTrait>::options_opt(&self.0),
                <U as ServiceDescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }
    }
    impl<T, U> ServiceDescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: ServiceDescriptorProtoTrait,
        U: ServiceDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as ServiceDescriptorProtoTrait>::name_opt(t),
                |u| <U as ServiceDescriptorProtoTrait>::name_opt(u),
            )
        }
        type MethodMessageType<'this> = ::puroro::Either<
            <T as ServiceDescriptorProtoTrait>::MethodMessageType<'this>,
            <U as ServiceDescriptorProtoTrait>::MethodMessageType<'this>,
        > where Self: 'this;
        type MethodRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as ServiceDescriptorProtoTrait>::MethodRepeatedType<'this>,
                <U as ServiceDescriptorProtoTrait>::MethodRepeatedType<'this>,
            > where Self: 'this;

        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as ServiceDescriptorProtoTrait>::method(t))
                    .map_right(|u| <U as ServiceDescriptorProtoTrait>::method(u)),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as ServiceDescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as ServiceDescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as ServiceDescriptorProtoTrait>::options_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as ServiceDescriptorProtoTrait>::options_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
    }
    impl<T> ServiceDescriptorProtoTrait for ::std::option::Option<T>
    where
        T: ServiceDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        type MethodMessageType<'this> = T::MethodMessageType<'this> where Self: 'this;

        type MethodRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::MethodRepeatedType<'this>
            > where Self: 'this;
        fn method<'this>(&'this self) -> Self::MethodRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.method()),
            )
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
    }

    pub trait MethodDescriptorProtoTrait {
        fn name<'this>(&'this self) -> &'this str {
            self.name_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_name<'this>(&'this self) -> bool {
            self.name_opt().is_some()
        }

        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn input_type<'this>(&'this self) -> &'this str {
            self.input_type_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_input_type<'this>(&'this self) -> bool {
            self.input_type_opt().is_some()
        }

        fn input_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn output_type<'this>(&'this self) -> &'this str {
            self.output_type_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_output_type<'this>(&'this self) -> bool {
            self.output_type_opt().is_some()
        }

        fn output_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::MethodOptionsTrait
            where Self: 'this;
        fn options<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.options_opt()
        }
        fn has_options<'this>(&'this self) -> bool {
            self.options_opt().is_some()
        }

        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::None
        }
        fn client_streaming<'this>(&'this self) -> bool {
            self.client_streaming_opt().unwrap_or(false)
        }
        fn has_client_streaming<'this>(&'this self) -> bool {
            self.client_streaming_opt().is_some()
        }

        fn client_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn server_streaming<'this>(&'this self) -> bool {
            self.server_streaming_opt().unwrap_or(false)
        }
        fn has_server_streaming<'this>(&'this self) -> bool {
            self.server_streaming_opt().is_some()
        }

        fn server_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
    }

    macro_rules! method_descriptor_proto_delegate {
        ($ty:ty) => {
            fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).name_opt()
            }

            fn input_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).input_type_opt()
            }

            fn output_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).output_type_opt()
            }
            type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

            fn options_opt<'this>(
                &'this self,
            ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                (**self).options_opt()
            }

            fn client_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).client_streaming_opt()
            }

            fn server_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).server_streaming_opt()
            }
        };
    }

    impl<T> MethodDescriptorProtoTrait for &'_ T
    where
        T: MethodDescriptorProtoTrait,
    {
        method_descriptor_proto_delegate!(T);
    }

    impl<T> MethodDescriptorProtoTrait for &'_ mut T
    where
        T: MethodDescriptorProtoTrait,
    {
        method_descriptor_proto_delegate!(T);
    }

    impl<T> MethodDescriptorProtoTrait for ::std::boxed::Box<T>
    where
        T: MethodDescriptorProtoTrait,
    {
        method_descriptor_proto_delegate!(T);
    }

    impl<'bump, T> MethodDescriptorProtoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: MethodDescriptorProtoTrait,
    {
        method_descriptor_proto_delegate!(T);
    }

    impl<T> MethodDescriptorProtoTrait for ::puroro::BumpaloOwned<T>
    where
        T: MethodDescriptorProtoTrait,
    {
        method_descriptor_proto_delegate!(T);
    }
    impl MethodDescriptorProtoTrait for () {
        type OptionsMessageType<'this> = () where Self: 'this;
    }
    impl<T, U> MethodDescriptorProtoTrait for (T, U)
    where
        T: MethodDescriptorProtoTrait,
        U: MethodDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> Option<&'this str> {
            <U as MethodDescriptorProtoTrait>::name_opt(&self.1)
                .or_else(|| <T as MethodDescriptorProtoTrait>::name_opt(&self.0))
        }

        fn input_type_opt<'this>(&'this self) -> Option<&'this str> {
            <U as MethodDescriptorProtoTrait>::input_type_opt(&self.1)
                .or_else(|| <T as MethodDescriptorProtoTrait>::input_type_opt(&self.0))
        }

        fn output_type_opt<'this>(&'this self) -> Option<&'this str> {
            <U as MethodDescriptorProtoTrait>::output_type_opt(&self.1)
                .or_else(|| <T as MethodDescriptorProtoTrait>::output_type_opt(&self.0))
        }
        type OptionsMessageType<'this> = (
            ::std::option::Option<<T as MethodDescriptorProtoTrait>::OptionsMessageType<'this>>,
            ::std::option::Option<<U as MethodDescriptorProtoTrait>::OptionsMessageType<'this>>,
        ) where Self: 'this;

        fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
            match (
                <T as MethodDescriptorProtoTrait>::options_opt(&self.0),
                <U as MethodDescriptorProtoTrait>::options_opt(&self.1),
            ) {
                (None, None) => None,
                (Some(t), None) => Some((Some(t), None)),
                (None, Some(u)) => Some((None, Some(u))),
                (Some(t), Some(u)) => Some((Some(t), Some(u))),
            }
        }

        fn client_streaming_opt<'this>(&'this self) -> Option<bool> {
            <U as MethodDescriptorProtoTrait>::client_streaming_opt(&self.1)
                .or_else(|| <T as MethodDescriptorProtoTrait>::client_streaming_opt(&self.0))
        }

        fn server_streaming_opt<'this>(&'this self) -> Option<bool> {
            <U as MethodDescriptorProtoTrait>::server_streaming_opt(&self.1)
                .or_else(|| <T as MethodDescriptorProtoTrait>::server_streaming_opt(&self.0))
        }
    }
    impl<T, U> MethodDescriptorProtoTrait for ::puroro::Either<T, U>
    where
        T: MethodDescriptorProtoTrait,
        U: MethodDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as MethodDescriptorProtoTrait>::name_opt(t),
                |u| <U as MethodDescriptorProtoTrait>::name_opt(u),
            )
        }
        fn input_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as MethodDescriptorProtoTrait>::input_type_opt(t),
                |u| <U as MethodDescriptorProtoTrait>::input_type_opt(u),
            )
        }
        fn output_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as MethodDescriptorProtoTrait>::output_type_opt(t),
                |u| <U as MethodDescriptorProtoTrait>::output_type_opt(u),
            )
        }
        type OptionsMessageType<'this> = ::puroro::Either<
            <T as MethodDescriptorProtoTrait>::OptionsMessageType<'this>,
            <U as MethodDescriptorProtoTrait>::OptionsMessageType<'this>,
        > where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().either(
                |t| {
                    <T as MethodDescriptorProtoTrait>::options_opt(t)
                        .map(|t| ::puroro::Either::Left(t))
                },
                |u| {
                    <U as MethodDescriptorProtoTrait>::options_opt(u)
                        .map(|u| ::puroro::Either::Right(u))
                },
            )
        }
        fn client_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as MethodDescriptorProtoTrait>::client_streaming_opt(t),
                |u| <U as MethodDescriptorProtoTrait>::client_streaming_opt(u),
            )
        }
        fn server_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as MethodDescriptorProtoTrait>::server_streaming_opt(t),
                |u| <U as MethodDescriptorProtoTrait>::server_streaming_opt(u),
            )
        }
    }
    impl<T> MethodDescriptorProtoTrait for ::std::option::Option<T>
    where
        T: MethodDescriptorProtoTrait,
    {
        fn name_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.name_opt())
        }
        fn input_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.input_type_opt())
        }
        fn output_type_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.output_type_opt())
        }
        type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
        fn options_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            self.as_ref().and_then(|msg| msg.options_opt())
        }
        fn client_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.client_streaming_opt())
        }
        fn server_streaming_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.server_streaming_opt())
        }
    }

    pub trait FileOptionsTrait {
        fn java_package<'this>(&'this self) -> &'this str {
            self.java_package_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_java_package<'this>(&'this self) -> bool {
            self.java_package_opt().is_some()
        }

        fn java_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn java_outer_classname<'this>(&'this self) -> &'this str {
            self.java_outer_classname_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_java_outer_classname<'this>(&'this self) -> bool {
            self.java_outer_classname_opt().is_some()
        }

        fn java_outer_classname_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn java_multiple_files<'this>(&'this self) -> bool {
            self.java_multiple_files_opt().unwrap_or(false)
        }
        fn has_java_multiple_files<'this>(&'this self) -> bool {
            self.java_multiple_files_opt().is_some()
        }

        fn java_multiple_files_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn java_generate_equals_and_hash<'this>(&'this self) -> bool {
            self.java_generate_equals_and_hash_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_java_generate_equals_and_hash<'this>(&'this self) -> bool {
            self.java_generate_equals_and_hash_opt().is_some()
        }

        fn java_generate_equals_and_hash_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn java_string_check_utf8<'this>(&'this self) -> bool {
            self.java_string_check_utf8_opt().unwrap_or(false)
        }
        fn has_java_string_check_utf8<'this>(&'this self) -> bool {
            self.java_string_check_utf8_opt().is_some()
        }

        fn java_string_check_utf8_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn optimize_for<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode
        {
            self.optimize_for_opt().unwrap_or(self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode::Speed)
        }
        fn has_optimize_for<'this>(&'this self) -> bool {
            self.optimize_for_opt().is_some()
        }

        fn optimize_for_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        > {
            ::std::option::Option::None
        }
        fn go_package<'this>(&'this self) -> &'this str {
            self.go_package_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_go_package<'this>(&'this self) -> bool {
            self.go_package_opt().is_some()
        }

        fn go_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn cc_generic_services<'this>(&'this self) -> bool {
            self.cc_generic_services_opt().unwrap_or(false)
        }
        fn has_cc_generic_services<'this>(&'this self) -> bool {
            self.cc_generic_services_opt().is_some()
        }

        fn cc_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn java_generic_services<'this>(&'this self) -> bool {
            self.java_generic_services_opt().unwrap_or(false)
        }
        fn has_java_generic_services<'this>(&'this self) -> bool {
            self.java_generic_services_opt().is_some()
        }

        fn java_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn py_generic_services<'this>(&'this self) -> bool {
            self.py_generic_services_opt().unwrap_or(false)
        }
        fn has_py_generic_services<'this>(&'this self) -> bool {
            self.py_generic_services_opt().is_some()
        }

        fn py_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn php_generic_services<'this>(&'this self) -> bool {
            self.php_generic_services_opt().unwrap_or(false)
        }
        fn has_php_generic_services<'this>(&'this self) -> bool {
            self.php_generic_services_opt().is_some()
        }

        fn php_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        fn has_deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().is_some()
        }

        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn cc_enable_arenas<'this>(&'this self) -> bool {
            self.cc_enable_arenas_opt().unwrap_or(true)
        }
        fn has_cc_enable_arenas<'this>(&'this self) -> bool {
            self.cc_enable_arenas_opt().is_some()
        }

        fn cc_enable_arenas_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn objc_class_prefix<'this>(&'this self) -> &'this str {
            self.objc_class_prefix_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_objc_class_prefix<'this>(&'this self) -> bool {
            self.objc_class_prefix_opt().is_some()
        }

        fn objc_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn csharp_namespace<'this>(&'this self) -> &'this str {
            self.csharp_namespace_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_csharp_namespace<'this>(&'this self) -> bool {
            self.csharp_namespace_opt().is_some()
        }

        fn csharp_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn swift_prefix<'this>(&'this self) -> &'this str {
            self.swift_prefix_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_swift_prefix<'this>(&'this self) -> bool {
            self.swift_prefix_opt().is_some()
        }

        fn swift_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn php_class_prefix<'this>(&'this self) -> &'this str {
            self.php_class_prefix_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_php_class_prefix<'this>(&'this self) -> bool {
            self.php_class_prefix_opt().is_some()
        }

        fn php_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn php_namespace<'this>(&'this self) -> &'this str {
            self.php_namespace_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_php_namespace<'this>(&'this self) -> bool {
            self.php_namespace_opt().is_some()
        }

        fn php_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn php_metadata_namespace<'this>(&'this self) -> &'this str {
            self.php_metadata_namespace_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_php_metadata_namespace<'this>(&'this self) -> bool {
            self.php_metadata_namespace_opt().is_some()
        }

        fn php_metadata_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn ruby_package<'this>(&'this self) -> &'this str {
            self.ruby_package_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_ruby_package<'this>(&'this self) -> bool {
            self.ruby_package_opt().is_some()
        }

        fn ruby_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! file_options_delegate {
        ($ty:ty) => {

            fn java_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).java_package_opt()
            }

            fn java_outer_classname_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).java_outer_classname_opt()
            }

            fn java_multiple_files_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).java_multiple_files_opt()
            }

            fn java_generate_equals_and_hash_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).java_generate_equals_and_hash_opt()
            }

            fn java_string_check_utf8_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).java_string_check_utf8_opt()
            }

            fn optimize_for_opt<'this>(&'this self) -> ::std::option::Option<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode> {
                (**self).optimize_for_opt()
            }

            fn go_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).go_package_opt()
            }

            fn cc_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).cc_generic_services_opt()
            }

            fn java_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).java_generic_services_opt()
            }

            fn py_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).py_generic_services_opt()
            }

            fn php_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).php_generic_services_opt()
            }

            fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).deprecated_opt()
            }

            fn cc_enable_arenas_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).cc_enable_arenas_opt()
            }

            fn objc_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).objc_class_prefix_opt()
            }

            fn csharp_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).csharp_namespace_opt()
            }

            fn swift_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).swift_prefix_opt()
            }

            fn php_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).php_class_prefix_opt()
            }

            fn php_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).php_namespace_opt()
            }

            fn php_metadata_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).php_metadata_namespace_opt()
            }

            fn ruby_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).ruby_package_opt()
            }
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> FileOptionsTrait for &'_ T
    where
        T: FileOptionsTrait,
    {
        file_options_delegate!(T);
    }

    impl<T> FileOptionsTrait for &'_ mut T
    where
        T: FileOptionsTrait,
    {
        file_options_delegate!(T);
    }

    impl<T> FileOptionsTrait for ::std::boxed::Box<T>
    where
        T: FileOptionsTrait,
    {
        file_options_delegate!(T);
    }

    impl<'bump, T> FileOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: FileOptionsTrait,
    {
        file_options_delegate!(T);
    }

    impl<T> FileOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: FileOptionsTrait,
    {
        file_options_delegate!(T);
    }
    impl FileOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> FileOptionsTrait for (T, U)
    where
        T: FileOptionsTrait,
        U: FileOptionsTrait,
    {
        fn java_package_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::java_package_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::java_package_opt(&self.0))
        }

        fn java_outer_classname_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::java_outer_classname_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::java_outer_classname_opt(&self.0))
        }

        fn java_multiple_files_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::java_multiple_files_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::java_multiple_files_opt(&self.0))
        }

        fn java_generate_equals_and_hash_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::java_generate_equals_and_hash_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::java_generate_equals_and_hash_opt(&self.0))
        }

        fn java_string_check_utf8_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::java_string_check_utf8_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::java_string_check_utf8_opt(&self.0))
        }

        fn optimize_for_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode>
        {
            <U as FileOptionsTrait>::optimize_for_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::optimize_for_opt(&self.0))
        }

        fn go_package_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::go_package_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::go_package_opt(&self.0))
        }

        fn cc_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::cc_generic_services_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::cc_generic_services_opt(&self.0))
        }

        fn java_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::java_generic_services_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::java_generic_services_opt(&self.0))
        }

        fn py_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::py_generic_services_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::py_generic_services_opt(&self.0))
        }

        fn php_generic_services_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::php_generic_services_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::php_generic_services_opt(&self.0))
        }

        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::deprecated_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::deprecated_opt(&self.0))
        }

        fn cc_enable_arenas_opt<'this>(&'this self) -> Option<bool> {
            <U as FileOptionsTrait>::cc_enable_arenas_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::cc_enable_arenas_opt(&self.0))
        }

        fn objc_class_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::objc_class_prefix_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::objc_class_prefix_opt(&self.0))
        }

        fn csharp_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::csharp_namespace_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::csharp_namespace_opt(&self.0))
        }

        fn swift_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::swift_prefix_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::swift_prefix_opt(&self.0))
        }

        fn php_class_prefix_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::php_class_prefix_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::php_class_prefix_opt(&self.0))
        }

        fn php_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::php_namespace_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::php_namespace_opt(&self.0))
        }

        fn php_metadata_namespace_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::php_metadata_namespace_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::php_metadata_namespace_opt(&self.0))
        }

        fn ruby_package_opt<'this>(&'this self) -> Option<&'this str> {
            <U as FileOptionsTrait>::ruby_package_opt(&self.1)
                .or_else(|| <T as FileOptionsTrait>::ruby_package_opt(&self.0))
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as FileOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as FileOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as FileOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as FileOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as FileOptionsTrait>::uninterpreted_option(&self.0),
                <U as FileOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> FileOptionsTrait for ::puroro::Either<T, U>
    where
        T: FileOptionsTrait,
        U: FileOptionsTrait,
    {
        fn java_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::java_package_opt(t),
                |u| <U as FileOptionsTrait>::java_package_opt(u),
            )
        }
        fn java_outer_classname_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::java_outer_classname_opt(t),
                |u| <U as FileOptionsTrait>::java_outer_classname_opt(u),
            )
        }
        fn java_multiple_files_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::java_multiple_files_opt(t),
                |u| <U as FileOptionsTrait>::java_multiple_files_opt(u),
            )
        }
        fn java_generate_equals_and_hash_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::java_generate_equals_and_hash_opt(t),
                |u| <U as FileOptionsTrait>::java_generate_equals_and_hash_opt(u),
            )
        }
        fn java_string_check_utf8_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::java_string_check_utf8_opt(t),
                |u| <U as FileOptionsTrait>::java_string_check_utf8_opt(u),
            )
        }
        fn optimize_for_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        > {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::optimize_for_opt(t),
                |u| <U as FileOptionsTrait>::optimize_for_opt(u),
            )
        }
        fn go_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::go_package_opt(t),
                |u| <U as FileOptionsTrait>::go_package_opt(u),
            )
        }
        fn cc_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::cc_generic_services_opt(t),
                |u| <U as FileOptionsTrait>::cc_generic_services_opt(u),
            )
        }
        fn java_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::java_generic_services_opt(t),
                |u| <U as FileOptionsTrait>::java_generic_services_opt(u),
            )
        }
        fn py_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::py_generic_services_opt(t),
                |u| <U as FileOptionsTrait>::py_generic_services_opt(u),
            )
        }
        fn php_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::php_generic_services_opt(t),
                |u| <U as FileOptionsTrait>::php_generic_services_opt(u),
            )
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::deprecated_opt(t),
                |u| <U as FileOptionsTrait>::deprecated_opt(u),
            )
        }
        fn cc_enable_arenas_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::cc_enable_arenas_opt(t),
                |u| <U as FileOptionsTrait>::cc_enable_arenas_opt(u),
            )
        }
        fn objc_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::objc_class_prefix_opt(t),
                |u| <U as FileOptionsTrait>::objc_class_prefix_opt(u),
            )
        }
        fn csharp_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::csharp_namespace_opt(t),
                |u| <U as FileOptionsTrait>::csharp_namespace_opt(u),
            )
        }
        fn swift_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::swift_prefix_opt(t),
                |u| <U as FileOptionsTrait>::swift_prefix_opt(u),
            )
        }
        fn php_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::php_class_prefix_opt(t),
                |u| <U as FileOptionsTrait>::php_class_prefix_opt(u),
            )
        }
        fn php_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::php_namespace_opt(t),
                |u| <U as FileOptionsTrait>::php_namespace_opt(u),
            )
        }
        fn php_metadata_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::php_metadata_namespace_opt(t),
                |u| <U as FileOptionsTrait>::php_metadata_namespace_opt(u),
            )
        }
        fn ruby_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as FileOptionsTrait>::ruby_package_opt(t),
                |u| <U as FileOptionsTrait>::ruby_package_opt(u),
            )
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as FileOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as FileOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as FileOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as FileOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as FileOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as FileOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> FileOptionsTrait for ::std::option::Option<T>
    where
        T: FileOptionsTrait,
    {
        fn java_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.java_package_opt())
        }
        fn java_outer_classname_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.java_outer_classname_opt())
        }
        fn java_multiple_files_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.java_multiple_files_opt())
        }
        fn java_generate_equals_and_hash_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref()
                .and_then(|msg| msg.java_generate_equals_and_hash_opt())
        }
        fn java_string_check_utf8_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref()
                .and_then(|msg| msg.java_string_check_utf8_opt())
        }
        fn optimize_for_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::file_options::OptimizeMode,
        > {
            self.as_ref().and_then(|msg| msg.optimize_for_opt())
        }
        fn go_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.go_package_opt())
        }
        fn cc_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.cc_generic_services_opt())
        }
        fn java_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref()
                .and_then(|msg| msg.java_generic_services_opt())
        }
        fn py_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.py_generic_services_opt())
        }
        fn php_generic_services_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.php_generic_services_opt())
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.deprecated_opt())
        }
        fn cc_enable_arenas_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.cc_enable_arenas_opt())
        }
        fn objc_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.objc_class_prefix_opt())
        }
        fn csharp_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.csharp_namespace_opt())
        }
        fn swift_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.swift_prefix_opt())
        }
        fn php_class_prefix_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.php_class_prefix_opt())
        }
        fn php_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.php_namespace_opt())
        }
        fn php_metadata_namespace_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref()
                .and_then(|msg| msg.php_metadata_namespace_opt())
        }
        fn ruby_package_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.ruby_package_opt())
        }
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait MessageOptionsTrait {
        fn message_set_wire_format<'this>(&'this self) -> bool {
            self.message_set_wire_format_opt().unwrap_or(false)
        }
        fn has_message_set_wire_format<'this>(&'this self) -> bool {
            self.message_set_wire_format_opt().is_some()
        }

        fn message_set_wire_format_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn no_standard_descriptor_accessor<'this>(&'this self) -> bool {
            self.no_standard_descriptor_accessor_opt().unwrap_or(false)
        }
        fn has_no_standard_descriptor_accessor<'this>(&'this self) -> bool {
            self.no_standard_descriptor_accessor_opt().is_some()
        }

        fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        fn has_deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().is_some()
        }

        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn map_entry<'this>(&'this self) -> bool {
            self.map_entry_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_map_entry<'this>(&'this self) -> bool {
            self.map_entry_opt().is_some()
        }

        fn map_entry_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! message_options_delegate {
        ($ty:ty) => {

            fn message_set_wire_format_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).message_set_wire_format_opt()
            }

            fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).no_standard_descriptor_accessor_opt()
            }

            fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).deprecated_opt()
            }

            fn map_entry_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).map_entry_opt()
            }
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> MessageOptionsTrait for &'_ T
    where
        T: MessageOptionsTrait,
    {
        message_options_delegate!(T);
    }

    impl<T> MessageOptionsTrait for &'_ mut T
    where
        T: MessageOptionsTrait,
    {
        message_options_delegate!(T);
    }

    impl<T> MessageOptionsTrait for ::std::boxed::Box<T>
    where
        T: MessageOptionsTrait,
    {
        message_options_delegate!(T);
    }

    impl<'bump, T> MessageOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: MessageOptionsTrait,
    {
        message_options_delegate!(T);
    }

    impl<T> MessageOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: MessageOptionsTrait,
    {
        message_options_delegate!(T);
    }
    impl MessageOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> MessageOptionsTrait for (T, U)
    where
        T: MessageOptionsTrait,
        U: MessageOptionsTrait,
    {
        fn message_set_wire_format_opt<'this>(&'this self) -> Option<bool> {
            <U as MessageOptionsTrait>::message_set_wire_format_opt(&self.1)
                .or_else(|| <T as MessageOptionsTrait>::message_set_wire_format_opt(&self.0))
        }

        fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> Option<bool> {
            <U as MessageOptionsTrait>::no_standard_descriptor_accessor_opt(&self.1).or_else(|| {
                <T as MessageOptionsTrait>::no_standard_descriptor_accessor_opt(&self.0)
            })
        }

        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <U as MessageOptionsTrait>::deprecated_opt(&self.1)
                .or_else(|| <T as MessageOptionsTrait>::deprecated_opt(&self.0))
        }

        fn map_entry_opt<'this>(&'this self) -> Option<bool> {
            <U as MessageOptionsTrait>::map_entry_opt(&self.1)
                .or_else(|| <T as MessageOptionsTrait>::map_entry_opt(&self.0))
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as MessageOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as MessageOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as MessageOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as MessageOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as MessageOptionsTrait>::uninterpreted_option(&self.0),
                <U as MessageOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> MessageOptionsTrait for ::puroro::Either<T, U>
    where
        T: MessageOptionsTrait,
        U: MessageOptionsTrait,
    {
        fn message_set_wire_format_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as MessageOptionsTrait>::message_set_wire_format_opt(t),
                |u| <U as MessageOptionsTrait>::message_set_wire_format_opt(u),
            )
        }
        fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as MessageOptionsTrait>::no_standard_descriptor_accessor_opt(t),
                |u| <U as MessageOptionsTrait>::no_standard_descriptor_accessor_opt(u),
            )
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as MessageOptionsTrait>::deprecated_opt(t),
                |u| <U as MessageOptionsTrait>::deprecated_opt(u),
            )
        }
        fn map_entry_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as MessageOptionsTrait>::map_entry_opt(t),
                |u| <U as MessageOptionsTrait>::map_entry_opt(u),
            )
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as MessageOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as MessageOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as MessageOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as MessageOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as MessageOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as MessageOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> MessageOptionsTrait for ::std::option::Option<T>
    where
        T: MessageOptionsTrait,
    {
        fn message_set_wire_format_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref()
                .and_then(|msg| msg.message_set_wire_format_opt())
        }
        fn no_standard_descriptor_accessor_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref()
                .and_then(|msg| msg.no_standard_descriptor_accessor_opt())
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.deprecated_opt())
        }
        fn map_entry_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.map_entry_opt())
        }
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait FieldOptionsTrait {
        fn ctype<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype {
            self.ctype_opt().unwrap_or(
                self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype::String,
            )
        }
        fn has_ctype<'this>(&'this self) -> bool {
            self.ctype_opt().is_some()
        }

        fn ctype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        > {
            ::std::option::Option::None
        }
        fn packed<'this>(&'this self) -> bool {
            self.packed_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_packed<'this>(&'this self) -> bool {
            self.packed_opt().is_some()
        }

        fn packed_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn jstype<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype {
            self.jstype_opt().unwrap_or(self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype::JsNormal)
        }
        fn has_jstype<'this>(&'this self) -> bool {
            self.jstype_opt().is_some()
        }

        fn jstype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        > {
            ::std::option::Option::None
        }
        fn lazy<'this>(&'this self) -> bool {
            self.lazy_opt().unwrap_or(false)
        }
        fn has_lazy<'this>(&'this self) -> bool {
            self.lazy_opt().is_some()
        }

        fn lazy_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        fn has_deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().is_some()
        }

        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn weak<'this>(&'this self) -> bool {
            self.weak_opt().unwrap_or(false)
        }
        fn has_weak<'this>(&'this self) -> bool {
            self.weak_opt().is_some()
        }

        fn weak_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! field_options_delegate {
        ($ty:ty) => {

            fn ctype_opt<'this>(&'this self) -> ::std::option::Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype> {
                (**self).ctype_opt()
            }

            fn packed_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).packed_opt()
            }

            fn jstype_opt<'this>(&'this self) -> ::std::option::Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype> {
                (**self).jstype_opt()
            }

            fn lazy_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).lazy_opt()
            }

            fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).deprecated_opt()
            }

            fn weak_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).weak_opt()
            }
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> FieldOptionsTrait for &'_ T
    where
        T: FieldOptionsTrait,
    {
        field_options_delegate!(T);
    }

    impl<T> FieldOptionsTrait for &'_ mut T
    where
        T: FieldOptionsTrait,
    {
        field_options_delegate!(T);
    }

    impl<T> FieldOptionsTrait for ::std::boxed::Box<T>
    where
        T: FieldOptionsTrait,
    {
        field_options_delegate!(T);
    }

    impl<'bump, T> FieldOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: FieldOptionsTrait,
    {
        field_options_delegate!(T);
    }

    impl<T> FieldOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: FieldOptionsTrait,
    {
        field_options_delegate!(T);
    }
    impl FieldOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> FieldOptionsTrait for (T, U)
    where
        T: FieldOptionsTrait,
        U: FieldOptionsTrait,
    {
        fn ctype_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype>
        {
            <U as FieldOptionsTrait>::ctype_opt(&self.1)
                .or_else(|| <T as FieldOptionsTrait>::ctype_opt(&self.0))
        }

        fn packed_opt<'this>(&'this self) -> Option<bool> {
            <U as FieldOptionsTrait>::packed_opt(&self.1)
                .or_else(|| <T as FieldOptionsTrait>::packed_opt(&self.0))
        }

        fn jstype_opt<'this>(
            &'this self,
        ) -> Option<self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype>
        {
            <U as FieldOptionsTrait>::jstype_opt(&self.1)
                .or_else(|| <T as FieldOptionsTrait>::jstype_opt(&self.0))
        }

        fn lazy_opt<'this>(&'this self) -> Option<bool> {
            <U as FieldOptionsTrait>::lazy_opt(&self.1)
                .or_else(|| <T as FieldOptionsTrait>::lazy_opt(&self.0))
        }

        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <U as FieldOptionsTrait>::deprecated_opt(&self.1)
                .or_else(|| <T as FieldOptionsTrait>::deprecated_opt(&self.0))
        }

        fn weak_opt<'this>(&'this self) -> Option<bool> {
            <U as FieldOptionsTrait>::weak_opt(&self.1)
                .or_else(|| <T as FieldOptionsTrait>::weak_opt(&self.0))
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as FieldOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as FieldOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as FieldOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as FieldOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as FieldOptionsTrait>::uninterpreted_option(&self.0),
                <U as FieldOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> FieldOptionsTrait for ::puroro::Either<T, U>
    where
        T: FieldOptionsTrait,
        U: FieldOptionsTrait,
    {
        fn ctype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        > {
            self.as_ref().either(
                |t| <T as FieldOptionsTrait>::ctype_opt(t),
                |u| <U as FieldOptionsTrait>::ctype_opt(u),
            )
        }
        fn packed_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FieldOptionsTrait>::packed_opt(t),
                |u| <U as FieldOptionsTrait>::packed_opt(u),
            )
        }
        fn jstype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        > {
            self.as_ref().either(
                |t| <T as FieldOptionsTrait>::jstype_opt(t),
                |u| <U as FieldOptionsTrait>::jstype_opt(u),
            )
        }
        fn lazy_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FieldOptionsTrait>::lazy_opt(t),
                |u| <U as FieldOptionsTrait>::lazy_opt(u),
            )
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FieldOptionsTrait>::deprecated_opt(t),
                |u| <U as FieldOptionsTrait>::deprecated_opt(u),
            )
        }
        fn weak_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as FieldOptionsTrait>::weak_opt(t),
                |u| <U as FieldOptionsTrait>::weak_opt(u),
            )
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as FieldOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as FieldOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as FieldOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as FieldOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as FieldOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as FieldOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> FieldOptionsTrait for ::std::option::Option<T>
    where
        T: FieldOptionsTrait,
    {
        fn ctype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Ctype,
        > {
            self.as_ref().and_then(|msg| msg.ctype_opt())
        }
        fn packed_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.packed_opt())
        }
        fn jstype_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::field_options::Jstype,
        > {
            self.as_ref().and_then(|msg| msg.jstype_opt())
        }
        fn lazy_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.lazy_opt())
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.deprecated_opt())
        }
        fn weak_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.weak_opt())
        }
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait OneofOptionsTrait {
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! oneof_options_delegate {
        ($ty:ty) => {
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> OneofOptionsTrait for &'_ T
    where
        T: OneofOptionsTrait,
    {
        oneof_options_delegate!(T);
    }

    impl<T> OneofOptionsTrait for &'_ mut T
    where
        T: OneofOptionsTrait,
    {
        oneof_options_delegate!(T);
    }

    impl<T> OneofOptionsTrait for ::std::boxed::Box<T>
    where
        T: OneofOptionsTrait,
    {
        oneof_options_delegate!(T);
    }

    impl<'bump, T> OneofOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: OneofOptionsTrait,
    {
        oneof_options_delegate!(T);
    }

    impl<T> OneofOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: OneofOptionsTrait,
    {
        oneof_options_delegate!(T);
    }
    impl OneofOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> OneofOptionsTrait for (T, U)
    where
        T: OneofOptionsTrait,
        U: OneofOptionsTrait,
    {
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as OneofOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as OneofOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as OneofOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as OneofOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as OneofOptionsTrait>::uninterpreted_option(&self.0),
                <U as OneofOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> OneofOptionsTrait for ::puroro::Either<T, U>
    where
        T: OneofOptionsTrait,
        U: OneofOptionsTrait,
    {
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as OneofOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as OneofOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as OneofOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as OneofOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as OneofOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as OneofOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> OneofOptionsTrait for ::std::option::Option<T>
    where
        T: OneofOptionsTrait,
    {
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait EnumOptionsTrait {
        fn allow_alias<'this>(&'this self) -> bool {
            self.allow_alias_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_allow_alias<'this>(&'this self) -> bool {
            self.allow_alias_opt().is_some()
        }

        fn allow_alias_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        fn has_deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().is_some()
        }

        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! enum_options_delegate {
        ($ty:ty) => {

            fn allow_alias_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).allow_alias_opt()
            }

            fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).deprecated_opt()
            }
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> EnumOptionsTrait for &'_ T
    where
        T: EnumOptionsTrait,
    {
        enum_options_delegate!(T);
    }

    impl<T> EnumOptionsTrait for &'_ mut T
    where
        T: EnumOptionsTrait,
    {
        enum_options_delegate!(T);
    }

    impl<T> EnumOptionsTrait for ::std::boxed::Box<T>
    where
        T: EnumOptionsTrait,
    {
        enum_options_delegate!(T);
    }

    impl<'bump, T> EnumOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: EnumOptionsTrait,
    {
        enum_options_delegate!(T);
    }

    impl<T> EnumOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: EnumOptionsTrait,
    {
        enum_options_delegate!(T);
    }
    impl EnumOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> EnumOptionsTrait for (T, U)
    where
        T: EnumOptionsTrait,
        U: EnumOptionsTrait,
    {
        fn allow_alias_opt<'this>(&'this self) -> Option<bool> {
            <U as EnumOptionsTrait>::allow_alias_opt(&self.1)
                .or_else(|| <T as EnumOptionsTrait>::allow_alias_opt(&self.0))
        }

        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <U as EnumOptionsTrait>::deprecated_opt(&self.1)
                .or_else(|| <T as EnumOptionsTrait>::deprecated_opt(&self.0))
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as EnumOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as EnumOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as EnumOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as EnumOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as EnumOptionsTrait>::uninterpreted_option(&self.0),
                <U as EnumOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> EnumOptionsTrait for ::puroro::Either<T, U>
    where
        T: EnumOptionsTrait,
        U: EnumOptionsTrait,
    {
        fn allow_alias_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as EnumOptionsTrait>::allow_alias_opt(t),
                |u| <U as EnumOptionsTrait>::allow_alias_opt(u),
            )
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as EnumOptionsTrait>::deprecated_opt(t),
                |u| <U as EnumOptionsTrait>::deprecated_opt(u),
            )
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as EnumOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as EnumOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as EnumOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as EnumOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as EnumOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as EnumOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> EnumOptionsTrait for ::std::option::Option<T>
    where
        T: EnumOptionsTrait,
    {
        fn allow_alias_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.allow_alias_opt())
        }
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.deprecated_opt())
        }
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait EnumValueOptionsTrait {
        fn deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        fn has_deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().is_some()
        }

        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! enum_value_options_delegate {
        ($ty:ty) => {

            fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).deprecated_opt()
            }
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> EnumValueOptionsTrait for &'_ T
    where
        T: EnumValueOptionsTrait,
    {
        enum_value_options_delegate!(T);
    }

    impl<T> EnumValueOptionsTrait for &'_ mut T
    where
        T: EnumValueOptionsTrait,
    {
        enum_value_options_delegate!(T);
    }

    impl<T> EnumValueOptionsTrait for ::std::boxed::Box<T>
    where
        T: EnumValueOptionsTrait,
    {
        enum_value_options_delegate!(T);
    }

    impl<'bump, T> EnumValueOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: EnumValueOptionsTrait,
    {
        enum_value_options_delegate!(T);
    }

    impl<T> EnumValueOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: EnumValueOptionsTrait,
    {
        enum_value_options_delegate!(T);
    }
    impl EnumValueOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> EnumValueOptionsTrait for (T, U)
    where
        T: EnumValueOptionsTrait,
        U: EnumValueOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <U as EnumValueOptionsTrait>::deprecated_opt(&self.1)
                .or_else(|| <T as EnumValueOptionsTrait>::deprecated_opt(&self.0))
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as EnumValueOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as EnumValueOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as EnumValueOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as EnumValueOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as EnumValueOptionsTrait>::uninterpreted_option(&self.0),
                <U as EnumValueOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> EnumValueOptionsTrait for ::puroro::Either<T, U>
    where
        T: EnumValueOptionsTrait,
        U: EnumValueOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as EnumValueOptionsTrait>::deprecated_opt(t),
                |u| <U as EnumValueOptionsTrait>::deprecated_opt(u),
            )
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as EnumValueOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as EnumValueOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as EnumValueOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as EnumValueOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as EnumValueOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as EnumValueOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> EnumValueOptionsTrait for ::std::option::Option<T>
    where
        T: EnumValueOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.deprecated_opt())
        }
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait ServiceOptionsTrait {
        fn deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        fn has_deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().is_some()
        }

        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! service_options_delegate {
        ($ty:ty) => {

            fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).deprecated_opt()
            }
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> ServiceOptionsTrait for &'_ T
    where
        T: ServiceOptionsTrait,
    {
        service_options_delegate!(T);
    }

    impl<T> ServiceOptionsTrait for &'_ mut T
    where
        T: ServiceOptionsTrait,
    {
        service_options_delegate!(T);
    }

    impl<T> ServiceOptionsTrait for ::std::boxed::Box<T>
    where
        T: ServiceOptionsTrait,
    {
        service_options_delegate!(T);
    }

    impl<'bump, T> ServiceOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: ServiceOptionsTrait,
    {
        service_options_delegate!(T);
    }

    impl<T> ServiceOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: ServiceOptionsTrait,
    {
        service_options_delegate!(T);
    }
    impl ServiceOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> ServiceOptionsTrait for (T, U)
    where
        T: ServiceOptionsTrait,
        U: ServiceOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <U as ServiceOptionsTrait>::deprecated_opt(&self.1)
                .or_else(|| <T as ServiceOptionsTrait>::deprecated_opt(&self.0))
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as ServiceOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as ServiceOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as ServiceOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as ServiceOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as ServiceOptionsTrait>::uninterpreted_option(&self.0),
                <U as ServiceOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> ServiceOptionsTrait for ::puroro::Either<T, U>
    where
        T: ServiceOptionsTrait,
        U: ServiceOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as ServiceOptionsTrait>::deprecated_opt(t),
                |u| <U as ServiceOptionsTrait>::deprecated_opt(u),
            )
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as ServiceOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as ServiceOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as ServiceOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as ServiceOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as ServiceOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as ServiceOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> ServiceOptionsTrait for ::std::option::Option<T>
    where
        T: ServiceOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.deprecated_opt())
        }
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait MethodOptionsTrait {
        fn deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().unwrap_or(false)
        }
        fn has_deprecated<'this>(&'this self) -> bool {
            self.deprecated_opt().is_some()
        }

        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            ::std::option::Option::None
        }
        fn idempotency_level<'this>(
            &'this self,
        ) -> self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel
        {
            self.idempotency_level_opt().unwrap_or(self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel::IdempotencyUnknown)
        }
        fn has_idempotency_level<'this>(&'this self) -> bool {
            self.idempotency_level_opt().is_some()
        }

        fn idempotency_level_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            ::std::option::Option::None
        }
        type UninterpretedOptionMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::UninterpretedOptionTrait
            where Self: 'this;

        type UninterpretedOptionRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::UninterpretedOptionMessageType<'this>>
        where
            Self: 'this;
        fn uninterpreted_option<'this>(&'this self)
        -> Self::UninterpretedOptionRepeatedType<'this>;
    }

    macro_rules! method_options_delegate {
        ($ty:ty) => {

            fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                (**self).deprecated_opt()
            }

            fn idempotency_level_opt<'this>(&'this self) -> ::std::option::Option<self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel> {
                (**self).idempotency_level_opt()
            }
            type UninterpretedOptionMessageType<'this> = <$ty>::UninterpretedOptionMessageType<'this> where Self: 'this;

            type UninterpretedOptionRepeatedType<'this> = <$ty>::UninterpretedOptionRepeatedType<'this> where Self: 'this;
            fn uninterpreted_option<'this>(&'this self) -> Self::UninterpretedOptionRepeatedType<'this> {
                (**self).uninterpreted_option()
            }
        };
    }

    impl<T> MethodOptionsTrait for &'_ T
    where
        T: MethodOptionsTrait,
    {
        method_options_delegate!(T);
    }

    impl<T> MethodOptionsTrait for &'_ mut T
    where
        T: MethodOptionsTrait,
    {
        method_options_delegate!(T);
    }

    impl<T> MethodOptionsTrait for ::std::boxed::Box<T>
    where
        T: MethodOptionsTrait,
    {
        method_options_delegate!(T);
    }

    impl<'bump, T> MethodOptionsTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: MethodOptionsTrait,
    {
        method_options_delegate!(T);
    }

    impl<T> MethodOptionsTrait for ::puroro::BumpaloOwned<T>
    where
        T: MethodOptionsTrait,
    {
        method_options_delegate!(T);
    }
    impl MethodOptionsTrait for () {
        type UninterpretedOptionMessageType<'this> = () where Self: 'this;
        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::UninterpretedOptionMessageType<'this>>
            where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> MethodOptionsTrait for (T, U)
    where
        T: MethodOptionsTrait,
        U: MethodOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> Option<bool> {
            <U as MethodOptionsTrait>::deprecated_opt(&self.1)
                .or_else(|| <T as MethodOptionsTrait>::deprecated_opt(&self.0))
        }

        fn idempotency_level_opt<'this>(
            &'this self,
        ) -> Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            <U as MethodOptionsTrait>::idempotency_level_opt(&self.1)
                .or_else(|| <T as MethodOptionsTrait>::idempotency_level_opt(&self.0))
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as MethodOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as MethodOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as MethodOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as MethodOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as MethodOptionsTrait>::uninterpreted_option(&self.0),
                <U as MethodOptionsTrait>::uninterpreted_option(&self.1),
            )
        }
    }
    impl<T, U> MethodOptionsTrait for ::puroro::Either<T, U>
    where
        T: MethodOptionsTrait,
        U: MethodOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().either(
                |t| <T as MethodOptionsTrait>::deprecated_opt(t),
                |u| <U as MethodOptionsTrait>::deprecated_opt(u),
            )
        }
        fn idempotency_level_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            self.as_ref().either(
                |t| <T as MethodOptionsTrait>::idempotency_level_opt(t),
                |u| <U as MethodOptionsTrait>::idempotency_level_opt(u),
            )
        }
        type UninterpretedOptionMessageType<'this> = ::puroro::Either<
            <T as MethodOptionsTrait>::UninterpretedOptionMessageType<'this>,
            <U as MethodOptionsTrait>::UninterpretedOptionMessageType<'this>,
        > where Self: 'this;
        type UninterpretedOptionRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as MethodOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
                <U as MethodOptionsTrait>::UninterpretedOptionRepeatedType<'this>,
            > where Self: 'this;

        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as MethodOptionsTrait>::uninterpreted_option(t))
                    .map_right(|u| <U as MethodOptionsTrait>::uninterpreted_option(u)),
            )
        }
    }
    impl<T> MethodOptionsTrait for ::std::option::Option<T>
    where
        T: MethodOptionsTrait,
    {
        fn deprecated_opt<'this>(&'this self) -> ::std::option::Option<bool> {
            self.as_ref().and_then(|msg| msg.deprecated_opt())
        }
        fn idempotency_level_opt<'this>(
            &'this self,
        ) -> ::std::option::Option<
            self::_puroro_root::google::protobuf::_puroro_nested::method_options::IdempotencyLevel,
        > {
            self.as_ref().and_then(|msg| msg.idempotency_level_opt())
        }
        type UninterpretedOptionMessageType<'this> = T::UninterpretedOptionMessageType<'this> where Self: 'this;

        type UninterpretedOptionRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::UninterpretedOptionRepeatedType<'this>
            > where Self: 'this;
        fn uninterpreted_option<'this>(
            &'this self,
        ) -> Self::UninterpretedOptionRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.uninterpreted_option()),
            )
        }
    }

    pub trait UninterpretedOptionTrait {
        type NameMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_nested::uninterpreted_option::_puroro_traits::NamePartTrait
            where Self: 'this;

        type NameRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::NameMessageType<'this>>
        where
            Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this>;
        fn identifier_value<'this>(&'this self) -> &'this str {
            self.identifier_value_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_identifier_value<'this>(&'this self) -> bool {
            self.identifier_value_opt().is_some()
        }

        fn identifier_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
        fn positive_int_value<'this>(&'this self) -> u64 {
            self.positive_int_value_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_positive_int_value<'this>(&'this self) -> bool {
            self.positive_int_value_opt().is_some()
        }

        fn positive_int_value_opt<'this>(&'this self) -> ::std::option::Option<u64> {
            ::std::option::Option::None
        }
        fn negative_int_value<'this>(&'this self) -> i64 {
            self.negative_int_value_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_negative_int_value<'this>(&'this self) -> bool {
            self.negative_int_value_opt().is_some()
        }

        fn negative_int_value_opt<'this>(&'this self) -> ::std::option::Option<i64> {
            ::std::option::Option::None
        }
        fn double_value<'this>(&'this self) -> f64 {
            self.double_value_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_double_value<'this>(&'this self) -> bool {
            self.double_value_opt().is_some()
        }

        fn double_value_opt<'this>(&'this self) -> ::std::option::Option<f64> {
            ::std::option::Option::None
        }
        fn string_value<'this>(&'this self) -> &'this [u8] {
            self.string_value_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_string_value<'this>(&'this self) -> bool {
            self.string_value_opt().is_some()
        }

        fn string_value_opt<'this>(&'this self) -> ::std::option::Option<&'this [u8]> {
            ::std::option::Option::None
        }
        fn aggregate_value<'this>(&'this self) -> &'this str {
            self.aggregate_value_opt()
                .unwrap_or_else(::std::default::Default::default)
        }
        fn has_aggregate_value<'this>(&'this self) -> bool {
            self.aggregate_value_opt().is_some()
        }

        fn aggregate_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            ::std::option::Option::None
        }
    }

    macro_rules! uninterpreted_option_delegate {
        ($ty:ty) => {
            type NameMessageType<'this> = <$ty>::NameMessageType<'this> where Self: 'this;

            type NameRepeatedType<'this> = <$ty>::NameRepeatedType<'this> where Self: 'this;
            fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
                (**self).name()
            }

            fn identifier_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).identifier_value_opt()
            }

            fn positive_int_value_opt<'this>(&'this self) -> ::std::option::Option<u64> {
                (**self).positive_int_value_opt()
            }

            fn negative_int_value_opt<'this>(&'this self) -> ::std::option::Option<i64> {
                (**self).negative_int_value_opt()
            }

            fn double_value_opt<'this>(&'this self) -> ::std::option::Option<f64> {
                (**self).double_value_opt()
            }

            fn string_value_opt<'this>(&'this self) -> ::std::option::Option<&'this [u8]> {
                (**self).string_value_opt()
            }

            fn aggregate_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                (**self).aggregate_value_opt()
            }
        };
    }

    impl<T> UninterpretedOptionTrait for &'_ T
    where
        T: UninterpretedOptionTrait,
    {
        uninterpreted_option_delegate!(T);
    }

    impl<T> UninterpretedOptionTrait for &'_ mut T
    where
        T: UninterpretedOptionTrait,
    {
        uninterpreted_option_delegate!(T);
    }

    impl<T> UninterpretedOptionTrait for ::std::boxed::Box<T>
    where
        T: UninterpretedOptionTrait,
    {
        uninterpreted_option_delegate!(T);
    }

    impl<'bump, T> UninterpretedOptionTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: UninterpretedOptionTrait,
    {
        uninterpreted_option_delegate!(T);
    }

    impl<T> UninterpretedOptionTrait for ::puroro::BumpaloOwned<T>
    where
        T: UninterpretedOptionTrait,
    {
        uninterpreted_option_delegate!(T);
    }
    impl UninterpretedOptionTrait for () {
        type NameMessageType<'this> = () where Self: 'this;
        type NameRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::NameMessageType<'this>>
            where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> UninterpretedOptionTrait for (T, U)
    where
        T: UninterpretedOptionTrait,
        U: UninterpretedOptionTrait,
    {
        type NameMessageType<'this> = ::puroro::Either<
            <T as UninterpretedOptionTrait>::NameMessageType<'this>,
            <U as UninterpretedOptionTrait>::NameMessageType<'this>,
        > where Self: 'this;
        type NameRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as UninterpretedOptionTrait>::NameRepeatedType<'this>,
                <U as UninterpretedOptionTrait>::NameRepeatedType<'this>,
            > where Self: 'this;

        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as UninterpretedOptionTrait>::name(&self.0),
                <U as UninterpretedOptionTrait>::name(&self.1),
            )
        }

        fn identifier_value_opt<'this>(&'this self) -> Option<&'this str> {
            <U as UninterpretedOptionTrait>::identifier_value_opt(&self.1)
                .or_else(|| <T as UninterpretedOptionTrait>::identifier_value_opt(&self.0))
        }

        fn positive_int_value_opt<'this>(&'this self) -> Option<u64> {
            <U as UninterpretedOptionTrait>::positive_int_value_opt(&self.1)
                .or_else(|| <T as UninterpretedOptionTrait>::positive_int_value_opt(&self.0))
        }

        fn negative_int_value_opt<'this>(&'this self) -> Option<i64> {
            <U as UninterpretedOptionTrait>::negative_int_value_opt(&self.1)
                .or_else(|| <T as UninterpretedOptionTrait>::negative_int_value_opt(&self.0))
        }

        fn double_value_opt<'this>(&'this self) -> Option<f64> {
            <U as UninterpretedOptionTrait>::double_value_opt(&self.1)
                .or_else(|| <T as UninterpretedOptionTrait>::double_value_opt(&self.0))
        }

        fn string_value_opt<'this>(&'this self) -> Option<&'this [u8]> {
            <U as UninterpretedOptionTrait>::string_value_opt(&self.1)
                .or_else(|| <T as UninterpretedOptionTrait>::string_value_opt(&self.0))
        }

        fn aggregate_value_opt<'this>(&'this self) -> Option<&'this str> {
            <U as UninterpretedOptionTrait>::aggregate_value_opt(&self.1)
                .or_else(|| <T as UninterpretedOptionTrait>::aggregate_value_opt(&self.0))
        }
    }
    impl<T, U> UninterpretedOptionTrait for ::puroro::Either<T, U>
    where
        T: UninterpretedOptionTrait,
        U: UninterpretedOptionTrait,
    {
        type NameMessageType<'this> = ::puroro::Either<
            <T as UninterpretedOptionTrait>::NameMessageType<'this>,
            <U as UninterpretedOptionTrait>::NameMessageType<'this>,
        > where Self: 'this;
        type NameRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as UninterpretedOptionTrait>::NameRepeatedType<'this>,
                <U as UninterpretedOptionTrait>::NameRepeatedType<'this>,
            > where Self: 'this;

        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as UninterpretedOptionTrait>::name(t))
                    .map_right(|u| <U as UninterpretedOptionTrait>::name(u)),
            )
        }
        fn identifier_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as UninterpretedOptionTrait>::identifier_value_opt(t),
                |u| <U as UninterpretedOptionTrait>::identifier_value_opt(u),
            )
        }
        fn positive_int_value_opt<'this>(&'this self) -> ::std::option::Option<u64> {
            self.as_ref().either(
                |t| <T as UninterpretedOptionTrait>::positive_int_value_opt(t),
                |u| <U as UninterpretedOptionTrait>::positive_int_value_opt(u),
            )
        }
        fn negative_int_value_opt<'this>(&'this self) -> ::std::option::Option<i64> {
            self.as_ref().either(
                |t| <T as UninterpretedOptionTrait>::negative_int_value_opt(t),
                |u| <U as UninterpretedOptionTrait>::negative_int_value_opt(u),
            )
        }
        fn double_value_opt<'this>(&'this self) -> ::std::option::Option<f64> {
            self.as_ref().either(
                |t| <T as UninterpretedOptionTrait>::double_value_opt(t),
                |u| <U as UninterpretedOptionTrait>::double_value_opt(u),
            )
        }
        fn string_value_opt<'this>(&'this self) -> ::std::option::Option<&'this [u8]> {
            self.as_ref().either(
                |t| <T as UninterpretedOptionTrait>::string_value_opt(t),
                |u| <U as UninterpretedOptionTrait>::string_value_opt(u),
            )
        }
        fn aggregate_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().either(
                |t| <T as UninterpretedOptionTrait>::aggregate_value_opt(t),
                |u| <U as UninterpretedOptionTrait>::aggregate_value_opt(u),
            )
        }
    }
    impl<T> UninterpretedOptionTrait for ::std::option::Option<T>
    where
        T: UninterpretedOptionTrait,
    {
        type NameMessageType<'this> = T::NameMessageType<'this> where Self: 'this;

        type NameRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::NameRepeatedType<'this>
            > where Self: 'this;
        fn name<'this>(&'this self) -> Self::NameRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.name()),
            )
        }
        fn identifier_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.identifier_value_opt())
        }
        fn positive_int_value_opt<'this>(&'this self) -> ::std::option::Option<u64> {
            self.as_ref().and_then(|msg| msg.positive_int_value_opt())
        }
        fn negative_int_value_opt<'this>(&'this self) -> ::std::option::Option<i64> {
            self.as_ref().and_then(|msg| msg.negative_int_value_opt())
        }
        fn double_value_opt<'this>(&'this self) -> ::std::option::Option<f64> {
            self.as_ref().and_then(|msg| msg.double_value_opt())
        }
        fn string_value_opt<'this>(&'this self) -> ::std::option::Option<&'this [u8]> {
            self.as_ref().and_then(|msg| msg.string_value_opt())
        }
        fn aggregate_value_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
            self.as_ref().and_then(|msg| msg.aggregate_value_opt())
        }
    }

    pub trait SourceCodeInfoTrait {
        type LocationMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_nested::source_code_info::_puroro_traits::LocationTrait
            where Self: 'this;

        type LocationRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::LocationMessageType<'this>>
        where
            Self: 'this;
        fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this>;
    }

    macro_rules! source_code_info_delegate {
        ($ty:ty) => {
            type LocationMessageType<'this> = <$ty>::LocationMessageType<'this> where Self: 'this;

            type LocationRepeatedType<'this> = <$ty>::LocationRepeatedType<'this> where Self: 'this;
            fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
                (**self).location()
            }
        };
    }

    impl<T> SourceCodeInfoTrait for &'_ T
    where
        T: SourceCodeInfoTrait,
    {
        source_code_info_delegate!(T);
    }

    impl<T> SourceCodeInfoTrait for &'_ mut T
    where
        T: SourceCodeInfoTrait,
    {
        source_code_info_delegate!(T);
    }

    impl<T> SourceCodeInfoTrait for ::std::boxed::Box<T>
    where
        T: SourceCodeInfoTrait,
    {
        source_code_info_delegate!(T);
    }

    impl<'bump, T> SourceCodeInfoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: SourceCodeInfoTrait,
    {
        source_code_info_delegate!(T);
    }

    impl<T> SourceCodeInfoTrait for ::puroro::BumpaloOwned<T>
    where
        T: SourceCodeInfoTrait,
    {
        source_code_info_delegate!(T);
    }
    impl SourceCodeInfoTrait for () {
        type LocationMessageType<'this> = () where Self: 'this;
        type LocationRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::LocationMessageType<'this>>
            where Self: 'this;
        fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> SourceCodeInfoTrait for (T, U)
    where
        T: SourceCodeInfoTrait,
        U: SourceCodeInfoTrait,
    {
        type LocationMessageType<'this> = ::puroro::Either<
            <T as SourceCodeInfoTrait>::LocationMessageType<'this>,
            <U as SourceCodeInfoTrait>::LocationMessageType<'this>,
        > where Self: 'this;
        type LocationRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as SourceCodeInfoTrait>::LocationRepeatedType<'this>,
                <U as SourceCodeInfoTrait>::LocationRepeatedType<'this>,
            > where Self: 'this;

        fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as SourceCodeInfoTrait>::location(&self.0),
                <U as SourceCodeInfoTrait>::location(&self.1),
            )
        }
    }
    impl<T, U> SourceCodeInfoTrait for ::puroro::Either<T, U>
    where
        T: SourceCodeInfoTrait,
        U: SourceCodeInfoTrait,
    {
        type LocationMessageType<'this> = ::puroro::Either<
            <T as SourceCodeInfoTrait>::LocationMessageType<'this>,
            <U as SourceCodeInfoTrait>::LocationMessageType<'this>,
        > where Self: 'this;
        type LocationRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as SourceCodeInfoTrait>::LocationRepeatedType<'this>,
                <U as SourceCodeInfoTrait>::LocationRepeatedType<'this>,
            > where Self: 'this;

        fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as SourceCodeInfoTrait>::location(t))
                    .map_right(|u| <U as SourceCodeInfoTrait>::location(u)),
            )
        }
    }
    impl<T> SourceCodeInfoTrait for ::std::option::Option<T>
    where
        T: SourceCodeInfoTrait,
    {
        type LocationMessageType<'this> = T::LocationMessageType<'this> where Self: 'this;

        type LocationRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::LocationRepeatedType<'this>
            > where Self: 'this;
        fn location<'this>(&'this self) -> Self::LocationRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.location()),
            )
        }
    }

    pub trait GeneratedCodeInfoTrait {
        type AnnotationMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_nested::generated_code_info::_puroro_traits::AnnotationTrait
            where Self: 'this;

        type AnnotationRepeatedType<'this>: ::puroro::RepeatedField<'this>
            + ::std::iter::IntoIterator<Item = Self::AnnotationMessageType<'this>>
        where
            Self: 'this;
        fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this>;
    }

    macro_rules! generated_code_info_delegate {
        ($ty:ty) => {
            type AnnotationMessageType<'this> = <$ty>::AnnotationMessageType<'this> where Self: 'this;

            type AnnotationRepeatedType<'this> = <$ty>::AnnotationRepeatedType<'this> where Self: 'this;
            fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
                (**self).annotation()
            }
        };
    }

    impl<T> GeneratedCodeInfoTrait for &'_ T
    where
        T: GeneratedCodeInfoTrait,
    {
        generated_code_info_delegate!(T);
    }

    impl<T> GeneratedCodeInfoTrait for &'_ mut T
    where
        T: GeneratedCodeInfoTrait,
    {
        generated_code_info_delegate!(T);
    }

    impl<T> GeneratedCodeInfoTrait for ::std::boxed::Box<T>
    where
        T: GeneratedCodeInfoTrait,
    {
        generated_code_info_delegate!(T);
    }

    impl<'bump, T> GeneratedCodeInfoTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
    where
        T: GeneratedCodeInfoTrait,
    {
        generated_code_info_delegate!(T);
    }

    impl<T> GeneratedCodeInfoTrait for ::puroro::BumpaloOwned<T>
    where
        T: GeneratedCodeInfoTrait,
    {
        generated_code_info_delegate!(T);
    }
    impl GeneratedCodeInfoTrait for () {
        type AnnotationMessageType<'this> = () where Self: 'this;
        type AnnotationRepeatedType<'this> =
            ::puroro::internal::impls::empty::EmptyRepeatedField<Self::AnnotationMessageType<'this>>
            where Self: 'this;
        fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
            ::puroro::internal::impls::empty::EmptyRepeatedField::new()
        }
    }
    impl<T, U> GeneratedCodeInfoTrait for (T, U)
    where
        T: GeneratedCodeInfoTrait,
        U: GeneratedCodeInfoTrait,
    {
        type AnnotationMessageType<'this> = ::puroro::Either<
            <T as GeneratedCodeInfoTrait>::AnnotationMessageType<'this>,
            <U as GeneratedCodeInfoTrait>::AnnotationMessageType<'this>,
        > where Self: 'this;
        type AnnotationRepeatedType<'this>
            = ::puroro::internal::impls::merged::MergedRepeatedMessageField<
                <T as GeneratedCodeInfoTrait>::AnnotationRepeatedType<'this>,
                <U as GeneratedCodeInfoTrait>::AnnotationRepeatedType<'this>,
            > where Self: 'this;

        fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
            ::puroro::internal::impls::merged::MergedRepeatedMessageField::new(
                <T as GeneratedCodeInfoTrait>::annotation(&self.0),
                <U as GeneratedCodeInfoTrait>::annotation(&self.1),
            )
        }
    }
    impl<T, U> GeneratedCodeInfoTrait for ::puroro::Either<T, U>
    where
        T: GeneratedCodeInfoTrait,
        U: GeneratedCodeInfoTrait,
    {
        type AnnotationMessageType<'this> = ::puroro::Either<
            <T as GeneratedCodeInfoTrait>::AnnotationMessageType<'this>,
            <U as GeneratedCodeInfoTrait>::AnnotationMessageType<'this>,
        > where Self: 'this;
        type AnnotationRepeatedType<'this>
            = ::puroro::internal::impls::either::EitherRepeatedMessageField<
                <T as GeneratedCodeInfoTrait>::AnnotationRepeatedType<'this>,
                <U as GeneratedCodeInfoTrait>::AnnotationRepeatedType<'this>,
            > where Self: 'this;

        fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
            ::puroro::internal::impls::either::EitherRepeatedMessageField::new(
                self.as_ref()
                    .map_left(|t| <T as GeneratedCodeInfoTrait>::annotation(t))
                    .map_right(|u| <U as GeneratedCodeInfoTrait>::annotation(u)),
            )
        }
    }
    impl<T> GeneratedCodeInfoTrait for ::std::option::Option<T>
    where
        T: GeneratedCodeInfoTrait,
    {
        type AnnotationMessageType<'this> = T::AnnotationMessageType<'this> where Self: 'this;

        type AnnotationRepeatedType<'this> =
            ::puroro::internal::impls::option::OptionRepeatedField<
                T::AnnotationRepeatedType<'this>
            > where Self: 'this;
        fn annotation<'this>(&'this self) -> Self::AnnotationRepeatedType<'this> {
            ::puroro::internal::impls::option::OptionRepeatedField::new(
                self.as_ref().map(|msg| msg.annotation()),
            )
        }
    }
}
pub use _puroro_nested::*;
pub mod _puroro_nested {
    pub mod file_descriptor_set {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod file_descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        pub use _puroro_simple_impl::ExtensionRange;
        pub use _puroro_simple_impl::ReservedRange;
        pub mod _puroro_simple_impl {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            pub struct ExtensionRange {
            _bitfield: ::puroro::bitvec::array::BitArray<
                ::puroro::bitvec::order::Lsb0,
                [u32; (2 + 31) / 32],
            >,
            start: ::puroro::internal::Bare<i32>,
            end: ::puroro::internal::Bare<i32>,
            options: ::std::option::Option<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::ExtensionRangeOptions>>,
        }
            impl ::puroro::Message<ExtensionRange> for ExtensionRange {}

            impl ExtensionRange {
                pub fn new() -> Self {
                    Self {
                        _bitfield: ::std::default::Default::default(),
                        start: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                        options: ::std::default::Default::default(),
                    }
                }
                pub fn start_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.start.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_start(&self) -> bool {
                    Self::start_opt(self).is_some()
                }

                pub fn start(&self) -> i32 {
                    self.start_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn end_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_end(&self) -> bool {
                    Self::end_opt(self).is_some()
                }

                pub fn end(&self) -> i32 {
                    self.end_opt().unwrap_or(::std::default::Default::default())
                }
                pub fn options_opt(&self) -> ::std::option::Option<&'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::ExtensionRangeOptions>{
                    self.options.as_deref()
                }

                pub fn has_options(&self) -> bool {
                    Self::options_opt(self).is_some()
                }
        
                pub fn options(&self) -> ::std::option::Option<&'_ self::_puroro_root::google::protobuf::_puroro_simple_impl::ExtensionRangeOptions>{
                    self.options_opt()
                }
                pub fn clear_start(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn start_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_start() {
                        self.start = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.start
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn end_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.end
                }
                pub fn clear_options(&mut self) {
                    self.options = ::std::default::Default::default();
                }
                pub fn options_mut(&mut self) -> &'_ mut self::_puroro_root::google::protobuf::_puroro_simple_impl::ExtensionRangeOptions{
                    if !self.has_options() {
                        self.options = ::std::default::Default::default();
                    }
                    self.options
                        .get_or_insert_with(::std::default::Default::default)
                }
            }

            impl super::_puroro_traits::ExtensionRangeTrait for ExtensionRange {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <self::ExtensionRange>::start_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <self::ExtensionRange>::end_opt(self)
                }
                type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_simple_impl::ExtensionRangeOptions where Self: 'this;
                fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
                    <self::ExtensionRange>::options_opt(self)
                }
            }

            impl ::puroro::MessageRepresentativeImpl for ExtensionRange {}

            impl ::puroro::internal::de::DeserMessageFromBytesIter for ExtensionRange {
                fn deser_field<I>(
                    &mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
                    match field_number {
                    1 => {
                        self._bitfield.set(0, true);
                        DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.start, data)
                    }
                    2 => {
                        self._bitfield.set(1, true);
                        DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data)
                    }
                    3 => {
                        DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Message<::std::boxed::Box<self::_puroro_root::google::protobuf::_puroro_simple_impl::ExtensionRangeOptions>>
                        >::deser_field(&mut self.options, data)
                    }
        
                    _ => unimplemented!("TODO: This case should be handled properly..."),
                }
                }
            }

            impl ::puroro::internal::se::SerMessageToIoWrite for ExtensionRange
            where
                Self: super::_puroro_traits::ExtensionRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ExtensionRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ExtensionRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::ExtensionRangeTrait>::OptionsMessageType<'_>>
                >::ser_field(
                    <Self as super::_puroro_traits::ExtensionRangeTrait>::options_opt(self),
                    3,
                    out,
                    false,
                )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl ::std::default::Default for ExtensionRange {
                fn default() -> Self {
                    Self::new()
                }
            }

            impl ::std::fmt::Debug for ExtensionRange
            where
                Self: super::_puroro_traits::ExtensionRangeTrait,
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.debug_struct("ExtensionRange")
                        .field("start", &self.start_opt())
                        .field("end", &self.end_opt())
                        .field("options", &self.options())
                        .finish()
                }
            }

            impl ::std::clone::Clone for ExtensionRange {
                fn clone(&self) -> Self {
                    Self {
                        _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                        start: ::std::clone::Clone::clone(&self.start),
                        end: ::std::clone::Clone::clone(&self.end),
                        options: ::std::clone::Clone::clone(&self.options),
                    }
                }
            }

            impl ::std::cmp::PartialEq for ExtensionRange {
                fn eq(&self, rhs: &Self) -> bool {
                    self._bitfield == rhs._bitfield
                        && (self._bitfield.get(0).as_deref() != Some(&true)
                            || self.start == rhs.start)
                        && (self._bitfield.get(1).as_deref() != Some(&true) || self.end == rhs.end)
                        && self.options == rhs.options
                        && true
                }
            }
            pub struct ReservedRange {
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                start: ::puroro::internal::Bare<i32>,
                end: ::puroro::internal::Bare<i32>,
            }
            impl ::puroro::Message<ReservedRange> for ReservedRange {}

            impl ReservedRange {
                pub fn new() -> Self {
                    Self {
                        _bitfield: ::std::default::Default::default(),
                        start: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                    }
                }
                pub fn start_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.start.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_start(&self) -> bool {
                    Self::start_opt(self).is_some()
                }

                pub fn start(&self) -> i32 {
                    self.start_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn end_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_end(&self) -> bool {
                    Self::end_opt(self).is_some()
                }

                pub fn end(&self) -> i32 {
                    self.end_opt().unwrap_or(::std::default::Default::default())
                }
                pub fn clear_start(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn start_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_start() {
                        self.start = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.start
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn end_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.end
                }
            }

            impl super::_puroro_traits::ReservedRangeTrait for ReservedRange {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <self::ReservedRange>::start_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <self::ReservedRange>::end_opt(self)
                }
            }

            impl ::puroro::MessageRepresentativeImpl for ReservedRange {}

            impl ::puroro::internal::de::DeserMessageFromBytesIter for ReservedRange {
                fn deser_field<I>(
                    &mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.start, data)
                        }
                        2 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl ::puroro::internal::se::SerMessageToIoWrite for ReservedRange
            where
                Self: super::_puroro_traits::ReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ReservedRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ReservedRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl ::std::default::Default for ReservedRange {
                fn default() -> Self {
                    Self::new()
                }
            }

            impl ::std::fmt::Debug for ReservedRange
            where
                Self: super::_puroro_traits::ReservedRangeTrait,
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.debug_struct("ReservedRange")
                        .field("start", &self.start_opt())
                        .field("end", &self.end_opt())
                        .finish()
                }
            }

            impl ::std::clone::Clone for ReservedRange {
                fn clone(&self) -> Self {
                    Self {
                        _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                        start: ::std::clone::Clone::clone(&self.start),
                        end: ::std::clone::Clone::clone(&self.end),
                    }
                }
            }

            impl ::std::cmp::PartialEq for ReservedRange {
                fn eq(&self, rhs: &Self) -> bool {
                    self._bitfield == rhs._bitfield
                        && (self._bitfield.get(0).as_deref() != Some(&true)
                            || self.start == rhs.start)
                        && (self._bitfield.get(1).as_deref() != Some(&true) || self.end == rhs.end)
                        && true
                }
            }
        }

        pub use _puroro_impls::*;
        pub mod _puroro_impls {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            use super::_puroro_traits::*;

            pub struct ExtensionRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub start: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::ExtensionRange> for ExtensionRangeSingleField1<ScalarType> where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone
            {
            }

            impl<ScalarType> super::_puroro_traits::ExtensionRangeTrait
                for ExtensionRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.start),
                    ))
                }
                type OptionsMessageType<'this> = () where Self: 'this;
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
                for ExtensionRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::ExtensionRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ExtensionRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for ExtensionRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { start: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for ExtensionRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        start: ::std::clone::Clone::clone(&self.start),
                    }
                }
            }

            pub struct ExtensionRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub end: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::ExtensionRange> for ExtensionRangeSingleField2<ScalarType> where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone
            {
            }

            impl<ScalarType> super::_puroro_traits::ExtensionRangeTrait
                for ExtensionRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.end),
                    ))
                }
                type OptionsMessageType<'this> = () where Self: 'this;
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
                for ExtensionRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::ExtensionRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ExtensionRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for ExtensionRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { end: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for ExtensionRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        end: ::std::clone::Clone::clone(&self.end),
                    }
                }
            }

            pub struct ExtensionRangeSingleField3<ScalarType>
        where
        
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait,
        {
            pub options: ScalarType,
        }

            impl<ScalarType> ::puroro::Message<super::ExtensionRange>
        for ExtensionRangeSingleField3<ScalarType>
        where
        
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait,
        {}

            impl<ScalarType> super::_puroro_traits::ExtensionRangeTrait
        for ExtensionRangeSingleField3<ScalarType>
        where
        
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait,
        {
        type OptionsMessageType<'this> = &'this ScalarType where Self: 'this;
        
        fn options_opt<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
            ::std::option::Option::Some(&self.options)
        }
        }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
        for ExtensionRangeSingleField3<ScalarType>
        where
        
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait,
            Self: super::_puroro_traits::ExtensionRangeTrait,
            for<'a> <Self as super::_puroro_traits::ExtensionRangeTrait>::OptionsMessageType<'a> :
                ::puroro::internal::se::SerMessageToIoWrite,
        {
            fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
            where
                W: ::std::io::Write,
            {
                ::puroro::internal::se::SerFieldToIoWrite::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::ExtensionRangeTrait>::OptionsMessageType<'_>>
                >::ser_field(
                    <Self as super::_puroro_traits::ExtensionRangeTrait>::options_opt(self),
                    3,
                    out,
                    false,
                )?;
                ::std::result::Result::Ok(())
            }
        }

            impl<ScalarType> ::std::convert::From<ScalarType>
        for ExtensionRangeSingleField3<ScalarType>
        where
        
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait,
        {
            fn from(value: ScalarType) -> Self {
                Self {
                    options: value,
                }
            }
        }

            impl<ScalarType> ::std::clone::Clone
        for ExtensionRangeSingleField3<ScalarType>
        where
        
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait,
            ScalarType: ::std::clone::Clone,
        {
            fn clone(&self) -> Self {
                Self {
                    options: ::std::clone::Clone::clone(&self.options),
                }
            }
        }
            pub struct ExtensionRangeBumpalo<'bump> {
            _bump: &'bump ::puroro::bumpalo::Bump,
            _bitfield: ::puroro::bitvec::array::BitArray<
                ::puroro::bitvec::order::Lsb0,
                [u32; (2 + 31) / 32],
            >,
            start: ::puroro::internal::Bare<i32>,
            end: ::puroro::internal::Bare<i32>,
            options: ::std::option::Option<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::ExtensionRangeOptionsBumpalo<'bump>>>,
        }

            pub type ExtensionRangeBumpaloOwned =
                ::puroro::BumpaloOwned<ExtensionRangeBumpalo<'static>>;
            impl<'bump> ExtensionRangeBumpalo<'bump> {
                pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    #[allow(unused)]
                    let bump_ref: &::puroro::bumpalo::Bump =
                        unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

                    Self {
                        _bump: bump,
                        _bitfield: ::std::default::Default::default(),
                        start: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                        options: ::std::default::Default::default(),
                    }
                }
                pub fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.start.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn start<'this>(&'this self) -> i32 {
                    match self.start_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_start(&self) -> bool {
                    self.start_opt().is_some()
                }
                pub fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn end<'this>(&'this self) -> i32 {
                    match self.end_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_end(&self) -> bool {
                    self.end_opt().is_some()
                }
                pub fn options_opt<'this>(&'this self) -> ::std::option::Option<&'this self::_puroro_root::google::protobuf::_puroro_impls::ExtensionRangeOptionsBumpalo<'this>>{
                    self.options
                        .as_ref()
                        .map(|x| unsafe { ::std::mem::transmute(::std::ops::Deref::deref(x)) })
                }
                pub fn options<'this>(&'this self) -> ::std::option::Option<&'this self::_puroro_root::google::protobuf::_puroro_impls::ExtensionRangeOptionsBumpalo<'this>>{
                    self.options_opt()
                }

                pub fn has_options(&self) -> bool {
                    self.options_opt().is_some()
                }
                pub fn clear_start(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn start_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_start() {
                        self.start = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.start
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn end_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.end
                }
                pub fn clear_options(&mut self) {
                    self.options = ::std::default::Default::default();
                }
                pub fn options_mut<'this>(&'this mut self) -> &'this mut self::_puroro_root::google::protobuf::_puroro_impls::ExtensionRangeOptionsBumpalo<'bump>{
                    if !self.has_options() {
                        self.options = ::std::default::Default::default();
                    }
                    let bump = self._bump;
                    self.options.get_or_insert_with(|| {
                        ::puroro::internal::NoAllocBumpBox::new_in(
                            ::puroro::internal::BumpDefault::default_in(bump),
                            bump,
                        )
                    })
                }
            }
            impl<'bump> ::puroro::Message<super::_puroro_simple_impl::ExtensionRange>
                for ExtensionRangeBumpalo<'bump>
            {
            }

            impl<'bump> ::puroro::BumpaloMessage<'bump> for ExtensionRangeBumpalo<'bump> {
                fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> ::puroro::internal::BumpDefault<'bump> for ExtensionRangeBumpalo<'bump> {
                fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> super::_puroro_traits::ExtensionRangeTrait for ExtensionRangeBumpalo<'bump> {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::start_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::end_opt(self)
                }
                type OptionsMessageType<'this> = &'this self::_puroro_root::google::protobuf::_puroro_impls::ExtensionRangeOptionsBumpalo<'this> where Self: 'this;
                fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
                    <Self>::options_opt(self)
                }
            }

            impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for ExtensionRangeBumpalo<'bump> {
                fn deser_field<'this, I>(
                    &'this mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
                    match field_number {
                    1 => {
                        self._bitfield.set(0, true);
                        DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.start, data, self._bump)
                    }
                    2 => {
                        self._bitfield.set(1, true);
                        DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data, self._bump)
                    }
                    3 => {
                        DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Message<::puroro::internal::NoAllocBumpBox<self::_puroro_root::google::protobuf::_puroro_impls::ExtensionRangeOptionsBumpalo<'bump>>>
                        >::deser_field(&mut self.options, data, self._bump)
                    }
        
                    _ => unimplemented!("TODO: This case should be handled properly..."),
                }
                }
            }

            impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for ExtensionRangeBumpalo<'bump>
            where
                Self: super::_puroro_traits::ExtensionRangeTrait,
                for<'a> <Self as super::_puroro_traits::ExtensionRangeTrait>::OptionsMessageType<'a>:
                    ::puroro::internal::se::SerMessageToIoWrite,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ExtensionRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ExtensionRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                    ::puroro::tags::Optional, ::puroro::tags::Message<<Self as super::_puroro_traits::ExtensionRangeTrait>::OptionsMessageType<'_>>
                >::ser_field(
                    <Self as super::_puroro_traits::ExtensionRangeTrait>::options_opt(self),
                    3,
                    out,
                    false,
                )?;
                    ::std::result::Result::Ok(())
                }
            }
            pub struct ExtensionRangeBuilder<T>(T);

            impl<T> ExtensionRangeBuilder<T>
            where
                T: ExtensionRangeTrait,
            {
                pub fn append_start<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> ExtensionRangeBuilder<(T, ExtensionRangeSingleField1<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    ExtensionRangeBuilder((self.0, ExtensionRangeSingleField1 { start: value }))
                }

                pub fn append_end<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> ExtensionRangeBuilder<(T, ExtensionRangeSingleField2<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    ExtensionRangeBuilder((self.0, ExtensionRangeSingleField2 { end: value }))
                }
        
            pub fn append_options<ScalarType>(self, value: ScalarType)
                -> ExtensionRangeBuilder<(T, ExtensionRangeSingleField3<ScalarType>)>
        where
        
        ScalarType:
            self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait,
            {
                    ExtensionRangeBuilder((self.0, ExtensionRangeSingleField3 { options: value }))
                }

                pub fn build(self) -> T {
                    self.0
                }
            }

            impl ExtensionRangeBuilder<()> {
                pub fn new() -> Self {
                    Self(())
                }
            }

            pub struct ReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub start: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::ReservedRange> for ReservedRangeSingleField1<ScalarType> where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone
            {
            }

            impl<ScalarType> super::_puroro_traits::ReservedRangeTrait for ReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.start),
                    ))
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
                for ReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::ReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ReservedRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for ReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { start: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for ReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        start: ::std::clone::Clone::clone(&self.start),
                    }
                }
            }

            pub struct ReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub end: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::ReservedRange> for ReservedRangeSingleField2<ScalarType> where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone
            {
            }

            impl<ScalarType> super::_puroro_traits::ReservedRangeTrait for ReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.end),
                    ))
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
                for ReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::ReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ReservedRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for ReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { end: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for ReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        end: ::std::clone::Clone::clone(&self.end),
                    }
                }
            }
            pub struct ReservedRangeBumpalo<'bump> {
                _bump: &'bump ::puroro::bumpalo::Bump,
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                start: ::puroro::internal::Bare<i32>,
                end: ::puroro::internal::Bare<i32>,
            }

            pub type ReservedRangeBumpaloOwned =
                ::puroro::BumpaloOwned<ReservedRangeBumpalo<'static>>;
            impl<'bump> ReservedRangeBumpalo<'bump> {
                pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    #[allow(unused)]
                    let bump_ref: &::puroro::bumpalo::Bump =
                        unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

                    Self {
                        _bump: bump,
                        _bitfield: ::std::default::Default::default(),
                        start: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                    }
                }
                pub fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.start.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn start<'this>(&'this self) -> i32 {
                    match self.start_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_start(&self) -> bool {
                    self.start_opt().is_some()
                }
                pub fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn end<'this>(&'this self) -> i32 {
                    match self.end_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_end(&self) -> bool {
                    self.end_opt().is_some()
                }
                pub fn clear_start(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn start_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_start() {
                        self.start = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.start
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn end_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.end
                }
            }
            impl<'bump> ::puroro::Message<super::_puroro_simple_impl::ReservedRange>
                for ReservedRangeBumpalo<'bump>
            {
            }

            impl<'bump> ::puroro::BumpaloMessage<'bump> for ReservedRangeBumpalo<'bump> {
                fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> ::puroro::internal::BumpDefault<'bump> for ReservedRangeBumpalo<'bump> {
                fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> super::_puroro_traits::ReservedRangeTrait for ReservedRangeBumpalo<'bump> {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::start_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::end_opt(self)
                }
            }

            impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for ReservedRangeBumpalo<'bump> {
                fn deser_field<'this, I>(
                    &'this mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.start, data, self._bump)
                        }
                        2 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data, self._bump)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for ReservedRangeBumpalo<'bump>
            where
                Self: super::_puroro_traits::ReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ReservedRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::ReservedRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }
            pub struct ReservedRangeBuilder<T>(T);

            impl<T> ReservedRangeBuilder<T>
            where
                T: ReservedRangeTrait,
            {
                pub fn append_start<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> ReservedRangeBuilder<(T, ReservedRangeSingleField1<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    ReservedRangeBuilder((self.0, ReservedRangeSingleField1 { start: value }))
                }

                pub fn append_end<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> ReservedRangeBuilder<(T, ReservedRangeSingleField2<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    ReservedRangeBuilder((self.0, ReservedRangeSingleField2 { end: value }))
                }

                pub fn build(self) -> T {
                    self.0
                }
            }

            impl ReservedRangeBuilder<()> {
                pub fn new() -> Self {
                    Self(())
                }
            }
        }
        pub use _puroro_traits::*;
        pub mod _puroro_traits {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }

            pub trait ExtensionRangeTrait {
                fn start<'this>(&'this self) -> i32 {
                    self.start_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_start<'this>(&'this self) -> bool {
                    self.start_opt().is_some()
                }

                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
                fn end<'this>(&'this self) -> i32 {
                    self.end_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_end<'this>(&'this self) -> bool {
                    self.end_opt().is_some()
                }

                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
                type OptionsMessageType<'this>: self::_puroro_root::google::protobuf::_puroro_traits::ExtensionRangeOptionsTrait
                    where Self: 'this;
                fn options<'this>(
                    &'this self,
                ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                    self.options_opt()
                }
                fn has_options<'this>(&'this self) -> bool {
                    self.options_opt().is_some()
                }

                fn options_opt<'this>(
                    &'this self,
                ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                    ::std::option::Option::None
                }
            }

            macro_rules! extension_range_delegate {
                ($ty:ty) => {

                    fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).start_opt()
                    }

                    fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).end_opt()
                    }
                    type OptionsMessageType<'this> = <$ty>::OptionsMessageType<'this> where Self: 'this;

                    fn options_opt<'this>(&'this self) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                        (**self).options_opt()
                    }
                };
            }

            impl<T> ExtensionRangeTrait for &'_ T
            where
                T: ExtensionRangeTrait,
            {
                extension_range_delegate!(T);
            }

            impl<T> ExtensionRangeTrait for &'_ mut T
            where
                T: ExtensionRangeTrait,
            {
                extension_range_delegate!(T);
            }

            impl<T> ExtensionRangeTrait for ::std::boxed::Box<T>
            where
                T: ExtensionRangeTrait,
            {
                extension_range_delegate!(T);
            }

            impl<'bump, T> ExtensionRangeTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
            where
                T: ExtensionRangeTrait,
            {
                extension_range_delegate!(T);
            }

            impl<T> ExtensionRangeTrait for ::puroro::BumpaloOwned<T>
            where
                T: ExtensionRangeTrait,
            {
                extension_range_delegate!(T);
            }
            impl ExtensionRangeTrait for () {
                type OptionsMessageType<'this> = () where Self: 'this;
            }
            impl<T, U> ExtensionRangeTrait for (T, U)
            where
                T: ExtensionRangeTrait,
                U: ExtensionRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <U as ExtensionRangeTrait>::start_opt(&self.1)
                        .or_else(|| <T as ExtensionRangeTrait>::start_opt(&self.0))
                }

                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <U as ExtensionRangeTrait>::end_opt(&self.1)
                        .or_else(|| <T as ExtensionRangeTrait>::end_opt(&self.0))
                }
                type OptionsMessageType<'this> = (
                    ::std::option::Option<<T as ExtensionRangeTrait>::OptionsMessageType<'this>>,
                    ::std::option::Option<<U as ExtensionRangeTrait>::OptionsMessageType<'this>>,
                ) where Self: 'this;

                fn options_opt<'this>(&'this self) -> Option<Self::OptionsMessageType<'this>> {
                    match (
                        <T as ExtensionRangeTrait>::options_opt(&self.0),
                        <U as ExtensionRangeTrait>::options_opt(&self.1),
                    ) {
                        (None, None) => None,
                        (Some(t), None) => Some((Some(t), None)),
                        (None, Some(u)) => Some((None, Some(u))),
                        (Some(t), Some(u)) => Some((Some(t), Some(u))),
                    }
                }
            }
            impl<T, U> ExtensionRangeTrait for ::puroro::Either<T, U>
            where
                T: ExtensionRangeTrait,
                U: ExtensionRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as ExtensionRangeTrait>::start_opt(t),
                        |u| <U as ExtensionRangeTrait>::start_opt(u),
                    )
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as ExtensionRangeTrait>::end_opt(t),
                        |u| <U as ExtensionRangeTrait>::end_opt(u),
                    )
                }
                type OptionsMessageType<'this> = ::puroro::Either<
                    <T as ExtensionRangeTrait>::OptionsMessageType<'this>,
                    <U as ExtensionRangeTrait>::OptionsMessageType<'this>,
                > where Self: 'this;
                fn options_opt<'this>(
                    &'this self,
                ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                    self.as_ref().either(
                        |t| {
                            <T as ExtensionRangeTrait>::options_opt(t)
                                .map(|t| ::puroro::Either::Left(t))
                        },
                        |u| {
                            <U as ExtensionRangeTrait>::options_opt(u)
                                .map(|u| ::puroro::Either::Right(u))
                        },
                    )
                }
            }
            impl<T> ExtensionRangeTrait for ::std::option::Option<T>
            where
                T: ExtensionRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.start_opt())
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.end_opt())
                }
                type OptionsMessageType<'this> = T::OptionsMessageType<'this> where Self: 'this;
                fn options_opt<'this>(
                    &'this self,
                ) -> ::std::option::Option<Self::OptionsMessageType<'this>> {
                    self.as_ref().and_then(|msg| msg.options_opt())
                }
            }

            pub trait ReservedRangeTrait {
                fn start<'this>(&'this self) -> i32 {
                    self.start_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_start<'this>(&'this self) -> bool {
                    self.start_opt().is_some()
                }

                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
                fn end<'this>(&'this self) -> i32 {
                    self.end_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_end<'this>(&'this self) -> bool {
                    self.end_opt().is_some()
                }

                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
            }

            macro_rules! reserved_range_delegate {
                ($ty:ty) => {
                    fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).start_opt()
                    }

                    fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).end_opt()
                    }
                };
            }

            impl<T> ReservedRangeTrait for &'_ T
            where
                T: ReservedRangeTrait,
            {
                reserved_range_delegate!(T);
            }

            impl<T> ReservedRangeTrait for &'_ mut T
            where
                T: ReservedRangeTrait,
            {
                reserved_range_delegate!(T);
            }

            impl<T> ReservedRangeTrait for ::std::boxed::Box<T>
            where
                T: ReservedRangeTrait,
            {
                reserved_range_delegate!(T);
            }

            impl<'bump, T> ReservedRangeTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
            where
                T: ReservedRangeTrait,
            {
                reserved_range_delegate!(T);
            }

            impl<T> ReservedRangeTrait for ::puroro::BumpaloOwned<T>
            where
                T: ReservedRangeTrait,
            {
                reserved_range_delegate!(T);
            }
            impl ReservedRangeTrait for () {}
            impl<T, U> ReservedRangeTrait for (T, U)
            where
                T: ReservedRangeTrait,
                U: ReservedRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <U as ReservedRangeTrait>::start_opt(&self.1)
                        .or_else(|| <T as ReservedRangeTrait>::start_opt(&self.0))
                }

                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <U as ReservedRangeTrait>::end_opt(&self.1)
                        .or_else(|| <T as ReservedRangeTrait>::end_opt(&self.0))
                }
            }
            impl<T, U> ReservedRangeTrait for ::puroro::Either<T, U>
            where
                T: ReservedRangeTrait,
                U: ReservedRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as ReservedRangeTrait>::start_opt(t),
                        |u| <U as ReservedRangeTrait>::start_opt(u),
                    )
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as ReservedRangeTrait>::end_opt(t),
                        |u| <U as ReservedRangeTrait>::end_opt(u),
                    )
                }
            }
            impl<T> ReservedRangeTrait for ::std::option::Option<T>
            where
                T: ReservedRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.start_opt())
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.end_opt())
                }
            }
        }
        pub use _puroro_nested::*;
        pub mod _puroro_nested {
            pub mod extension_range {
                mod _puroro_root {
                    pub use super::super::super::_puroro_root::*;
                }
            }
            pub mod reserved_range {
                mod _puroro_root {
                    pub use super::super::super::_puroro_root::*;
                }
            }
        }
    }
    pub mod extension_range_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod field_descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        #[derive(
            ::std::fmt::Debug, ::std::clone::Clone, ::std::marker::Copy, ::std::cmp::PartialEq,
        )]
        pub enum Type {
            TypeDouble,
            TypeFloat,
            TypeInt64,
            TypeUint64,
            TypeInt32,
            TypeFixed64,
            TypeFixed32,
            TypeBool,
            TypeString,
            TypeGroup,
            TypeMessage,
            TypeBytes,
            TypeUint32,
            TypeEnum,
            TypeSfixed32,
            TypeSfixed64,
            TypeSint32,
            TypeSint64,
        }

        impl ::puroro::Enum2 for Type {}
        impl ::std::convert::TryFrom<i32> for Type {
            type Error = i32;
            fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
                ::std::result::Result::Ok(match value {
                    1 => Type::TypeDouble,
                    2 => Type::TypeFloat,
                    3 => Type::TypeInt64,
                    4 => Type::TypeUint64,
                    5 => Type::TypeInt32,
                    6 => Type::TypeFixed64,
                    7 => Type::TypeFixed32,
                    8 => Type::TypeBool,
                    9 => Type::TypeString,
                    10 => Type::TypeGroup,
                    11 => Type::TypeMessage,
                    12 => Type::TypeBytes,
                    13 => Type::TypeUint32,
                    14 => Type::TypeEnum,
                    15 => Type::TypeSfixed32,
                    16 => Type::TypeSfixed64,
                    17 => Type::TypeSint32,
                    18 => Type::TypeSint64,
                    _ => Err(value)?,
                })
            }
        }

        impl ::std::convert::From<Type> for i32 {
            fn from(value: Type) -> i32 {
                match value {
                    Type::TypeDouble => 1,
                    Type::TypeFloat => 2,
                    Type::TypeInt64 => 3,
                    Type::TypeUint64 => 4,
                    Type::TypeInt32 => 5,
                    Type::TypeFixed64 => 6,
                    Type::TypeFixed32 => 7,
                    Type::TypeBool => 8,
                    Type::TypeString => 9,
                    Type::TypeGroup => 10,
                    Type::TypeMessage => 11,
                    Type::TypeBytes => 12,
                    Type::TypeUint32 => 13,
                    Type::TypeEnum => 14,
                    Type::TypeSfixed32 => 15,
                    Type::TypeSfixed64 => 16,
                    Type::TypeSint32 => 17,
                    Type::TypeSint64 => 18,
                }
            }
        }

        impl ::std::default::Default for Type {
            fn default() -> Self {
                Type::TypeDouble
            }
        }

        impl<'bump> ::puroro::internal::BumpDefault<'bump> for Type {
            fn default_in(_: &'bump ::puroro::bumpalo::Bump) -> Self {
                ::std::default::Default::default()
            }
        }
        #[derive(
            ::std::fmt::Debug, ::std::clone::Clone, ::std::marker::Copy, ::std::cmp::PartialEq,
        )]
        pub enum Label {
            LabelOptional,
            LabelRequired,
            LabelRepeated,
        }

        impl ::puroro::Enum2 for Label {}
        impl ::std::convert::TryFrom<i32> for Label {
            type Error = i32;
            fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
                ::std::result::Result::Ok(match value {
                    1 => Label::LabelOptional,
                    2 => Label::LabelRequired,
                    3 => Label::LabelRepeated,
                    _ => Err(value)?,
                })
            }
        }

        impl ::std::convert::From<Label> for i32 {
            fn from(value: Label) -> i32 {
                match value {
                    Label::LabelOptional => 1,
                    Label::LabelRequired => 2,
                    Label::LabelRepeated => 3,
                }
            }
        }

        impl ::std::default::Default for Label {
            fn default() -> Self {
                Label::LabelOptional
            }
        }

        impl<'bump> ::puroro::internal::BumpDefault<'bump> for Label {
            fn default_in(_: &'bump ::puroro::bumpalo::Bump) -> Self {
                ::std::default::Default::default()
            }
        }
    }
    pub mod oneof_descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod enum_descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        pub use _puroro_simple_impl::EnumReservedRange;
        pub mod _puroro_simple_impl {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            pub struct EnumReservedRange {
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                start: ::puroro::internal::Bare<i32>,
                end: ::puroro::internal::Bare<i32>,
            }
            impl ::puroro::Message<EnumReservedRange> for EnumReservedRange {}

            impl EnumReservedRange {
                pub fn new() -> Self {
                    Self {
                        _bitfield: ::std::default::Default::default(),
                        start: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                    }
                }
                pub fn start_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.start.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_start(&self) -> bool {
                    Self::start_opt(self).is_some()
                }

                pub fn start(&self) -> i32 {
                    self.start_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn end_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_end(&self) -> bool {
                    Self::end_opt(self).is_some()
                }

                pub fn end(&self) -> i32 {
                    self.end_opt().unwrap_or(::std::default::Default::default())
                }
                pub fn clear_start(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn start_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_start() {
                        self.start = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.start
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn end_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.end
                }
            }

            impl super::_puroro_traits::EnumReservedRangeTrait for EnumReservedRange {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <self::EnumReservedRange>::start_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <self::EnumReservedRange>::end_opt(self)
                }
            }

            impl ::puroro::MessageRepresentativeImpl for EnumReservedRange {}

            impl ::puroro::internal::de::DeserMessageFromBytesIter for EnumReservedRange {
                fn deser_field<I>(
                    &mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.start, data)
                        }
                        2 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl ::puroro::internal::se::SerMessageToIoWrite for EnumReservedRange
            where
                Self: super::_puroro_traits::EnumReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::EnumReservedRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::EnumReservedRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl ::std::default::Default for EnumReservedRange {
                fn default() -> Self {
                    Self::new()
                }
            }

            impl ::std::fmt::Debug for EnumReservedRange
            where
                Self: super::_puroro_traits::EnumReservedRangeTrait,
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.debug_struct("EnumReservedRange")
                        .field("start", &self.start_opt())
                        .field("end", &self.end_opt())
                        .finish()
                }
            }

            impl ::std::clone::Clone for EnumReservedRange {
                fn clone(&self) -> Self {
                    Self {
                        _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                        start: ::std::clone::Clone::clone(&self.start),
                        end: ::std::clone::Clone::clone(&self.end),
                    }
                }
            }

            impl ::std::cmp::PartialEq for EnumReservedRange {
                fn eq(&self, rhs: &Self) -> bool {
                    self._bitfield == rhs._bitfield
                        && (self._bitfield.get(0).as_deref() != Some(&true)
                            || self.start == rhs.start)
                        && (self._bitfield.get(1).as_deref() != Some(&true) || self.end == rhs.end)
                        && true
                }
            }
        }

        pub use _puroro_impls::*;
        pub mod _puroro_impls {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            use super::_puroro_traits::*;

            pub struct EnumReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub start: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::EnumReservedRange>
                for EnumReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
            }

            impl<ScalarType> super::_puroro_traits::EnumReservedRangeTrait
                for EnumReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.start),
                    ))
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
                for EnumReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::EnumReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::EnumReservedRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for EnumReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { start: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for EnumReservedRangeSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        start: ::std::clone::Clone::clone(&self.start),
                    }
                }
            }

            pub struct EnumReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub end: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::EnumReservedRange>
                for EnumReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
            }

            impl<ScalarType> super::_puroro_traits::EnumReservedRangeTrait
                for EnumReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.end),
                    ))
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite
                for EnumReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::EnumReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::EnumReservedRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for EnumReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { end: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for EnumReservedRangeSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        end: ::std::clone::Clone::clone(&self.end),
                    }
                }
            }
            pub struct EnumReservedRangeBumpalo<'bump> {
                _bump: &'bump ::puroro::bumpalo::Bump,
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                start: ::puroro::internal::Bare<i32>,
                end: ::puroro::internal::Bare<i32>,
            }

            pub type EnumReservedRangeBumpaloOwned =
                ::puroro::BumpaloOwned<EnumReservedRangeBumpalo<'static>>;
            impl<'bump> EnumReservedRangeBumpalo<'bump> {
                pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    #[allow(unused)]
                    let bump_ref: &::puroro::bumpalo::Bump =
                        unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

                    Self {
                        _bump: bump,
                        _bitfield: ::std::default::Default::default(),
                        start: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                    }
                }
                pub fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.start.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn start<'this>(&'this self) -> i32 {
                    match self.start_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_start(&self) -> bool {
                    self.start_opt().is_some()
                }
                pub fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn end<'this>(&'this self) -> i32 {
                    match self.end_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_end(&self) -> bool {
                    self.end_opt().is_some()
                }
                pub fn clear_start(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn start_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_start() {
                        self.start = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.start
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn end_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.end
                }
            }
            impl<'bump> ::puroro::Message<super::_puroro_simple_impl::EnumReservedRange>
                for EnumReservedRangeBumpalo<'bump>
            {
            }

            impl<'bump> ::puroro::BumpaloMessage<'bump> for EnumReservedRangeBumpalo<'bump> {
                fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> ::puroro::internal::BumpDefault<'bump> for EnumReservedRangeBumpalo<'bump> {
                fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> super::_puroro_traits::EnumReservedRangeTrait for EnumReservedRangeBumpalo<'bump> {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::start_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::end_opt(self)
                }
            }

            impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for EnumReservedRangeBumpalo<'bump> {
                fn deser_field<'this, I>(
                    &'this mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.start, data, self._bump)
                        }
                        2 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data, self._bump)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for EnumReservedRangeBumpalo<'bump>
            where
                Self: super::_puroro_traits::EnumReservedRangeTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::EnumReservedRangeTrait>::start_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::EnumReservedRangeTrait>::end_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }
            pub struct EnumReservedRangeBuilder<T>(T);

            impl<T> EnumReservedRangeBuilder<T>
            where
                T: EnumReservedRangeTrait,
            {
                pub fn append_start<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> EnumReservedRangeBuilder<(T, EnumReservedRangeSingleField1<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    EnumReservedRangeBuilder((
                        self.0,
                        EnumReservedRangeSingleField1 { start: value },
                    ))
                }

                pub fn append_end<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> EnumReservedRangeBuilder<(T, EnumReservedRangeSingleField2<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    EnumReservedRangeBuilder((self.0, EnumReservedRangeSingleField2 { end: value }))
                }

                pub fn build(self) -> T {
                    self.0
                }
            }

            impl EnumReservedRangeBuilder<()> {
                pub fn new() -> Self {
                    Self(())
                }
            }
        }
        pub use _puroro_traits::*;
        pub mod _puroro_traits {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }

            pub trait EnumReservedRangeTrait {
                fn start<'this>(&'this self) -> i32 {
                    self.start_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_start<'this>(&'this self) -> bool {
                    self.start_opt().is_some()
                }

                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
                fn end<'this>(&'this self) -> i32 {
                    self.end_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_end<'this>(&'this self) -> bool {
                    self.end_opt().is_some()
                }

                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
            }

            macro_rules! enum_reserved_range_delegate {
                ($ty:ty) => {
                    fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).start_opt()
                    }

                    fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).end_opt()
                    }
                };
            }

            impl<T> EnumReservedRangeTrait for &'_ T
            where
                T: EnumReservedRangeTrait,
            {
                enum_reserved_range_delegate!(T);
            }

            impl<T> EnumReservedRangeTrait for &'_ mut T
            where
                T: EnumReservedRangeTrait,
            {
                enum_reserved_range_delegate!(T);
            }

            impl<T> EnumReservedRangeTrait for ::std::boxed::Box<T>
            where
                T: EnumReservedRangeTrait,
            {
                enum_reserved_range_delegate!(T);
            }

            impl<'bump, T> EnumReservedRangeTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
            where
                T: EnumReservedRangeTrait,
            {
                enum_reserved_range_delegate!(T);
            }

            impl<T> EnumReservedRangeTrait for ::puroro::BumpaloOwned<T>
            where
                T: EnumReservedRangeTrait,
            {
                enum_reserved_range_delegate!(T);
            }
            impl EnumReservedRangeTrait for () {}
            impl<T, U> EnumReservedRangeTrait for (T, U)
            where
                T: EnumReservedRangeTrait,
                U: EnumReservedRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> Option<i32> {
                    <U as EnumReservedRangeTrait>::start_opt(&self.1)
                        .or_else(|| <T as EnumReservedRangeTrait>::start_opt(&self.0))
                }

                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <U as EnumReservedRangeTrait>::end_opt(&self.1)
                        .or_else(|| <T as EnumReservedRangeTrait>::end_opt(&self.0))
                }
            }
            impl<T, U> EnumReservedRangeTrait for ::puroro::Either<T, U>
            where
                T: EnumReservedRangeTrait,
                U: EnumReservedRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as EnumReservedRangeTrait>::start_opt(t),
                        |u| <U as EnumReservedRangeTrait>::start_opt(u),
                    )
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as EnumReservedRangeTrait>::end_opt(t),
                        |u| <U as EnumReservedRangeTrait>::end_opt(u),
                    )
                }
            }
            impl<T> EnumReservedRangeTrait for ::std::option::Option<T>
            where
                T: EnumReservedRangeTrait,
            {
                fn start_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.start_opt())
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.end_opt())
                }
            }
        }
        pub use _puroro_nested::*;
        pub mod _puroro_nested {
            pub mod enum_reserved_range {
                mod _puroro_root {
                    pub use super::super::super::_puroro_root::*;
                }
            }
        }
    }
    pub mod enum_value_descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod service_descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod method_descriptor_proto {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod file_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        #[derive(
            ::std::fmt::Debug, ::std::clone::Clone, ::std::marker::Copy, ::std::cmp::PartialEq,
        )]
        pub enum OptimizeMode {
            Speed,
            CodeSize,
            LiteRuntime,
        }

        impl ::puroro::Enum2 for OptimizeMode {}
        impl ::std::convert::TryFrom<i32> for OptimizeMode {
            type Error = i32;
            fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
                ::std::result::Result::Ok(match value {
                    1 => OptimizeMode::Speed,
                    2 => OptimizeMode::CodeSize,
                    3 => OptimizeMode::LiteRuntime,
                    _ => Err(value)?,
                })
            }
        }

        impl ::std::convert::From<OptimizeMode> for i32 {
            fn from(value: OptimizeMode) -> i32 {
                match value {
                    OptimizeMode::Speed => 1,
                    OptimizeMode::CodeSize => 2,
                    OptimizeMode::LiteRuntime => 3,
                }
            }
        }

        impl ::std::default::Default for OptimizeMode {
            fn default() -> Self {
                OptimizeMode::Speed
            }
        }

        impl<'bump> ::puroro::internal::BumpDefault<'bump> for OptimizeMode {
            fn default_in(_: &'bump ::puroro::bumpalo::Bump) -> Self {
                ::std::default::Default::default()
            }
        }
    }
    pub mod message_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod field_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        #[derive(
            ::std::fmt::Debug, ::std::clone::Clone, ::std::marker::Copy, ::std::cmp::PartialEq,
        )]
        pub enum Ctype {
            String,
            Cord,
            StringPiece,
        }

        impl ::puroro::Enum2 for Ctype {}
        impl ::std::convert::TryFrom<i32> for Ctype {
            type Error = i32;
            fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
                ::std::result::Result::Ok(match value {
                    0 => Ctype::String,
                    1 => Ctype::Cord,
                    2 => Ctype::StringPiece,
                    _ => Err(value)?,
                })
            }
        }

        impl ::std::convert::From<Ctype> for i32 {
            fn from(value: Ctype) -> i32 {
                match value {
                    Ctype::String => 0,
                    Ctype::Cord => 1,
                    Ctype::StringPiece => 2,
                }
            }
        }

        impl ::std::default::Default for Ctype {
            fn default() -> Self {
                Ctype::String
            }
        }

        impl<'bump> ::puroro::internal::BumpDefault<'bump> for Ctype {
            fn default_in(_: &'bump ::puroro::bumpalo::Bump) -> Self {
                ::std::default::Default::default()
            }
        }
        #[derive(
            ::std::fmt::Debug, ::std::clone::Clone, ::std::marker::Copy, ::std::cmp::PartialEq,
        )]
        pub enum Jstype {
            JsNormal,
            JsString,
            JsNumber,
        }

        impl ::puroro::Enum2 for Jstype {}
        impl ::std::convert::TryFrom<i32> for Jstype {
            type Error = i32;
            fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
                ::std::result::Result::Ok(match value {
                    0 => Jstype::JsNormal,
                    1 => Jstype::JsString,
                    2 => Jstype::JsNumber,
                    _ => Err(value)?,
                })
            }
        }

        impl ::std::convert::From<Jstype> for i32 {
            fn from(value: Jstype) -> i32 {
                match value {
                    Jstype::JsNormal => 0,
                    Jstype::JsString => 1,
                    Jstype::JsNumber => 2,
                }
            }
        }

        impl ::std::default::Default for Jstype {
            fn default() -> Self {
                Jstype::JsNormal
            }
        }

        impl<'bump> ::puroro::internal::BumpDefault<'bump> for Jstype {
            fn default_in(_: &'bump ::puroro::bumpalo::Bump) -> Self {
                ::std::default::Default::default()
            }
        }
    }
    pub mod oneof_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod enum_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod enum_value_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod service_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }
    }
    pub mod method_options {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        #[derive(
            ::std::fmt::Debug, ::std::clone::Clone, ::std::marker::Copy, ::std::cmp::PartialEq,
        )]
        pub enum IdempotencyLevel {
            IdempotencyUnknown,
            NoSideEffects,
            Idempotent,
        }

        impl ::puroro::Enum2 for IdempotencyLevel {}
        impl ::std::convert::TryFrom<i32> for IdempotencyLevel {
            type Error = i32;
            fn try_from(value: i32) -> ::std::result::Result<Self, i32> {
                ::std::result::Result::Ok(match value {
                    0 => IdempotencyLevel::IdempotencyUnknown,
                    1 => IdempotencyLevel::NoSideEffects,
                    2 => IdempotencyLevel::Idempotent,
                    _ => Err(value)?,
                })
            }
        }

        impl ::std::convert::From<IdempotencyLevel> for i32 {
            fn from(value: IdempotencyLevel) -> i32 {
                match value {
                    IdempotencyLevel::IdempotencyUnknown => 0,
                    IdempotencyLevel::NoSideEffects => 1,
                    IdempotencyLevel::Idempotent => 2,
                }
            }
        }

        impl ::std::default::Default for IdempotencyLevel {
            fn default() -> Self {
                IdempotencyLevel::IdempotencyUnknown
            }
        }

        impl<'bump> ::puroro::internal::BumpDefault<'bump> for IdempotencyLevel {
            fn default_in(_: &'bump ::puroro::bumpalo::Bump) -> Self {
                ::std::default::Default::default()
            }
        }
    }
    pub mod uninterpreted_option {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        pub use _puroro_simple_impl::NamePart;
        pub mod _puroro_simple_impl {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            pub struct NamePart {
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                name_part: ::puroro::internal::Bare<::std::string::String>,
                is_extension: ::puroro::internal::Bare<bool>,
            }
            impl ::puroro::Message<NamePart> for NamePart {}

            impl NamePart {
                pub fn new() -> Self {
                    Self {
                        _bitfield: ::std::default::Default::default(),
                        name_part: ::std::default::Default::default(),
                        is_extension: ::std::default::Default::default(),
                    }
                }
                pub fn name_part_opt(&self) -> ::std::option::Option<&'_ str> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.name_part)
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_name_part(&self) -> bool {
                    Self::name_part_opt(self).is_some()
                }

                pub fn name_part(&self) -> &'_ str {
                    self.name_part_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn is_extension_opt(&self) -> ::std::option::Option<bool> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.is_extension.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_is_extension(&self) -> bool {
                    Self::is_extension_opt(self).is_some()
                }

                pub fn is_extension(&self) -> bool {
                    self.is_extension_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn clear_name_part(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn name_part_mut(&mut self) -> &'_ mut ::std::string::String {
                    if !self.has_name_part() {
                        self.name_part = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.name_part
                }
                pub fn clear_is_extension(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn is_extension_mut(&mut self) -> &'_ mut bool {
                    if !self.has_is_extension() {
                        self.is_extension = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.is_extension
                }
            }

            impl super::_puroro_traits::NamePartTrait for NamePart {
                fn name_part_opt<'this>(&'this self) -> Option<&'this str> {
                    <self::NamePart>::name_part_opt(self)
                }
                fn is_extension_opt<'this>(&'this self) -> Option<bool> {
                    <self::NamePart>::is_extension_opt(self)
                }
            }

            impl ::puroro::MessageRepresentativeImpl for NamePart {}

            impl ::puroro::internal::de::DeserMessageFromBytesIter for NamePart {
                fn deser_field<I>(
                    &mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Required,
                                ::puroro::tags::String,
                            >::deser_field(&mut self.name_part, data)
                        }
                        2 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Required, ::puroro::tags::Bool
                        >::deser_field(&mut self.is_extension, data)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl ::puroro::internal::se::SerMessageToIoWrite for NamePart
            where
                Self: super::_puroro_traits::NamePartTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Required,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::NamePartTrait>::name_part_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Required,
                        ::puroro::tags::Bool,
                    >::ser_field(
                        <Self as super::_puroro_traits::NamePartTrait>::is_extension_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl ::std::default::Default for NamePart {
                fn default() -> Self {
                    Self::new()
                }
            }

            impl ::std::fmt::Debug for NamePart
            where
                Self: super::_puroro_traits::NamePartTrait,
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.debug_struct("NamePart")
                        .field("name_part", &self.name_part_opt())
                        .field("is_extension", &self.is_extension_opt())
                        .finish()
                }
            }

            impl ::std::clone::Clone for NamePart {
                fn clone(&self) -> Self {
                    Self {
                        _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                        name_part: ::std::clone::Clone::clone(&self.name_part),
                        is_extension: ::std::clone::Clone::clone(&self.is_extension),
                    }
                }
            }

            impl ::std::cmp::PartialEq for NamePart {
                fn eq(&self, rhs: &Self) -> bool {
                    self._bitfield == rhs._bitfield
                        && (self._bitfield.get(0).as_deref() != Some(&true)
                            || self.name_part == rhs.name_part)
                        && (self._bitfield.get(1).as_deref() != Some(&true)
                            || self.is_extension == rhs.is_extension)
                        && true
                }
            }
        }

        pub use _puroro_impls::*;
        pub mod _puroro_impls {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            use super::_puroro_traits::*;

            pub struct NamePartSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                pub name_part: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::NamePart> for NamePartSingleField1<ScalarType> where
                ScalarType: ::std::convert::AsRef<str>
            {
            }

            impl<ScalarType> super::_puroro_traits::NamePartTrait for NamePartSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                fn name_part_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::Some(self.name_part.as_ref())
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for NamePartSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                Self: super::_puroro_traits::NamePartTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Required,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::NamePartTrait>::name_part_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for NamePartSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                fn from(value: ScalarType) -> Self {
                    Self { name_part: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for NamePartSingleField1<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        name_part: ::std::clone::Clone::clone(&self.name_part),
                    }
                }
            }

            pub struct NamePartSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
            {
                pub is_extension: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::NamePart> for NamePartSingleField2<ScalarType> where
                ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone
            {
            }

            impl<ScalarType> super::_puroro_traits::NamePartTrait for NamePartSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
            {
                fn is_extension_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.is_extension),
                    ))
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for NamePartSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
                Self: super::_puroro_traits::NamePartTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Required,
                        ::puroro::tags::Bool,
                    >::ser_field(
                        <Self as super::_puroro_traits::NamePartTrait>::is_extension_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for NamePartSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self {
                        is_extension: value,
                    }
                }
            }

            impl<ScalarType> ::std::clone::Clone for NamePartSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        is_extension: ::std::clone::Clone::clone(&self.is_extension),
                    }
                }
            }
            pub struct NamePartBumpalo<'bump> {
                _bump: &'bump ::puroro::bumpalo::Bump,
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                name_part: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
                is_extension: ::puroro::internal::Bare<bool>,
            }

            pub type NamePartBumpaloOwned = ::puroro::BumpaloOwned<NamePartBumpalo<'static>>;
            impl<'bump> NamePartBumpalo<'bump> {
                pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    #[allow(unused)]
                    let bump_ref: &::puroro::bumpalo::Bump =
                        unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

                    Self {
                        _bump: bump,
                        _bitfield: ::std::default::Default::default(),
                        name_part: ::std::default::Default::default(),
                        is_extension: ::std::default::Default::default(),
                    }
                }
                pub fn name_part_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.name_part)
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn name_part<'this>(&'this self) -> &'this str {
                    match self.name_part_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_name_part(&self) -> bool {
                    self.name_part_opt().is_some()
                }
                pub fn is_extension_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.is_extension.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn is_extension<'this>(&'this self) -> bool {
                    match self.is_extension_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_is_extension(&self) -> bool {
                    self.is_extension_opt().is_some()
                }
                pub fn clear_name_part(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn name_part_mut<'this>(
                    &'this mut self,
                ) -> impl 'this
                + ::std::ops::DerefMut<
                    Target = ::puroro::bumpalo::collections::String<'bump>,
                > {
                    if !self.has_name_part() {
                        self.name_part = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    unsafe { self.name_part.as_mut_string_in(self._bump) }
                }
                pub fn clear_is_extension(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn is_extension_mut<'this>(&'this mut self) -> &'this mut bool {
                    if !self.has_is_extension() {
                        self.is_extension = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.is_extension
                }
            }
            impl<'bump> ::puroro::Message<super::_puroro_simple_impl::NamePart> for NamePartBumpalo<'bump> {}

            impl<'bump> ::puroro::BumpaloMessage<'bump> for NamePartBumpalo<'bump> {
                fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> ::puroro::internal::BumpDefault<'bump> for NamePartBumpalo<'bump> {
                fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> super::_puroro_traits::NamePartTrait for NamePartBumpalo<'bump> {
                fn name_part_opt<'this>(&'this self) -> Option<&'this str> {
                    <Self>::name_part_opt(self)
                }
                fn is_extension_opt<'this>(&'this self) -> Option<bool> {
                    <Self>::is_extension_opt(self)
                }
            }

            impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for NamePartBumpalo<'bump> {
                fn deser_field<'this, I>(
                    &'this mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Required,
                                ::puroro::tags::String,
                            >::deser_field(
                                &mut self.name_part, data, self._bump
                            )
                        }
                        2 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Required, ::puroro::tags::Bool
                        >::deser_field(&mut self.is_extension, data, self._bump)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for NamePartBumpalo<'bump>
            where
                Self: super::_puroro_traits::NamePartTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Required,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::NamePartTrait>::name_part_opt(self),
                        1,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Required,
                        ::puroro::tags::Bool,
                    >::ser_field(
                        <Self as super::_puroro_traits::NamePartTrait>::is_extension_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }
            pub struct NamePartBuilder<T>(T);

            impl<T> NamePartBuilder<T>
            where
                T: NamePartTrait,
            {
                pub fn append_name_part<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> NamePartBuilder<(T, NamePartSingleField1<ScalarType>)>
                where
                    ScalarType: ::std::convert::AsRef<str>,
                {
                    NamePartBuilder((self.0, NamePartSingleField1 { name_part: value }))
                }

                pub fn append_is_extension<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> NamePartBuilder<(T, NamePartSingleField2<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<bool> + ::std::clone::Clone,
                {
                    NamePartBuilder((
                        self.0,
                        NamePartSingleField2 {
                            is_extension: value,
                        },
                    ))
                }

                pub fn build(self) -> T {
                    self.0
                }
            }

            impl NamePartBuilder<()> {
                pub fn new() -> Self {
                    Self(())
                }
            }
        }
        pub use _puroro_traits::*;
        pub mod _puroro_traits {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }

            pub trait NamePartTrait {
                fn name_part<'this>(&'this self) -> &'this str {
                    self.name_part_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_name_part<'this>(&'this self) -> bool {
                    self.name_part_opt().is_some()
                }

                fn name_part_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::None
                }
                fn is_extension<'this>(&'this self) -> bool {
                    self.is_extension_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_is_extension<'this>(&'this self) -> bool {
                    self.is_extension_opt().is_some()
                }

                fn is_extension_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                    ::std::option::Option::None
                }
            }

            macro_rules! name_part_delegate {
                ($ty:ty) => {
                    fn name_part_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                        (**self).name_part_opt()
                    }

                    fn is_extension_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                        (**self).is_extension_opt()
                    }
                };
            }

            impl<T> NamePartTrait for &'_ T
            where
                T: NamePartTrait,
            {
                name_part_delegate!(T);
            }

            impl<T> NamePartTrait for &'_ mut T
            where
                T: NamePartTrait,
            {
                name_part_delegate!(T);
            }

            impl<T> NamePartTrait for ::std::boxed::Box<T>
            where
                T: NamePartTrait,
            {
                name_part_delegate!(T);
            }

            impl<'bump, T> NamePartTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
            where
                T: NamePartTrait,
            {
                name_part_delegate!(T);
            }

            impl<T> NamePartTrait for ::puroro::BumpaloOwned<T>
            where
                T: NamePartTrait,
            {
                name_part_delegate!(T);
            }
            impl NamePartTrait for () {}
            impl<T, U> NamePartTrait for (T, U)
            where
                T: NamePartTrait,
                U: NamePartTrait,
            {
                fn name_part_opt<'this>(&'this self) -> Option<&'this str> {
                    <U as NamePartTrait>::name_part_opt(&self.1)
                        .or_else(|| <T as NamePartTrait>::name_part_opt(&self.0))
                }

                fn is_extension_opt<'this>(&'this self) -> Option<bool> {
                    <U as NamePartTrait>::is_extension_opt(&self.1)
                        .or_else(|| <T as NamePartTrait>::is_extension_opt(&self.0))
                }
            }
            impl<T, U> NamePartTrait for ::puroro::Either<T, U>
            where
                T: NamePartTrait,
                U: NamePartTrait,
            {
                fn name_part_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().either(
                        |t| <T as NamePartTrait>::name_part_opt(t),
                        |u| <U as NamePartTrait>::name_part_opt(u),
                    )
                }
                fn is_extension_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                    self.as_ref().either(
                        |t| <T as NamePartTrait>::is_extension_opt(t),
                        |u| <U as NamePartTrait>::is_extension_opt(u),
                    )
                }
            }
            impl<T> NamePartTrait for ::std::option::Option<T>
            where
                T: NamePartTrait,
            {
                fn name_part_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().and_then(|msg| msg.name_part_opt())
                }
                fn is_extension_opt<'this>(&'this self) -> ::std::option::Option<bool> {
                    self.as_ref().and_then(|msg| msg.is_extension_opt())
                }
            }
        }
        pub use _puroro_nested::*;
        pub mod _puroro_nested {
            pub mod name_part {
                mod _puroro_root {
                    pub use super::super::super::_puroro_root::*;
                }
            }
        }
    }
    pub mod source_code_info {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        pub use _puroro_simple_impl::Location;
        pub mod _puroro_simple_impl {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            pub struct Location {
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                path: ::std::vec::Vec<i32>,
                span: ::std::vec::Vec<i32>,
                leading_comments: ::puroro::internal::Bare<::std::string::String>,
                trailing_comments: ::puroro::internal::Bare<::std::string::String>,
                leading_detached_comments: ::std::vec::Vec<::std::string::String>,
            }
            impl ::puroro::Message<Location> for Location {}

            impl Location {
                pub fn new() -> Self {
                    Self {
                        _bitfield: ::std::default::Default::default(),
                        path: ::std::default::Default::default(),
                        span: ::std::default::Default::default(),
                        leading_comments: ::std::default::Default::default(),
                        trailing_comments: ::std::default::Default::default(),
                        leading_detached_comments: ::std::default::Default::default(),
                    }
                }
                pub fn path(&self) -> &'_ [i32] {
                    &self.path
                }
                pub fn span(&self) -> &'_ [i32] {
                    &self.span
                }
                pub fn leading_comments_opt(&self) -> ::std::option::Option<&'_ str> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.leading_comments)
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_leading_comments(&self) -> bool {
                    Self::leading_comments_opt(self).is_some()
                }

                pub fn leading_comments(&self) -> &'_ str {
                    self.leading_comments_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn trailing_comments_opt(&self) -> ::std::option::Option<&'_ str> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.trailing_comments)
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_trailing_comments(&self) -> bool {
                    Self::trailing_comments_opt(self).is_some()
                }

                pub fn trailing_comments(&self) -> &'_ str {
                    self.trailing_comments_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn leading_detached_comments(
                    &self,
                ) -> &'_ [impl ::std::ops::Deref<Target = str> + ::std::fmt::Debug]
                {
                    &self.leading_detached_comments
                }
                pub fn path_mut(&mut self) -> &'_ mut ::std::vec::Vec<i32> {
                    &mut self.path
                }
                pub fn span_mut(&mut self) -> &'_ mut ::std::vec::Vec<i32> {
                    &mut self.span
                }
                pub fn clear_leading_comments(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn leading_comments_mut(&mut self) -> &'_ mut ::std::string::String {
                    if !self.has_leading_comments() {
                        self.leading_comments = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.leading_comments
                }
                pub fn clear_trailing_comments(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn trailing_comments_mut(&mut self) -> &'_ mut ::std::string::String {
                    if !self.has_trailing_comments() {
                        self.trailing_comments = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.trailing_comments
                }
                pub fn leading_detached_comments_mut(
                    &mut self,
                ) -> &'_ mut ::std::vec::Vec<::std::string::String> {
                    &mut self.leading_detached_comments
                }
            }

            impl super::_puroro_traits::LocationTrait for Location {
                type PathRepeatedType<'this> =
                    ::puroro::CloneThenIntoRepeatedField<'this, ::std::vec::Vec<i32>, i32, i32>;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.path)
                }
                type SpanRepeatedType<'this> =
                    ::puroro::CloneThenIntoRepeatedField<'this, ::std::vec::Vec<i32>, i32, i32>;

                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.span)
                }
                fn leading_comments_opt<'this>(&'this self) -> Option<&'this str> {
                    <self::Location>::leading_comments_opt(self)
                }
                fn trailing_comments_opt<'this>(&'this self) -> Option<&'this str> {
                    <self::Location>::trailing_comments_opt(self)
                }
                type LeadingDetachedCommentsRepeatedType<'this> = ::puroro::AsRefRepeatedField<
                    'this,
                    ::std::vec::Vec<::std::string::String>,
                    ::std::string::String,
                    str,
                >;

                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::AsRefRepeatedField::new(&self.leading_detached_comments)
                }
            }

            impl ::puroro::MessageRepresentativeImpl for Location {}

            impl ::puroro::internal::de::DeserMessageFromBytesIter for Location {
                fn deser_field<I>(
                    &mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::Int32,
                        >::deser_field(&mut self.path, data),
                        2 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::Int32,
                        >::deser_field(&mut self.span, data),
                        3 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Optional,
                                ::puroro::tags::String,
                            >::deser_field(
                                &mut self.leading_comments, data
                            )
                        }
                        4 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Optional,
                                ::puroro::tags::String,
                            >::deser_field(
                                &mut self.trailing_comments, data
                            )
                        }
                        6 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::String,
                        >::deser_field(
                            &mut self.leading_detached_comments, data
                        ),

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl ::puroro::internal::se::SerMessageToIoWrite for Location
            where
                Self: super::_puroro_traits::LocationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::path(self),
                        1,
                        out,
                        true,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::span(self),
                        2,
                        out,
                        true,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::leading_comments_opt(self),
                        3,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::trailing_comments_opt(self),
                        4,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::leading_detached_comments(
                            self,
                        ),
                        6,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl ::std::default::Default for Location {
                fn default() -> Self {
                    Self::new()
                }
            }

            impl ::std::fmt::Debug for Location
            where
                Self: super::_puroro_traits::LocationTrait,
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.debug_struct("Location")
                        .field("path", &self.path())
                        .field("span", &self.span())
                        .field("leading_comments", &self.leading_comments_opt())
                        .field("trailing_comments", &self.trailing_comments_opt())
                        .field(
                            "leading_detached_comments",
                            &self.leading_detached_comments(),
                        )
                        .finish()
                }
            }

            impl ::std::clone::Clone for Location {
                fn clone(&self) -> Self {
                    Self {
                        _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                        path: ::std::clone::Clone::clone(&self.path),
                        span: ::std::clone::Clone::clone(&self.span),
                        leading_comments: ::std::clone::Clone::clone(&self.leading_comments),
                        trailing_comments: ::std::clone::Clone::clone(&self.trailing_comments),
                        leading_detached_comments: ::std::clone::Clone::clone(
                            &self.leading_detached_comments,
                        ),
                    }
                }
            }

            impl ::std::cmp::PartialEq for Location {
                fn eq(&self, rhs: &Self) -> bool {
                    self._bitfield == rhs._bitfield
                        && self.path == rhs.path
                        && self.span == rhs.span
                        && (self._bitfield.get(0).as_deref() != Some(&true)
                            || self.leading_comments == rhs.leading_comments)
                        && (self._bitfield.get(1).as_deref() != Some(&true)
                            || self.trailing_comments == rhs.trailing_comments)
                        && self.leading_detached_comments == rhs.leading_detached_comments
                        && true
                }
            }
        }

        pub use _puroro_impls::*;
        pub mod _puroro_impls {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            use super::_puroro_traits::*;

            pub struct LocationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                pub path: RepeatedType,
            }

            impl<ScalarType, RepeatedType> ::puroro::Message<super::Location>
                for LocationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
            }

            impl<ScalarType, RepeatedType> super::_puroro_traits::LocationTrait
                for LocationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                type PathRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<
                'this,
                RepeatedType,
                ScalarType,
                i32
            > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.path)
                }
                type SpanRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
                type LeadingDetachedCommentsRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
            }

            impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
                for LocationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                Self: super::_puroro_traits::LocationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::path(self),
                        1,
                        out,
                        true,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
                for LocationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                fn from(value: RepeatedType) -> Self {
                    Self { path: value }
                }
            }

            impl<ScalarType, RepeatedType> ::std::clone::Clone
                for LocationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                RepeatedType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        path: ::std::clone::Clone::clone(&self.path),
                    }
                }
            }

            pub struct LocationSingleField2<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                pub span: RepeatedType,
            }

            impl<ScalarType, RepeatedType> ::puroro::Message<super::Location>
                for LocationSingleField2<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
            }

            impl<ScalarType, RepeatedType> super::_puroro_traits::LocationTrait
                for LocationSingleField2<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                type PathRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }

                type SpanRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<
                'this,
                RepeatedType,
                ScalarType,
                i32
            > where Self: 'this;

                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.span)
                }
                type LeadingDetachedCommentsRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
            }

            impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
                for LocationSingleField2<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                Self: super::_puroro_traits::LocationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::span(self),
                        2,
                        out,
                        true,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
                for LocationSingleField2<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                fn from(value: RepeatedType) -> Self {
                    Self { span: value }
                }
            }

            impl<ScalarType, RepeatedType> ::std::clone::Clone
                for LocationSingleField2<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                RepeatedType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        span: ::std::clone::Clone::clone(&self.span),
                    }
                }
            }

            pub struct LocationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                pub leading_comments: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::Location> for LocationSingleField3<ScalarType> where
                ScalarType: ::std::convert::AsRef<str>
            {
            }

            impl<ScalarType> super::_puroro_traits::LocationTrait for LocationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                type PathRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
                type SpanRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }

                fn leading_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::Some(self.leading_comments.as_ref())
                }
                type LeadingDetachedCommentsRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for LocationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                Self: super::_puroro_traits::LocationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::leading_comments_opt(self),
                        3,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for LocationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                fn from(value: ScalarType) -> Self {
                    Self {
                        leading_comments: value,
                    }
                }
            }

            impl<ScalarType> ::std::clone::Clone for LocationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        leading_comments: ::std::clone::Clone::clone(&self.leading_comments),
                    }
                }
            }

            pub struct LocationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                pub trailing_comments: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::Location> for LocationSingleField4<ScalarType> where
                ScalarType: ::std::convert::AsRef<str>
            {
            }

            impl<ScalarType> super::_puroro_traits::LocationTrait for LocationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                type PathRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
                type SpanRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }

                fn trailing_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::Some(self.trailing_comments.as_ref())
                }
                type LeadingDetachedCommentsRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str> where Self: 'this;
                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for LocationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                Self: super::_puroro_traits::LocationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::trailing_comments_opt(self),
                        4,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for LocationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                fn from(value: ScalarType) -> Self {
                    Self {
                        trailing_comments: value,
                    }
                }
            }

            impl<ScalarType> ::std::clone::Clone for LocationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        trailing_comments: ::std::clone::Clone::clone(&self.trailing_comments),
                    }
                }
            }

            pub struct LocationSingleField6<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                pub leading_detached_comments: RepeatedType,
            }

            impl<ScalarType, RepeatedType> ::puroro::Message<super::Location>
                for LocationSingleField6<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
            }

            impl<ScalarType, RepeatedType> super::_puroro_traits::LocationTrait
                for LocationSingleField6<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                type PathRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
                type SpanRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }

                type LeadingDetachedCommentsRepeatedType<'this> =
            ::puroro::AsRefRepeatedField<
                'this,
                RepeatedType,
                ScalarType,str,
            > where Self: 'this;

                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::AsRefRepeatedField::new(&self.leading_detached_comments)
                }
            }

            impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
                for LocationSingleField6<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                Self: super::_puroro_traits::LocationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::leading_detached_comments(
                            self,
                        ),
                        6,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
                for LocationSingleField6<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                fn from(value: RepeatedType) -> Self {
                    Self {
                        leading_detached_comments: value,
                    }
                }
            }

            impl<ScalarType, RepeatedType> ::std::clone::Clone
                for LocationSingleField6<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                RepeatedType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        leading_detached_comments: ::std::clone::Clone::clone(
                            &self.leading_detached_comments,
                        ),
                    }
                }
            }
            pub struct LocationBumpalo<'bump> {
                _bump: &'bump ::puroro::bumpalo::Bump,
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (2 + 31) / 32],
                >,
                path: ::puroro::internal::NoAllocBumpVec<i32>,
                span: ::puroro::internal::NoAllocBumpVec<i32>,
                leading_comments: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
                trailing_comments: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
                leading_detached_comments:
                    ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
            }

            pub type LocationBumpaloOwned = ::puroro::BumpaloOwned<LocationBumpalo<'static>>;
            impl<'bump> LocationBumpalo<'bump> {
                pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    #[allow(unused)]
                    let bump_ref: &::puroro::bumpalo::Bump =
                        unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

                    Self {
                        _bump: bump,
                        _bitfield: ::std::default::Default::default(),
                        path: ::std::default::Default::default(),
                        span: ::std::default::Default::default(),
                        leading_comments: ::std::default::Default::default(),
                        trailing_comments: ::std::default::Default::default(),
                        leading_detached_comments: ::std::default::Default::default(),
                    }
                }
                pub fn path<'this>(&'this self) -> &'this [i32] {
                    &self.path
                }
                pub fn span<'this>(&'this self) -> &'this [i32] {
                    &self.span
                }
                pub fn leading_comments_opt<'this>(
                    &'this self,
                ) -> ::std::option::Option<&'this str> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.leading_comments)
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn leading_comments<'this>(&'this self) -> &'this str {
                    match self.leading_comments_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_leading_comments(&self) -> bool {
                    self.leading_comments_opt().is_some()
                }
                pub fn trailing_comments_opt<'this>(
                    &'this self,
                ) -> ::std::option::Option<&'this str> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.trailing_comments)
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn trailing_comments<'this>(&'this self) -> &'this str {
                    match self.trailing_comments_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_trailing_comments(&self) -> bool {
                    self.trailing_comments_opt().is_some()
                }
                pub fn leading_detached_comments<'this>(
                    &'this self,
                ) -> &'this [impl ::std::ops::Deref<Target = str>] {
                    &self.leading_detached_comments
                }
                pub fn path_mut<'this>(
                    &'this mut self,
                ) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, i32> {
                    unsafe { self.path.as_mut_vec_in(self._bump) }
                }
                pub fn span_mut<'this>(
                    &'this mut self,
                ) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, i32> {
                    unsafe { self.span.as_mut_vec_in(self._bump) }
                }
                pub fn clear_leading_comments(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn leading_comments_mut<'this>(
                    &'this mut self,
                ) -> impl 'this
                + ::std::ops::DerefMut<
                    Target = ::puroro::bumpalo::collections::String<'bump>,
                > {
                    if !self.has_leading_comments() {
                        self.leading_comments = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    unsafe { self.leading_comments.as_mut_string_in(self._bump) }
                }
                pub fn clear_trailing_comments(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn trailing_comments_mut<'this>(
                    &'this mut self,
                ) -> impl 'this
                + ::std::ops::DerefMut<
                    Target = ::puroro::bumpalo::collections::String<'bump>,
                > {
                    if !self.has_trailing_comments() {
                        self.trailing_comments = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    unsafe { self.trailing_comments.as_mut_string_in(self._bump) }
                }
                pub fn leading_detached_comments_mut<'this>(
                    &'this mut self,
                ) -> ::puroro::internal::AddBumpVecView<
                    'bump,
                    'this,
                    ::puroro::internal::NoAllocBumpString,
                > {
                    unsafe {
                        self.leading_detached_comments
                            .as_add_bump_vec_view_in(self._bump)
                    }
                }
            }
            impl<'bump> ::puroro::Message<super::_puroro_simple_impl::Location> for LocationBumpalo<'bump> {}

            impl<'bump> ::puroro::BumpaloMessage<'bump> for LocationBumpalo<'bump> {
                fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> ::puroro::internal::BumpDefault<'bump> for LocationBumpalo<'bump> {
                fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> super::_puroro_traits::LocationTrait for LocationBumpalo<'bump> {
                type PathRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<
                'this,
                ::puroro::internal::NoAllocBumpVec<i32>,
                i32,
                i32
            > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.path)
                }
                type SpanRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<
                'this,
                ::puroro::internal::NoAllocBumpVec<i32>,
                i32,
                i32
            > where Self: 'this;

                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.span)
                }
                fn leading_comments_opt<'this>(&'this self) -> Option<&'this str> {
                    <Self>::leading_comments_opt(self)
                }
                fn trailing_comments_opt<'this>(&'this self) -> Option<&'this str> {
                    <Self>::trailing_comments_opt(self)
                }
                type LeadingDetachedCommentsRepeatedType<'this> =
            ::puroro::AsRefRepeatedField<
                'this,
                ::puroro::internal::NoAllocBumpVec<::puroro::internal::NoAllocBumpString>,
                ::puroro::internal::NoAllocBumpString,str,
            > where Self: 'this;

                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::AsRefRepeatedField::new(&self.leading_detached_comments)
                }
            }

            impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for LocationBumpalo<'bump> {
                fn deser_field<'this, I>(
                    &'this mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::Int32,
                        >::deser_field(
                            &mut self.path, data, self._bump
                        ),
                        2 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::Int32,
                        >::deser_field(
                            &mut self.span, data, self._bump
                        ),
                        3 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Optional,
                                ::puroro::tags::String,
                            >::deser_field(
                                &mut self.leading_comments, data, self._bump
                            )
                        }
                        4 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Optional,
                                ::puroro::tags::String,
                            >::deser_field(
                                &mut self.trailing_comments, data, self._bump
                            )
                        }
                        6 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::String,
                        >::deser_field(
                            &mut self.leading_detached_comments, data, self._bump
                        ),

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for LocationBumpalo<'bump>
            where
                Self: super::_puroro_traits::LocationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::path(self),
                        1,
                        out,
                        true,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::span(self),
                        2,
                        out,
                        true,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::leading_comments_opt(self),
                        3,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::trailing_comments_opt(self),
                        4,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::LocationTrait>::leading_detached_comments(
                            self,
                        ),
                        6,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }
            pub struct LocationBuilder<T>(T);

            impl<T> LocationBuilder<T>
            where
                T: LocationTrait,
            {
                pub fn append_path<ScalarType, RepeatedType>(
                    self,
                    value: RepeatedType,
                ) -> LocationBuilder<(T, LocationSingleField1<ScalarType, RepeatedType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                    for<'a> &'a RepeatedType: ::puroro::RepeatedField<'a>
                        + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                {
                    LocationBuilder((self.0, LocationSingleField1 { path: value }))
                }

                pub fn append_span<ScalarType, RepeatedType>(
                    self,
                    value: RepeatedType,
                ) -> LocationBuilder<(T, LocationSingleField2<ScalarType, RepeatedType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                    for<'a> &'a RepeatedType: ::puroro::RepeatedField<'a>
                        + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                {
                    LocationBuilder((self.0, LocationSingleField2 { span: value }))
                }

                pub fn append_leading_comments<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> LocationBuilder<(T, LocationSingleField3<ScalarType>)>
                where
                    ScalarType: ::std::convert::AsRef<str>,
                {
                    LocationBuilder((
                        self.0,
                        LocationSingleField3 {
                            leading_comments: value,
                        },
                    ))
                }

                pub fn append_trailing_comments<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> LocationBuilder<(T, LocationSingleField4<ScalarType>)>
                where
                    ScalarType: ::std::convert::AsRef<str>,
                {
                    LocationBuilder((
                        self.0,
                        LocationSingleField4 {
                            trailing_comments: value,
                        },
                    ))
                }

                pub fn append_leading_detached_comments<ScalarType, RepeatedType>(
                    self,
                    value: RepeatedType,
                ) -> LocationBuilder<(T, LocationSingleField6<ScalarType, RepeatedType>)>
                where
                    ScalarType: ::std::convert::AsRef<str>,
                    for<'a> &'a RepeatedType: ::puroro::RepeatedField<'a>
                        + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                {
                    LocationBuilder((
                        self.0,
                        LocationSingleField6 {
                            leading_detached_comments: value,
                        },
                    ))
                }

                pub fn build(self) -> T {
                    self.0
                }
            }

            impl LocationBuilder<()> {
                pub fn new() -> Self {
                    Self(())
                }
            }
        }
        pub use _puroro_traits::*;
        pub mod _puroro_traits {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }

            pub trait LocationTrait {
                type PathRepeatedType<'this>: ::puroro::RepeatedField<'this>
                    + ::std::iter::IntoIterator<Item = i32>
                where
                    Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this>;

                type SpanRepeatedType<'this>: ::puroro::RepeatedField<'this>
                    + ::std::iter::IntoIterator<Item = i32>
                where
                    Self: 'this;
                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this>;
                fn leading_comments<'this>(&'this self) -> &'this str {
                    self.leading_comments_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_leading_comments<'this>(&'this self) -> bool {
                    self.leading_comments_opt().is_some()
                }

                fn leading_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::None
                }
                fn trailing_comments<'this>(&'this self) -> &'this str {
                    self.trailing_comments_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_trailing_comments<'this>(&'this self) -> bool {
                    self.trailing_comments_opt().is_some()
                }

                fn trailing_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::None
                }

                type LeadingDetachedCommentsRepeatedType<'this>: ::puroro::RepeatedField<'this>
                    + ::std::iter::IntoIterator<Item = &'this str>
                where
                    Self: 'this;
                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this>;
            }

            macro_rules! location_delegate {
                ($ty:ty) => {

                    type PathRepeatedType<'this> = <$ty>::PathRepeatedType<'this> where Self: 'this;
                    fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                        (**self).path()
                    }

                    type SpanRepeatedType<'this> = <$ty>::SpanRepeatedType<'this> where Self: 'this;
                    fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                        (**self).span()
                    }

                    fn leading_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                        (**self).leading_comments_opt()
                    }

                    fn trailing_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                        (**self).trailing_comments_opt()
                    }

                    type LeadingDetachedCommentsRepeatedType<'this> = <$ty>::LeadingDetachedCommentsRepeatedType<'this> where Self: 'this;
                    fn leading_detached_comments<'this>(&'this self) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                        (**self).leading_detached_comments()
                    }
                };
            }

            impl<T> LocationTrait for &'_ T
            where
                T: LocationTrait,
            {
                location_delegate!(T);
            }

            impl<T> LocationTrait for &'_ mut T
            where
                T: LocationTrait,
            {
                location_delegate!(T);
            }

            impl<T> LocationTrait for ::std::boxed::Box<T>
            where
                T: LocationTrait,
            {
                location_delegate!(T);
            }

            impl<'bump, T> LocationTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
            where
                T: LocationTrait,
            {
                location_delegate!(T);
            }

            impl<T> LocationTrait for ::puroro::BumpaloOwned<T>
            where
                T: LocationTrait,
            {
                location_delegate!(T);
            }
            impl LocationTrait for () {
                type PathRepeatedType<'this> =
                    ::puroro::internal::impls::empty::EmptyRepeatedField<i32>
                    where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
                type SpanRepeatedType<'this> =
                    ::puroro::internal::impls::empty::EmptyRepeatedField<i32>
                    where Self: 'this;
                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
                type LeadingDetachedCommentsRepeatedType<'this> =
                    ::puroro::internal::impls::empty::EmptyRepeatedField<&'this str>
                    where Self: 'this;
                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
            }
            impl<T, U> LocationTrait for (T, U)
            where
                T: LocationTrait,
                U: LocationTrait,
            {
                type PathRepeatedType<'this>
                    = ::puroro::internal::impls::merged::MergedRepeatedField<
                        <T as LocationTrait>::PathRepeatedType<'this>,
                        <U as LocationTrait>::PathRepeatedType<'this>,
                    > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::merged::MergedRepeatedField::new(
                        <T as LocationTrait>::path(&self.0),
                        <U as LocationTrait>::path(&self.1),
                    )
                }
                type SpanRepeatedType<'this>
                    = ::puroro::internal::impls::merged::MergedRepeatedField<
                        <T as LocationTrait>::SpanRepeatedType<'this>,
                        <U as LocationTrait>::SpanRepeatedType<'this>,
                    > where Self: 'this;

                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::merged::MergedRepeatedField::new(
                        <T as LocationTrait>::span(&self.0),
                        <U as LocationTrait>::span(&self.1),
                    )
                }

                fn leading_comments_opt<'this>(&'this self) -> Option<&'this str> {
                    <U as LocationTrait>::leading_comments_opt(&self.1)
                        .or_else(|| <T as LocationTrait>::leading_comments_opt(&self.0))
                }

                fn trailing_comments_opt<'this>(&'this self) -> Option<&'this str> {
                    <U as LocationTrait>::trailing_comments_opt(&self.1)
                        .or_else(|| <T as LocationTrait>::trailing_comments_opt(&self.0))
                }
                type LeadingDetachedCommentsRepeatedType<'this>
                    = ::puroro::internal::impls::merged::MergedRepeatedField<
                        <T as LocationTrait>::LeadingDetachedCommentsRepeatedType<'this>,
                        <U as LocationTrait>::LeadingDetachedCommentsRepeatedType<'this>,
                    > where Self: 'this;

                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::merged::MergedRepeatedField::new(
                        <T as LocationTrait>::leading_detached_comments(&self.0),
                        <U as LocationTrait>::leading_detached_comments(&self.1),
                    )
                }
            }
            impl<T, U> LocationTrait for ::puroro::Either<T, U>
            where
                T: LocationTrait,
                U: LocationTrait,
            {
                type PathRepeatedType<'this>
                    = ::puroro::internal::impls::either::EitherRepeatedField<
                        <T as LocationTrait>::PathRepeatedType<'this>,
                        <U as LocationTrait>::PathRepeatedType<'this>,
                    > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::either::EitherRepeatedField::new(
                        self.as_ref()
                            .map_left(|t| <T as LocationTrait>::path(t))
                            .map_right(|u| <U as LocationTrait>::path(u)),
                    )
                }
                type SpanRepeatedType<'this>
                    = ::puroro::internal::impls::either::EitherRepeatedField<
                        <T as LocationTrait>::SpanRepeatedType<'this>,
                        <U as LocationTrait>::SpanRepeatedType<'this>,
                    > where Self: 'this;

                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::either::EitherRepeatedField::new(
                        self.as_ref()
                            .map_left(|t| <T as LocationTrait>::span(t))
                            .map_right(|u| <U as LocationTrait>::span(u)),
                    )
                }
                fn leading_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().either(
                        |t| <T as LocationTrait>::leading_comments_opt(t),
                        |u| <U as LocationTrait>::leading_comments_opt(u),
                    )
                }
                fn trailing_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().either(
                        |t| <T as LocationTrait>::trailing_comments_opt(t),
                        |u| <U as LocationTrait>::trailing_comments_opt(u),
                    )
                }
                type LeadingDetachedCommentsRepeatedType<'this>
                    = ::puroro::internal::impls::either::EitherRepeatedField<
                        <T as LocationTrait>::LeadingDetachedCommentsRepeatedType<'this>,
                        <U as LocationTrait>::LeadingDetachedCommentsRepeatedType<'this>,
                    > where Self: 'this;

                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::either::EitherRepeatedField::new(
                        self.as_ref()
                            .map_left(|t| <T as LocationTrait>::leading_detached_comments(t))
                            .map_right(|u| <U as LocationTrait>::leading_detached_comments(u)),
                    )
                }
            }
            impl<T> LocationTrait for ::std::option::Option<T>
            where
                T: LocationTrait,
            {
                type PathRepeatedType<'this> =
                    ::puroro::internal::impls::option::OptionRepeatedField<
                        T::PathRepeatedType<'this>
                    > where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::option::OptionRepeatedField::new(
                        self.as_ref().map(|msg| msg.path()),
                    )
                }

                type SpanRepeatedType<'this> =
                    ::puroro::internal::impls::option::OptionRepeatedField<
                        T::SpanRepeatedType<'this>
                    > where Self: 'this;
                fn span<'this>(&'this self) -> Self::SpanRepeatedType<'this> {
                    ::puroro::internal::impls::option::OptionRepeatedField::new(
                        self.as_ref().map(|msg| msg.span()),
                    )
                }
                fn leading_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().and_then(|msg| msg.leading_comments_opt())
                }
                fn trailing_comments_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().and_then(|msg| msg.trailing_comments_opt())
                }

                type LeadingDetachedCommentsRepeatedType<'this> =
                    ::puroro::internal::impls::option::OptionRepeatedField<
                        T::LeadingDetachedCommentsRepeatedType<'this>
                    > where Self: 'this;
                fn leading_detached_comments<'this>(
                    &'this self,
                ) -> Self::LeadingDetachedCommentsRepeatedType<'this> {
                    ::puroro::internal::impls::option::OptionRepeatedField::new(
                        self.as_ref().map(|msg| msg.leading_detached_comments()),
                    )
                }
            }
        }
        pub use _puroro_nested::*;
        pub mod _puroro_nested {
            pub mod location {
                mod _puroro_root {
                    pub use super::super::super::_puroro_root::*;
                }
            }
        }
    }
    pub mod generated_code_info {
        mod _puroro_root {
            pub use super::super::super::_puroro_root::*;
        }

        pub use _puroro_simple_impl::Annotation;
        pub mod _puroro_simple_impl {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            pub struct Annotation {
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (3 + 31) / 32],
                >,
                path: ::std::vec::Vec<i32>,
                source_file: ::puroro::internal::Bare<::std::string::String>,
                begin: ::puroro::internal::Bare<i32>,
                end: ::puroro::internal::Bare<i32>,
            }
            impl ::puroro::Message<Annotation> for Annotation {}

            impl Annotation {
                pub fn new() -> Self {
                    Self {
                        _bitfield: ::std::default::Default::default(),
                        path: ::std::default::Default::default(),
                        source_file: ::std::default::Default::default(),
                        begin: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                    }
                }
                pub fn path(&self) -> &'_ [i32] {
                    &self.path
                }
                pub fn source_file_opt(&self) -> ::std::option::Option<&'_ str> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.source_file)
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_source_file(&self) -> bool {
                    Self::source_file_opt(self).is_some()
                }

                pub fn source_file(&self) -> &'_ str {
                    self.source_file_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn begin_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.begin.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_begin(&self) -> bool {
                    Self::begin_opt(self).is_some()
                }

                pub fn begin(&self) -> i32 {
                    self.begin_opt()
                        .unwrap_or(::std::default::Default::default())
                }
                pub fn end_opt(&self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(2).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.clone().inner())
                    } else {
                        ::std::option::Option::None
                    }
                }

                pub fn has_end(&self) -> bool {
                    Self::end_opt(self).is_some()
                }

                pub fn end(&self) -> i32 {
                    self.end_opt().unwrap_or(::std::default::Default::default())
                }
                pub fn path_mut(&mut self) -> &'_ mut ::std::vec::Vec<i32> {
                    &mut self.path
                }
                pub fn clear_source_file(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn source_file_mut(&mut self) -> &'_ mut ::std::string::String {
                    if !self.has_source_file() {
                        self.source_file = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    &mut self.source_file
                }
                pub fn clear_begin(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn begin_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_begin() {
                        self.begin = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.begin
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(2, false);
                }
                pub fn end_mut(&mut self) -> &'_ mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(2, true);
                    }
                    &mut self.end
                }
            }

            impl super::_puroro_traits::AnnotationTrait for Annotation {
                type PathRepeatedType<'this> =
                    ::puroro::CloneThenIntoRepeatedField<'this, ::std::vec::Vec<i32>, i32, i32>;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.path)
                }
                fn source_file_opt<'this>(&'this self) -> Option<&'this str> {
                    <self::Annotation>::source_file_opt(self)
                }
                fn begin_opt<'this>(&'this self) -> Option<i32> {
                    <self::Annotation>::begin_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <self::Annotation>::end_opt(self)
                }
            }

            impl ::puroro::MessageRepresentativeImpl for Annotation {}

            impl ::puroro::internal::de::DeserMessageFromBytesIter for Annotation {
                fn deser_field<I>(
                    &mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::simple::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::Int32,
                        >::deser_field(&mut self.path, data),
                        2 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Optional,
                                ::puroro::tags::String,
                            >::deser_field(&mut self.source_file, data)
                        }
                        3 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.begin, data)
                        }
                        4 => {
                            self._bitfield.set(2, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl ::puroro::internal::se::SerMessageToIoWrite for Annotation
            where
                Self: super::_puroro_traits::AnnotationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::path(self),
                        1,
                        out,
                        true,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::source_file_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::begin_opt(self),
                        3,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::end_opt(self),
                        4,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl ::std::default::Default for Annotation {
                fn default() -> Self {
                    Self::new()
                }
            }

            impl ::std::fmt::Debug for Annotation
            where
                Self: super::_puroro_traits::AnnotationTrait,
            {
                fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
                    f.debug_struct("Annotation")
                        .field("path", &self.path())
                        .field("source_file", &self.source_file_opt())
                        .field("begin", &self.begin_opt())
                        .field("end", &self.end_opt())
                        .finish()
                }
            }

            impl ::std::clone::Clone for Annotation {
                fn clone(&self) -> Self {
                    Self {
                        _bitfield: ::std::clone::Clone::clone(&self._bitfield),
                        path: ::std::clone::Clone::clone(&self.path),
                        source_file: ::std::clone::Clone::clone(&self.source_file),
                        begin: ::std::clone::Clone::clone(&self.begin),
                        end: ::std::clone::Clone::clone(&self.end),
                    }
                }
            }

            impl ::std::cmp::PartialEq for Annotation {
                fn eq(&self, rhs: &Self) -> bool {
                    self._bitfield == rhs._bitfield
                        && self.path == rhs.path
                        && (self._bitfield.get(0).as_deref() != Some(&true)
                            || self.source_file == rhs.source_file)
                        && (self._bitfield.get(1).as_deref() != Some(&true)
                            || self.begin == rhs.begin)
                        && (self._bitfield.get(2).as_deref() != Some(&true) || self.end == rhs.end)
                        && true
                }
            }
        }

        pub use _puroro_impls::*;
        pub mod _puroro_impls {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }
            use super::_puroro_traits::*;

            pub struct AnnotationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                pub path: RepeatedType,
            }

            impl<ScalarType, RepeatedType> ::puroro::Message<super::Annotation>
                for AnnotationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
            }

            impl<ScalarType, RepeatedType> super::_puroro_traits::AnnotationTrait
                for AnnotationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                type PathRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<
                'this,
                RepeatedType,
                ScalarType,
                i32
            > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.path)
                }
            }

            impl<ScalarType, RepeatedType> ::puroro::internal::se::SerMessageToIoWrite
                for AnnotationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                Self: super::_puroro_traits::AnnotationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::path(self),
                        1,
                        out,
                        true,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType, RepeatedType> ::std::convert::From<RepeatedType>
                for AnnotationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
            {
                fn from(value: RepeatedType) -> Self {
                    Self { path: value }
                }
            }

            impl<ScalarType, RepeatedType> ::std::clone::Clone
                for AnnotationSingleField1<ScalarType, RepeatedType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                for<'a> &'a RepeatedType:
                    ::puroro::RepeatedField<'a> + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                RepeatedType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        path: ::std::clone::Clone::clone(&self.path),
                    }
                }
            }

            pub struct AnnotationSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                pub source_file: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::Annotation> for AnnotationSingleField2<ScalarType> where
                ScalarType: ::std::convert::AsRef<str>
            {
            }

            impl<ScalarType> super::_puroro_traits::AnnotationTrait for AnnotationSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                type PathRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }

                fn source_file_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::Some(self.source_file.as_ref())
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for AnnotationSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                Self: super::_puroro_traits::AnnotationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::source_file_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for AnnotationSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
            {
                fn from(value: ScalarType) -> Self {
                    Self { source_file: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for AnnotationSingleField2<ScalarType>
            where
                ScalarType: ::std::convert::AsRef<str>,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        source_file: ::std::clone::Clone::clone(&self.source_file),
                    }
                }
            }

            pub struct AnnotationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub begin: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::Annotation> for AnnotationSingleField3<ScalarType> where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone
            {
            }

            impl<ScalarType> super::_puroro_traits::AnnotationTrait for AnnotationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                type PathRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }

                fn begin_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.begin),
                    ))
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for AnnotationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::AnnotationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::begin_opt(self),
                        3,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for AnnotationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { begin: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for AnnotationSingleField3<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        begin: ::std::clone::Clone::clone(&self.begin),
                    }
                }
            }

            pub struct AnnotationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                pub end: ScalarType,
            }

            impl<ScalarType> ::puroro::Message<super::Annotation> for AnnotationSingleField4<ScalarType> where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone
            {
            }

            impl<ScalarType> super::_puroro_traits::AnnotationTrait for AnnotationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                type PathRepeatedType<'this> = ::puroro::internal::impls::empty::EmptyRepeatedField<i32> where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }

                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::Some(::std::convert::Into::into(
                        ::std::clone::Clone::clone(&self.end),
                    ))
                }
            }

            impl<ScalarType> ::puroro::internal::se::SerMessageToIoWrite for AnnotationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                Self: super::_puroro_traits::AnnotationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::end_opt(self),
                        4,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }

            impl<ScalarType> ::std::convert::From<ScalarType> for AnnotationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
            {
                fn from(value: ScalarType) -> Self {
                    Self { end: value }
                }
            }

            impl<ScalarType> ::std::clone::Clone for AnnotationSingleField4<ScalarType>
            where
                ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                ScalarType: ::std::clone::Clone,
            {
                fn clone(&self) -> Self {
                    Self {
                        end: ::std::clone::Clone::clone(&self.end),
                    }
                }
            }
            pub struct AnnotationBumpalo<'bump> {
                _bump: &'bump ::puroro::bumpalo::Bump,
                _bitfield: ::puroro::bitvec::array::BitArray<
                    ::puroro::bitvec::order::Lsb0,
                    [u32; (3 + 31) / 32],
                >,
                path: ::puroro::internal::NoAllocBumpVec<i32>,
                source_file: ::puroro::internal::Bare<::puroro::internal::NoAllocBumpString>,
                begin: ::puroro::internal::Bare<i32>,
                end: ::puroro::internal::Bare<i32>,
            }

            pub type AnnotationBumpaloOwned = ::puroro::BumpaloOwned<AnnotationBumpalo<'static>>;
            impl<'bump> AnnotationBumpalo<'bump> {
                pub fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    #[allow(unused)]
                    let bump_ref: &::puroro::bumpalo::Bump =
                        unsafe { ::std::mem::transmute(::std::ops::Deref::deref(&bump)) };

                    Self {
                        _bump: bump,
                        _bitfield: ::std::default::Default::default(),
                        path: ::std::default::Default::default(),
                        source_file: ::std::default::Default::default(),
                        begin: ::std::default::Default::default(),
                        end: ::std::default::Default::default(),
                    }
                }
                pub fn path<'this>(&'this self) -> &'this [i32] {
                    &self.path
                }
                pub fn source_file_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    if self._bitfield.get(0).map_or(false, |v| *v) {
                        ::std::option::Option::Some(&self.source_file)
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn source_file<'this>(&'this self) -> &'this str {
                    match self.source_file_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_source_file(&self) -> bool {
                    self.source_file_opt().is_some()
                }
                pub fn begin_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(1).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.begin.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn begin<'this>(&'this self) -> i32 {
                    match self.begin_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_begin(&self) -> bool {
                    self.begin_opt().is_some()
                }
                pub fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    if self._bitfield.get(2).map_or(false, |v| *v) {
                        ::std::option::Option::Some(self.end.inner())
                    } else {
                        ::std::option::Option::None
                    }
                }
                pub fn end<'this>(&'this self) -> i32 {
                    match self.end_opt() {
                        ::std::option::Option::Some(x) => x,
                        _ => ::std::default::Default::default(),
                    }
                }

                pub fn has_end(&self) -> bool {
                    self.end_opt().is_some()
                }
                pub fn path_mut<'this>(
                    &'this mut self,
                ) -> ::puroro::internal::RefMutBumpVec<'bump, 'this, i32> {
                    unsafe { self.path.as_mut_vec_in(self._bump) }
                }
                pub fn clear_source_file(&mut self) {
                    self._bitfield.set(0, false);
                }
                pub fn source_file_mut<'this>(
                    &'this mut self,
                ) -> impl 'this
                + ::std::ops::DerefMut<
                    Target = ::puroro::bumpalo::collections::String<'bump>,
                > {
                    if !self.has_source_file() {
                        self.source_file = ::std::default::Default::default();
                        self._bitfield.set(0, true);
                    }
                    unsafe { self.source_file.as_mut_string_in(self._bump) }
                }
                pub fn clear_begin(&mut self) {
                    self._bitfield.set(1, false);
                }
                pub fn begin_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_begin() {
                        self.begin = ::std::default::Default::default();
                        self._bitfield.set(1, true);
                    }
                    &mut self.begin
                }
                pub fn clear_end(&mut self) {
                    self._bitfield.set(2, false);
                }
                pub fn end_mut<'this>(&'this mut self) -> &'this mut i32 {
                    if !self.has_end() {
                        self.end = ::std::default::Default::default();
                        self._bitfield.set(2, true);
                    }
                    &mut self.end
                }
            }
            impl<'bump> ::puroro::Message<super::_puroro_simple_impl::Annotation> for AnnotationBumpalo<'bump> {}

            impl<'bump> ::puroro::BumpaloMessage<'bump> for AnnotationBumpalo<'bump> {
                fn new_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> ::puroro::internal::BumpDefault<'bump> for AnnotationBumpalo<'bump> {
                fn default_in(bump: &'bump ::puroro::bumpalo::Bump) -> Self {
                    Self::new_in(bump)
                }
            }

            impl<'bump> super::_puroro_traits::AnnotationTrait for AnnotationBumpalo<'bump> {
                type PathRepeatedType<'this> =
            ::puroro::CloneThenIntoRepeatedField<
                'this,
                ::puroro::internal::NoAllocBumpVec<i32>,
                i32,
                i32
            > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::CloneThenIntoRepeatedField::new(&self.path)
                }
                fn source_file_opt<'this>(&'this self) -> Option<&'this str> {
                    <Self>::source_file_opt(self)
                }
                fn begin_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::begin_opt(self)
                }
                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <Self>::end_opt(self)
                }
            }

            impl<'bump> ::puroro::internal::de::DeserMessageFromBytesIter for AnnotationBumpalo<'bump> {
                fn deser_field<'this, I>(
                    &'this mut self,
                    field_number: i32,
                    data: ::puroro::internal::types::FieldData<
                        &mut ::puroro::internal::de::from_iter::ScopedIter<I>,
                    >,
                ) -> ::puroro::Result<()>
                where
                    I: ::std::iter::Iterator<Item = ::std::io::Result<u8>>,
                {
                    use ::puroro::internal::impls::bumpalo::de::DeserFieldFromBytesIter;
                    match field_number {
                        1 => DeserFieldFromBytesIter::<
                            ::puroro::tags::Repeated,
                            ::puroro::tags::Int32,
                        >::deser_field(
                            &mut self.path, data, self._bump
                        ),
                        2 => {
                            self._bitfield.set(0, true);
                            DeserFieldFromBytesIter::<
                                ::puroro::tags::Optional,
                                ::puroro::tags::String,
                            >::deser_field(
                                &mut self.source_file, data, self._bump
                            )
                        }
                        3 => {
                            self._bitfield.set(1, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.begin, data, self._bump)
                        }
                        4 => {
                            self._bitfield.set(2, true);
                            DeserFieldFromBytesIter::<
                            ::puroro::tags::Optional, ::puroro::tags::Int32
                        >::deser_field(&mut self.end, data, self._bump)
                        }

                        _ => unimplemented!("TODO: This case should be handled properly..."),
                    }
                }
            }

            impl<'bump> ::puroro::internal::se::SerMessageToIoWrite for AnnotationBumpalo<'bump>
            where
                Self: super::_puroro_traits::AnnotationTrait,
            {
                fn ser<W>(&self, out: &mut W) -> ::puroro::Result<()>
                where
                    W: ::std::io::Write,
                {
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Repeated,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::path(self),
                        1,
                        out,
                        true,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::String,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::source_file_opt(self),
                        2,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::begin_opt(self),
                        3,
                        out,
                        false,
                    )?;
                    ::puroro::internal::se::SerFieldToIoWrite::<
                        ::puroro::tags::Optional,
                        ::puroro::tags::Int32,
                    >::ser_field(
                        <Self as super::_puroro_traits::AnnotationTrait>::end_opt(self),
                        4,
                        out,
                        false,
                    )?;
                    ::std::result::Result::Ok(())
                }
            }
            pub struct AnnotationBuilder<T>(T);

            impl<T> AnnotationBuilder<T>
            where
                T: AnnotationTrait,
            {
                pub fn append_path<ScalarType, RepeatedType>(
                    self,
                    value: RepeatedType,
                ) -> AnnotationBuilder<(T, AnnotationSingleField1<ScalarType, RepeatedType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                    for<'a> &'a RepeatedType: ::puroro::RepeatedField<'a>
                        + ::std::iter::IntoIterator<Item = &'a ScalarType>,
                {
                    AnnotationBuilder((self.0, AnnotationSingleField1 { path: value }))
                }

                pub fn append_source_file<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> AnnotationBuilder<(T, AnnotationSingleField2<ScalarType>)>
                where
                    ScalarType: ::std::convert::AsRef<str>,
                {
                    AnnotationBuilder((self.0, AnnotationSingleField2 { source_file: value }))
                }

                pub fn append_begin<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> AnnotationBuilder<(T, AnnotationSingleField3<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    AnnotationBuilder((self.0, AnnotationSingleField3 { begin: value }))
                }

                pub fn append_end<ScalarType>(
                    self,
                    value: ScalarType,
                ) -> AnnotationBuilder<(T, AnnotationSingleField4<ScalarType>)>
                where
                    ScalarType: ::std::convert::Into<i32> + ::std::clone::Clone,
                {
                    AnnotationBuilder((self.0, AnnotationSingleField4 { end: value }))
                }

                pub fn build(self) -> T {
                    self.0
                }
            }

            impl AnnotationBuilder<()> {
                pub fn new() -> Self {
                    Self(())
                }
            }
        }
        pub use _puroro_traits::*;
        pub mod _puroro_traits {
            mod _puroro_root {
                pub use super::super::_puroro_root::*;
            }

            pub trait AnnotationTrait {
                type PathRepeatedType<'this>: ::puroro::RepeatedField<'this>
                    + ::std::iter::IntoIterator<Item = i32>
                where
                    Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this>;
                fn source_file<'this>(&'this self) -> &'this str {
                    self.source_file_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_source_file<'this>(&'this self) -> bool {
                    self.source_file_opt().is_some()
                }

                fn source_file_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    ::std::option::Option::None
                }
                fn begin<'this>(&'this self) -> i32 {
                    self.begin_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_begin<'this>(&'this self) -> bool {
                    self.begin_opt().is_some()
                }

                fn begin_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
                fn end<'this>(&'this self) -> i32 {
                    self.end_opt()
                        .unwrap_or_else(::std::default::Default::default)
                }
                fn has_end<'this>(&'this self) -> bool {
                    self.end_opt().is_some()
                }

                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    ::std::option::Option::None
                }
            }

            macro_rules! annotation_delegate {
                ($ty:ty) => {
                    type PathRepeatedType<'this> = <$ty>::PathRepeatedType<'this> where Self: 'this;
                    fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                        (**self).path()
                    }

                    fn source_file_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                        (**self).source_file_opt()
                    }

                    fn begin_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).begin_opt()
                    }

                    fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                        (**self).end_opt()
                    }
                };
            }

            impl<T> AnnotationTrait for &'_ T
            where
                T: AnnotationTrait,
            {
                annotation_delegate!(T);
            }

            impl<T> AnnotationTrait for &'_ mut T
            where
                T: AnnotationTrait,
            {
                annotation_delegate!(T);
            }

            impl<T> AnnotationTrait for ::std::boxed::Box<T>
            where
                T: AnnotationTrait,
            {
                annotation_delegate!(T);
            }

            impl<'bump, T> AnnotationTrait for ::puroro::bumpalo::boxed::Box<'bump, T>
            where
                T: AnnotationTrait,
            {
                annotation_delegate!(T);
            }

            impl<T> AnnotationTrait for ::puroro::BumpaloOwned<T>
            where
                T: AnnotationTrait,
            {
                annotation_delegate!(T);
            }
            impl AnnotationTrait for () {
                type PathRepeatedType<'this> =
                    ::puroro::internal::impls::empty::EmptyRepeatedField<i32>
                    where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::empty::EmptyRepeatedField::new()
                }
            }
            impl<T, U> AnnotationTrait for (T, U)
            where
                T: AnnotationTrait,
                U: AnnotationTrait,
            {
                type PathRepeatedType<'this>
                    = ::puroro::internal::impls::merged::MergedRepeatedField<
                        <T as AnnotationTrait>::PathRepeatedType<'this>,
                        <U as AnnotationTrait>::PathRepeatedType<'this>,
                    > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::merged::MergedRepeatedField::new(
                        <T as AnnotationTrait>::path(&self.0),
                        <U as AnnotationTrait>::path(&self.1),
                    )
                }

                fn source_file_opt<'this>(&'this self) -> Option<&'this str> {
                    <U as AnnotationTrait>::source_file_opt(&self.1)
                        .or_else(|| <T as AnnotationTrait>::source_file_opt(&self.0))
                }

                fn begin_opt<'this>(&'this self) -> Option<i32> {
                    <U as AnnotationTrait>::begin_opt(&self.1)
                        .or_else(|| <T as AnnotationTrait>::begin_opt(&self.0))
                }

                fn end_opt<'this>(&'this self) -> Option<i32> {
                    <U as AnnotationTrait>::end_opt(&self.1)
                        .or_else(|| <T as AnnotationTrait>::end_opt(&self.0))
                }
            }
            impl<T, U> AnnotationTrait for ::puroro::Either<T, U>
            where
                T: AnnotationTrait,
                U: AnnotationTrait,
            {
                type PathRepeatedType<'this>
                    = ::puroro::internal::impls::either::EitherRepeatedField<
                        <T as AnnotationTrait>::PathRepeatedType<'this>,
                        <U as AnnotationTrait>::PathRepeatedType<'this>,
                    > where Self: 'this;

                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::either::EitherRepeatedField::new(
                        self.as_ref()
                            .map_left(|t| <T as AnnotationTrait>::path(t))
                            .map_right(|u| <U as AnnotationTrait>::path(u)),
                    )
                }
                fn source_file_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().either(
                        |t| <T as AnnotationTrait>::source_file_opt(t),
                        |u| <U as AnnotationTrait>::source_file_opt(u),
                    )
                }
                fn begin_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as AnnotationTrait>::begin_opt(t),
                        |u| <U as AnnotationTrait>::begin_opt(u),
                    )
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().either(
                        |t| <T as AnnotationTrait>::end_opt(t),
                        |u| <U as AnnotationTrait>::end_opt(u),
                    )
                }
            }
            impl<T> AnnotationTrait for ::std::option::Option<T>
            where
                T: AnnotationTrait,
            {
                type PathRepeatedType<'this> =
                    ::puroro::internal::impls::option::OptionRepeatedField<
                        T::PathRepeatedType<'this>
                    > where Self: 'this;
                fn path<'this>(&'this self) -> Self::PathRepeatedType<'this> {
                    ::puroro::internal::impls::option::OptionRepeatedField::new(
                        self.as_ref().map(|msg| msg.path()),
                    )
                }
                fn source_file_opt<'this>(&'this self) -> ::std::option::Option<&'this str> {
                    self.as_ref().and_then(|msg| msg.source_file_opt())
                }
                fn begin_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.begin_opt())
                }
                fn end_opt<'this>(&'this self) -> ::std::option::Option<i32> {
                    self.as_ref().and_then(|msg| msg.end_opt())
                }
            }
        }
        pub use _puroro_nested::*;
        pub mod _puroro_nested {
            pub mod annotation {
                mod _puroro_root {
                    pub use super::super::super::_puroro_root::*;
                }
            }
        }
    }
}
